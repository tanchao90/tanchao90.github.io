<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TanChao的博客</title>
  <subtitle>一个程序猿的进化之路</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tanchao90.com/"/>
  <updated>2017-11-18T14:00:00.000Z</updated>
  <id>http://tanchao90.com/</id>
  
  <author>
    <name>TanChao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信公众号后台开发 —— Nginx &amp; Supervisor</title>
    <link href="http://tanchao90.com/gzh-ops/"/>
    <id>http://tanchao90.com/gzh-ops/</id>
    <published>2017-11-18T14:00:00.000Z</published>
    <updated>2017-11-18T14:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录微信公众号后台在阿里云 ECS 服务器上部署运维时 Nginx 和 Supervisor 的配置、管理。</p>
<a id="more"></a>
<p>目录：</p>
<ul>
<li><a href="#Nginx">Nginx</a></li>
<li><a href="#Supervisor">Supervisor</a></li>
</ul>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><ul>
<li><a href="https://nginx.org/" target="_blank" rel="external">nginx 官方文档</a></li>
<li><a href="https://www.nginx.com/" target="_blank" rel="external">nginx 官网</a></li>
<li><a href="https://github.com/DocsHome/nginx-docs" target="_blank" rel="external">Nginx document translation. Nginx 文档中文译版</a></li>
</ul>
<h4 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h4><ul>
<li><code>brew install nginx</code></li>
<li><code>brew link nginx</code> 这一步可能会遇到权限错误，按提示给当前用户增加对应目录的读写权限即可，我的操作如下所示：<ul>
<li><code>chmod u+rw /usr/local/share/man/man8</code></li>
</ul>
</li>
<li><code>/usr/local/Cellar/nginx/1.12.1</code> 默认安装目录</li>
<li><code>/usr/local/etc/nginx/nginx.conf</code> 默认配置文件</li>
</ul>
<h4 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h4><ul>
<li><code>sudo apt-get install nginx</code></li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><code>nginx</code> 启动 Nginx</li>
<li><code>nginx -s reload</code> 重新加载配置</li>
<li><code>nginx -s reopen</code> 重启 Nginx</li>
<li><code>nginx -s quit</code> 停止 Nginx，服务完所有的连接之后才关闭</li>
<li><code>nginx -s stop</code> 停止 Nginx，直接中断所有的连接</li>
<li><code>nginx -t</code> 检查 Nginx 的配置文件是否正确，修改配置文件之后可用该命令检查一下</li>
<li><code>ps -ef | grep nginx</code> 查看 Nginx 进程</li>
</ul>
<h4 id="用-kill-关闭-Nginx"><a href="#用-kill-关闭-Nginx" class="headerlink" title="用 kill 关闭 Nginx"></a>用 kill 关闭 Nginx</h4><ul>
<li><code>kill -QUIT master进程号</code> 从容停止 Nginx，同 <code>nginx -s quit</code></li>
<li><code>kill -TERM master进程号</code> 快速停止 Nginx，同 <code>nginx -s stop</code></li>
<li><code>kill -9 master进程号</code> 强制停止 Nginx</li>
</ul>
<h4 id="我的配置"><a href="#我的配置" class="headerlink" title="我的配置"></a>我的配置</h4><p>Nginx 中每个项目的配置可放到 Nginx 配置文件所在目录下 <code>conf.d</code> 目录中，如我的配置为：<br><figure class="highlight plain"><figcaption><span>/etc/nginx/conf.d/gzh.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    server_name gzh.com www.gzh.com; # 需要和访问的地方保持一致，要么域名，要么 ip</div><div class="line">    listen 80;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        proxy_pass_header Server;</div><div class="line">        proxy_redirect off;</div><div class="line">        proxy_pass http://127.0.0.1:port;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>注：</strong></p>
<ul>
<li>server_name 我采用的是 ip，因为我的域名没有备案，访问会出问题；</li>
<li>若配置 HTTPS，则 server_name 必须是域名；</li>
<li>80 端口支持多个不同的域名共享，包括子域名，内部通过配置的 server_name 识别；<ul>
<li><a href="https://www.zhihu.com/question/29390934" target="_blank" rel="external">听说一个IP可以绑定多个域名，那么服务端是怎么实现的?</a></li>
</ul>
</li>
</ul>
<p>配置说明：</p>
<ul>
<li><a href="https://nginx.org/en/docs/http/request_processing.html" target="_blank" rel="external">How nginx processes a request</a></li>
<li><a href="http://onlyzq.blog.51cto.com/1228/535279" target="_blank" rel="external">关于Nginx的server_name。</a></li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://n3xtchen.github.io/n3xtchen/nignx/2015/10/01/nginx-port-forwording" target="_blank" rel="external">Nginx-端口转发(反向代理)</a></li>
<li><a href="http://www.jikexueyuan.com/course/1470.html" target="_blank" rel="external">Nginx 初识</a></li>
<li><a href="http://www.jikexueyuan.com/course/1876.html" target="_blank" rel="external">Nginx 与 Tomcat 安装、配置及优化</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/nginx/" target="_blank" rel="external">Nginx 入门指南</a></li>
<li><a href="http://wiki.jikexueyuan.com/project/nginx-lua/development-environment.html" target="_blank" rel="external">安装 Nginx+Lua 开发环境</a></li>
<li><a href="https://serverfault.com/questions/271810/nginx-s-stop-and-s-quit-what-is-the-difference" target="_blank" rel="external">nginx -s stop and -s quit what is the difference?</a></li>
<li><a href="http://www.jianshu.com/p/3531a011b7b6" target="_blank" rel="external">Mac平台nginx相关安装配置</a></li>
<li><a href="http://www.jianshu.com/p/6c7cb820a020" target="_blank" rel="external">Mac下用brew安装nginx</a></li>
</ul>
<h2 id="Supervisor"><a href="#Supervisor" class="headerlink" title="Supervisor"></a>Supervisor</h2><p><a href="http://www.supervisord.org" target="_blank" rel="external">Supervisor</a></p>
<p>安装非常简单，只需 <code>pip install supervisor</code>。</p>
<p>配置文件：</p>
<ul>
<li>Mac：<code>/usr/local/etc/supervisord.conf</code></li>
<li>Ubuntu：<code>/etc/supervisord.conf</code></li>
</ul>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><code>sudo supervisord -c /etc/supervisord.conf</code> 指定配置文件启动 Supervisor</li>
<li><code>sudo supervisorctl</code> 进入控制台交互，若开启服务端密码，则执行时会要求输入密码</li>
<li><code>sudo supervisorctl shutdown</code> 停止 Supervisor</li>
<li><code>sudo supervisorctl status</code> 查看状态</li>
<li><code>sudo supervisorctl reload</code> 重新加载配置文件</li>
<li><code>sudo supervisorctl start all</code> 启动管理的所有进程</li>
<li><code>sudo supervisorctl stop all</code> 停止管理的所有进程</li>
<li><code>sudo supervisorctl start program-name</code> 启动指定进程</li>
<li><code>sudo supervisorctl stop program-name</code> 关闭指定进程</li>
<li><code>sudo supervisorctl restart all</code> 重启所有进程</li>
</ul>
<h4 id="我的配置-1"><a href="#我的配置-1" class="headerlink" title="我的配置"></a>我的配置</h4><figure class="highlight plain"><figcaption><span>/etc/supervisord.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">; 开启web管理页面</div><div class="line">[inet_http_server]         ; inet (TCP) server disabled by default</div><div class="line">port=*:9001                ; ip_address:port specifier, *:port for all iface</div><div class="line">username=username          ; default is no username (open server)</div><div class="line">password=password          ; default is no password (open server)</div><div class="line"></div><div class="line">[program:wechat_gzh] ; 公众号服务端 配置</div><div class="line">directory=/home/user_test/projects/gzh/server  ; 项目的文件夹路径</div><div class="line">command=/home/user_test/.pyenv/versions/gzh-3.6.2/bin/python main.py ; 程序启动命令</div><div class="line">user=user_test  ; 以什么身份执行 command</div><div class="line">autostart=true</div><div class="line">stdout_logfile=/home/user_test/logs/%(program_name)s/stdout.log     ; log 日志</div><div class="line">stderr_logfile=/home/user_test/logs/%(program_name)s/stderr.log     ; 错误日志</div><div class="line">stdout_logfile_maxbytes=1MB ; 每个 log 文件的最大容量</div><div class="line">stdout_logfile_backups=30</div><div class="line">stderr_logfile_maxbytes=1MB</div><div class="line">stderr_logfile_backups=30</div><div class="line"></div><div class="line"></div><div class="line">[program:nginx]      ；nginx 配置</div><div class="line">directory=/</div><div class="line">;command=/usr/sbin/nginx -c /etc/nginx/nginx.conf</div><div class="line">command=nginx</div><div class="line">user=root</div><div class="line">stdout_logfile=/home/user_test/logs/%(program_name)s/stdout.log</div><div class="line">stderr_logfile=/home/user_test/logs/%(program_name)s/stderr.log</div><div class="line">autostart=true</div><div class="line">autorestart=true</div><div class="line">startsecs=10</div></pre></td></tr></table></figure>
<p>注意事项：</p>
<ul>
<li>开启 Web 管理页面，即取消 <code>[inet_http_server]</code> 的注释，并设置对应参数；</li>
<li>虚拟环境下 Python 运行环境指定；</li>
<li>Nginx 设置；</li>
<li>日志重定向时，需要提前创建好日志文件所在的目录，否则会启动失败；</li>
</ul>
<h4 id="Python-虚拟环境"><a href="#Python-虚拟环境" class="headerlink" title="Python 虚拟环境"></a>Python 虚拟环境</h4><p>当采用虚拟环境中的 Python 运行程序时，若已经在项目所在目录配置了 Python 执行环境（比如通过 <code>.python-version</code> 文件配置），则 Supervisor 中有下面两种配置方式：</p>
<p>配置1：<br><figure class="highlight plain"><figcaption><span>/etc/supervisord.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[program:wechat_gzh]</div><div class="line">directory=/home/user_test/projects/gzh/server</div><div class="line">command=python main.py ; 程序启动命</div><div class="line">; 其他配置</div></pre></td></tr></table></figure></p>
<p>配置2：<br><figure class="highlight plain"><figcaption><span>/etc/supervisord.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[program:wechat_gzh]</div><div class="line">directory=/home/user_test/projects/gzh/server</div><div class="line">command=/home/user_test/.pyenv/versions/gzh-3.6.2/bin/python main.py</div><div class="line">; 其他配置</div></pre></td></tr></table></figure></p>
<p>两种配置的区别是，是否在 command 中指定 python 全路径，在不同系统下的表现为：</p>
<ul>
<li>Mac 下上述两种配置均 ok；</li>
<li>Ubuntu 下只有配置2 能正确运行程序，配置1 会使用系统默认 Python 版本；</li>
</ul>
<p>所以建议采用配置2，明确指定用哪个版本的 Python 执行程序；</p>
<h4 id="Nginx-特殊配置"><a href="#Nginx-特殊配置" class="headerlink" title="Nginx 特殊配置"></a>Nginx 特殊配置</h4><p>Nginx 默认启动是在 daemon 模式下，而 Supervisor 管理的程序必须是前台运行模式，所以需要在 Nginx 的配置文件中添加下面的配置，关闭后台运行模式：</p>
<figure class="highlight plain"><figcaption><span>/etc/nginx/nginx.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># 关闭后台运行功能，用 supervisor 管理</div><div class="line">daemon off;</div></pre></td></tr></table></figure>
<h4 id="日志重定向"><a href="#日志重定向" class="headerlink" title="日志重定向"></a>日志重定向</h4><p>Supervisor 支持对应用日志进行重定向，输出到指定的文件中，还可以指定每个日志文件的最大值，历史日志数量等，默认按日志大小滚动；</p>
<p>如果想支持更丰富的日志滚动方案，可以借助于 <a href="https://github.com/logrotate/logrotate" target="_blank" rel="external">logrotate/logrotate</a> 完成，<a href="https://imququ.com/post/my-nginx-conf.html" target="_blank" rel="external">Nginx 配置之完整篇</a> 一文中包含具体的配置实践。</p>
<h4 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://www.tianfeiyu.com/?p=2450" target="_blank" rel="external">使用 supervisor 管理进程</a></li>
<li><a href="https://my.oschina.net/nalenwind/blog/740652" target="_blank" rel="external">docker run nginx问题</a></li>
<li><a href="https://stackoverflow.com/questions/15202760/how-to-use-virtualenvwrapper-in-supervisor" target="_blank" rel="external">How to use virtualenvwrapper in Supervisor?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录微信公众号后台在阿里云 ECS 服务器上部署运维时 Nginx 和 Supervisor 的配置、管理。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Nginx" scheme="http://tanchao90.com/tags/Nginx/"/>
    
      <category term="Supervisor" scheme="http://tanchao90.com/tags/Supervisor/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号后台开发 —— MySQL</title>
    <link href="http://tanchao90.com/gzh-mysql/"/>
    <id>http://tanchao90.com/gzh-mysql/</id>
    <published>2017-11-18T12:00:00.000Z</published>
    <updated>2017-11-18T12:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录微信公众号后台数据库在生产环境的部署过程。</p>
<a id="more"></a>
<p>目录：</p>
<ul>
<li><a href="#MySQL">MySQL</a></li>
<li><a href="#设置默认字符集">设置默认字符集</a></li>
<li><a href="#用户管理">用户管理</a></li>
<li><a href="#远程访问">远程访问</a></li>
<li><a href="#MySQL-基本操作命令">MySQL-基本操作命令</a></li>
</ul>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h4 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h4><ul>
<li>阿里云 ECS 服务器</li>
<li>Ubuntu 16.04.2 LTS</li>
<li>MySQL 5.7.19</li>
</ul>
<h4 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h4><ul>
<li><code>sudo apt-get update</code></li>
<li><code>sudo apt-get install mysql-server</code> 安装过程中会提示为数据库 <code>root</code> 账户设置密码；</li>
<li><code>dpkg -l | grep mysql | grep ii</code> 列出从 MySQL APT 安装的所有包；</li>
</ul>
<h4 id="UnInstall"><a href="#UnInstall" class="headerlink" title="UnInstall"></a>UnInstall</h4><ul>
<li><code>sudo apt-get remove mysql-server</code></li>
<li><code>sudo apt-get autoremove</code></li>
</ul>
<h4 id="MySQL-配置文件"><a href="#MySQL-配置文件" class="headerlink" title="MySQL 配置文件"></a>MySQL 配置文件</h4><p><code>apt-get</code> 方式安装之后默认配置文件是 <code>/etc/mysql/my.cnf</code>，文件内容可参考 <a href="https://gist.github.com/tanchao90/f95d19cc4943c4df2b8ee371bcb99434" target="_blank" rel="external">mysql-5.7.19 default config file</a>。</p>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://dev.mysql.com/doc/mysql-apt-repo-quick-guide/en/" target="_blank" rel="external">A Quick Guide to Using the MySQL APT Repository</a></li>
</ul>
<h2 id="设置默认字符集"><a href="#设置默认字符集" class="headerlink" title="设置默认字符集"></a>设置默认字符集</h2><h4 id="选择合适的字符集（Character-set）"><a href="#选择合适的字符集（Character-set）" class="headerlink" title="选择合适的字符集（Character-set）"></a>选择合适的字符集（Character-set）</h4><p>由于目前数据库存储的字符种类越来越多（如汉字、各种符号、Emoji 等），为了满足存储需求，一般会将字符集设置为 <code>utf8mb4</code>，排序字符集设置为 <code>utf8mb4_unicode_ci</code>。</p>
<ul>
<li><code>utf8mb4</code> 是 utf8 的扩展集，最大可存储四字节的字符，因而可表示的字符也大大增加；</li>
<li><code>utf8mb4_unicode_ci</code> 基于标准的 Unicode 来排序和比较，能够在各种语言之间精确排序，相比 <code>utf8mb4_general_ci</code> 增加的性能消耗基本可以忽略。</li>
</ul>
<p>更具体的介绍及其配置可参考本节 References 模块。</p>
<h4 id="修改数据库配置"><a href="#修改数据库配置" class="headerlink" title="修改数据库配置"></a>修改数据库配置</h4><p>在 <code>/etc/mysql/my.cnf</code> 文件中添加下面的内容即可完成修改，修改之后的文件可见 <a href="https://gist.github.com/tanchao90/d758912446b122d70a0ce64d0ed98b37" target="_blank" rel="external">mysql-5.7.19 customized config file</a>，gist 评论 包含了修改前后的字符集对比；</p>
<figure class="highlight plain"><figcaption><span>/etc/mysql/my.cnf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># customized config</div><div class="line">[client]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysql]</div><div class="line">default-character-set = utf8mb4</div><div class="line"></div><div class="line">[mysqld]</div><div class="line">character-set-server = utf8mb4</div><div class="line">collation-server = utf8mb4_unicode_ci</div><div class="line">init_connect=&apos;SET NAMES utf8mb4&apos;</div><div class="line">init_connect=&apos;SET collation_connection = utf8mb4_unicode_ci&apos;</div><div class="line">character-set-client-handshake = FALSE</div></pre></td></tr></table></figure>
<p>修改配置之后需要重启数据库才能生效，具体可用下面的命令查看修改前后的数据库字符集：</p>
<ul>
<li>mysql&gt; <code>SHOW VARIABLES LIKE &#39;char%&#39;; SHOW VARIABLES LIKE &#39;collation%&#39;;</code> </li>
</ul>
<p>更多配置选项可参考官方文档 <a href="https://dev.mysql.com/doc/refman/5.7/en/server-options.html#option_mysqld_character-set-client-handshake" target="_blank" rel="external">5.1.4 Server Command Options</a>；</p>
<h4 id="修改-MySQL-启动地址"><a href="#修改-MySQL-启动地址" class="headerlink" title="修改 MySQL 启动地址"></a>修改 MySQL 启动地址</h4><p>可通过命令 <code>netstat -noa | grep 3306</code> 查看 MySQL 当前的启动地址，默认是 <code>127.0.0.1</code>，只支持本地访问；为了支持远程访问，需要将其修改为 <code>0.0.0.0</code>；</p>
<p>具体需要修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code> 中的内容：<br><figure class="highlight plain"><figcaption><span>/etc/mysql/mysql.conf.d/mysqld.cnf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># Instead of skip-networking the default is now to listen only on</div><div class="line"># localhost which is more compatible and is not less secure.</div><div class="line"># bind-address		= 127.0.0.1</div><div class="line">bind-address		= 0.0.0.0</div></pre></td></tr></table></figure></p>
<h4 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://stackoverflow.com/a/24487309/5856236" target="_blank" rel="external">Change MySQL default character set to UTF-8 in my.cnf?</a></li>
<li><a href="http://seanlook.com/2016/10/23/mysql-utf8mb4/" target="_blank" rel="external">mysql使用utf8mb4经验吐血总结</a></li>
<li><a href="https://stackoverflow.com/a/766996/5856236" target="_blank" rel="external">What’s the difference between utf8_general_ci and utf8_unicode_ci</a></li>
<li><a href="http://www.jianshu.com/p/df1523bc67cd" target="_blank" rel="external">mysql 保存emoji 4字节宽度字符串</a></li>
</ul>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>创建用户的目的是实现权限控制，保障数据库安全；对于外部访问，还需要设置防火墙参数。</p>
<h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><ul>
<li>mysql &gt; <code>CREATE USER &#39;username1&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;password1&#39;;</code> 该用户只能在本地访问数据库；</li>
<li>mysql &gt; <code>CREATE USER &#39;username2&#39;@&#39;%&#39; IDENTIFIED BY &#39;password2&#39;;</code> 该用户可在所有机器上访问数据库；</li>
<li>mysql &gt; <code>DROP USER &#39;username2&#39;@&#39;%&#39;;</code> 删除用户 <code>username2</code> 在 <code>&#39;%&#39;</code> 机器上的访问权限；</li>
</ul>
<h4 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h4><ul>
<li>mysql &gt; <code>GRANT ALL PRIVILEGES ON dbname.* TO &#39;username1&#39;@&#39;localhost&#39; WITH GRANT OPTION;</code> 分配给该用户对数据库 <code>dbname</code> 的所有操作权限，并包含授权权限；</li>
<li>mysql &gt; <code>GRANT SELECT ON dbname.* TO &#39;username2&#39;@&#39;%&#39;;</code> 只分配给该用户对数据库 <code>dbname</code> 的查询权限；</li>
<li>mysql &gt; <code>FLUSH PRIVILEGES;</code> 刷新缓存，及时生效权限设置；</li>
<li>mysql &gt; <code>SHOW GRANTS FOR &#39;username1&#39;@&#39;localhost&#39;;</code> 查看该用户的权限；</li>
<li>mysql &gt; <code>REVOKE DELETE ON dbname.* FROM &#39;username1&#39;@&#39;localhost&#39;;</code> 收回该用户的删除权限；</li>
<li>mysql &gt; <code>REVOKE GRANT OPTION ON dbname.* FROM &#39;username1&#39;@&#39;localhost&#39;;</code> 收回该用户的授权权限；</li>
</ul>
<p><strong>注：</strong></p>
<ul>
<li>MySQL 中的权限分为五个级别，分别是 <code>Global Privileges</code>，<code>Database Privileges</code>，<code>Table Privileges</code>，<code>Column Privileges</code>，<code>Stored Routine Privileges</code>；<ul>
<li><a href="http://blog.csdn.net/qwe6112071/article/details/68952220" target="_blank" rel="external">MySQL权限系统详解</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/grant.html" target="_blank" rel="external">13.7.1.4 GRANT Syntax</a></li>
</ul>
</li>
<li>全局权限（Global Privileges）存储在 <code>mysql.user</code> 表中，如通过 <code>... ON *.* TO ...</code> 命令分配，不限定数据库和数据表；</li>
<li>数据库权限（Database Privileges）存储在 <code>mysql.db</code> 表中，如通过 <code>... ON dbname.* TO ...</code> 命令分配，其中指定了只能操作 dbname 数据库；</li>
<li>mysql &gt; <code>SELECT * FROM mysql.db \G;</code> 查询 mysql.db 表中的数据，末尾的 <code>\G</code> 可让查询结果以键值对的形式展示，可读性更好；</li>
</ul>
<h2 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h2><p>通过远程访问数据库，既方便又安全，还能借助于图形化工具操作数据库；</p>
<h4 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h4><p>远程连接数据库一般有下面两种方式：</p>
<ul>
<li>远程直接访问数据库，需要满足下面的条件：<ul>
<li>登录用户需要分配远程访问权限，上文中创建的用户 <code>username2</code> 就支持远程访问；</li>
<li>MySQL 需要启动在 <code>0.0.0.0</code> 地址下；</li>
<li>修改 <code>iptables</code>，打开防火墙限制；</li>
</ul>
</li>
<li>通过 SSH 隧道访问，直接连接到数据库所在机器，此时相当于本地访问数据库；</li>
</ul>
<h4 id="打开防火墙"><a href="#打开防火墙" class="headerlink" title="打开防火墙"></a>打开防火墙</h4><p>通过 <code>iptables -L -n</code> 可查看当前防火墙配置，可通过 <code>iptables</code> 对其修改，具体参考 <a href="http://www.jianshu.com/p/586da7c8fd42" target="_blank" rel="external">Linux下iptables防火墙配置详解</a>;</p>
<p><strong>坑</strong> <strong>坑</strong> <strong>坑</strong>  在我的阿里云服务器上修改 iptables 的做法一直不起作用 …</p>
<p>我在这里折腾了很久都不能远程访问，问了谷歌无数遍，一直没找到原因，最后无奈之下在阿里云提了一个售后支持的工单，几个小时就帮我搞定了，阿里云的机器需要在控制台设置安全组（打开 MySQL 端口的访问限制），具体可参考 <a href="https://help.aliyun.com/document_detail/25471.html" target="_blank" rel="external">添加安全组规则</a>，总之，对于 ECS 服务器：</p>
<ul>
<li>不需要修改本机 iptables；</li>
<li>直接在控制台设置安全组规则即可；</li>
<li>所有对外暴漏的端口都需要通过安全组设置；</li>
</ul>
<h4 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/user-account-management.html" target="_blank" rel="external">6.3 MySQL User Account Management</a></li>
<li><a href="http://www.jianshu.com/p/d7b9c468f20d" target="_blank" rel="external">MySQL创建用户与授权</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html" target="_blank" rel="external">6.2.1 Privileges Provided by MySQL</a></li>
<li><a href="https://stackoverflow.com/questions/22732551/mysql-user-doesnt-show-all-of-the-privileges" target="_blank" rel="external">Mysql.User doesn’t show all of the privileges</a></li>
<li><a href="https://stackoverflow.com/a/766996/5856236" target="_blank" rel="external">Why is GRANT not working in MySQL?</a></li>
<li><a href="https://dzer.me/2016/05/04/ubuntu-%E5%BC%80%E5%90%AFmysql%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/" target="_blank" rel="external">Ubuntu 开启mysql远程连接</a></li>
</ul>
<h2 id="MySQL-基本操作命令"><a href="#MySQL-基本操作命令" class="headerlink" title="MySQL-基本操作命令"></a>MySQL-基本操作命令</h2><h4 id="管理-MySQL-服务"><a href="#管理-MySQL-服务" class="headerlink" title="管理 MySQL 服务"></a>管理 MySQL 服务</h4><ul>
<li><code>mysql -u root -p [db_name]</code> 登录 MySQL 数据库；</li>
<li><code>sudo service mysql status</code></li>
<li><code>sudo service mysql start</code></li>
<li><code>sudo service mysql stop</code></li>
</ul>
<h4 id="MySQL-命令行交互"><a href="#MySQL-命令行交互" class="headerlink" title="MySQL 命令行交互"></a>MySQL 命令行交互</h4><ul>
<li>mysql &gt; <code>STATUS;</code></li>
<li>mysql &gt; <code>SHOW databases;</code> 查看当前数据库进程中的数据库实例；</li>
<li>mysql &gt; <code>SELECT database();</code> 查看当前所在的数据库；</li>
<li>mysql &gt; <code>USE databasename;</code> 进入 databasename 数据库；</li>
<li>mysql &gt; <code>SHOW tables;</code> 查看当前数据库中的表；</li>
<li>mysql &gt; <code>SELECT version();</code> 查看 MySQL 版本号；</li>
<li>mysql &gt; <code>SHOW CHAR SET WHERE Charset LIKE &quot;%utf8%&quot;;</code> 查看数据库中所有包含 utf8 的字符集；</li>
</ul>
<h4 id="数据库管理"><a href="#数据库管理" class="headerlink" title="数据库管理"></a>数据库管理</h4><ul>
<li>mysql &gt; <code>CREATE DATABASE test;</code></li>
<li>mysql &gt; <code>CREATE DATABASE test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</code></li>
<li>mysql &gt; <code>SELECT @@character_set_database, @@collation_database;</code> 查看当前数据库的字符集；</li>
</ul>
<h4 id="数据表管理"><a href="#数据表管理" class="headerlink" title="数据表管理"></a>数据表管理</h4><ul>
<li>mysql &gt; <code>CREATE TABLE test_table (c CHAR(20) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci);</code> 创建数据表 test_table；</li>
<li><code>select * from information_schema.TABLES where TABLE_NAME = &#39;free&#39; \G;</code> 查看数据表信息<ul>
<li>TABLE_SCHEMA：数据库名</li>
<li>TABLE_NAME：表名</li>
<li>ENGINE：所使用的存储引擎</li>
<li>TABLES_ROWS：记录数</li>
<li>DATA_LENGTH：数据大小</li>
<li>INDEX_LENGTH：索引大小</li>
<li>DATA_FREE：数据库碎片大小</li>
</ul>
</li>
<li>表占用空间的大小 ≈ 数据大小 + 索引大小</li>
</ul>
<h4 id="References-3"><a href="#References-3" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/sql-syntax.html" target="_blank" rel="external">Chapter 13 SQL Statement Syntax</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/creating-database.html" target="_blank" rel="external">3.3.1 Creating and Selecting a Database</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/charset-database.html" target="_blank" rel="external">10.1.3.3 Database Character Set and Collation</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录微信公众号后台数据库在生产环境的部署过程。&lt;/p&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://tanchao90.com/categories/MySQL/"/>
    
    
      <category term="阿里云 ECS" scheme="http://tanchao90.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91-ECS/"/>
    
      <category term="MySQL" scheme="http://tanchao90.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号后台开发 —— 阿里云 ECS</title>
    <link href="http://tanchao90.com/gzh-ecs/"/>
    <id>http://tanchao90.com/gzh-ecs/</id>
    <published>2017-11-18T08:00:00.000Z</published>
    <updated>2017-11-18T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录微信公众号后台部署时 阿里云 ECS 服务器的配置和管理。</p>
<a id="more"></a>
<h2 id="阿里云-ECS"><a href="#阿里云-ECS" class="headerlink" title="阿里云 ECS"></a>阿里云 ECS</h2><p>通过实践，个人感觉 ECS 机器层面的配置主要包括：</p>
<ul>
<li>用户管理：参考后文</li>
<li>安全组配置：在阿里云 Web 管理系统中完成，具体可参考 <a href="https://help.aliyun.com/document_detail/25471.html" target="_blank" rel="external">添加安全组规则</a></li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://help.aliyun.com/" target="_blank" rel="external">帮助与文档</a></li>
<li><a href="https://help.aliyun.com/document_detail/25378.html?spm=5176.doc25423.2.2.WlZ3YN#entrylevel" target="_blank" rel="external">帮助与文档 实例规格族</a></li>
<li><a href="https://ninghao.net/video/3550" target="_blank" rel="external">阿里云 ECS：Linux 服务器 入门视频教程</a></li>
</ul>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>为了避免在服务器外部使用 root 用户登录，在此创建具有 root 权限的新用户，通过该用户远程管理服务器；</p>
<p><strong>注：</strong> 操作过程中不要退出已登录的 root，一定要确保创建的新用户可以远程登录，并且可以切换到 root 用户时，再禁用 root 用户的远程登录权限，否则可能再也无法连上服务器；</p>
<p>主要参考文章 <a href="http://www.huchiwei.com/2017/03/02/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8ESC%E7%8E%AF%E5%A2%83%EF%BC%88%E4%BA%8C%EF%BC%89-SSH%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE/" target="_blank" rel="external">阿里云服务器ESC环境（二） - SSH安全配置</a> 完成配置。</p>
<h4 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h4><ul>
<li>登录 root 用户</li>
<li><code>adduser username</code></li>
<li>在 <code>/etc/sudoers</code> 文件中添加 <code>username    ALL=(ALL:ALL) ALL</code>，使 username 具有 <code>su</code>、<code>sudo</code> 权限；</li>
</ul>
<h4 id="对新用户添加公钥"><a href="#对新用户添加公钥" class="headerlink" title="对新用户添加公钥"></a>对新用户添加公钥</h4><ul>
<li><code>ssh-keygen -t rsa -b 4096 -C &quot;email&quot;</code> 在本地生成私钥和公钥，假设私钥名称为 <code>username_id_rsa</code>；</li>
<li><code>ssh-add username_id_rsa</code> 将新生成的密钥添加到环境中，后续使用密钥时就可以不用输入密码了；</li>
<li><code>ssh username@ip</code> 打开新的 shell 窗口，用刚才新建的账户登录服务器；</li>
<li><code>mkdir .ssh</code></li>
<li><code>cd .ssh</code></li>
<li><code>vim authorized_keys</code> 在其中填入公钥 <code>username_id_rsa.pub</code> 的内容;</li>
<li><code>exit</code> 退出登录；</li>
<li><code>ssh -i ~/.ssh/username_id_rsa username@ip</code> 尝试用私钥登录，并测试 <code>su</code>、<code>sudo</code> 权限；</li>
</ul>
<p>若上述操作成功，则该新用户支持两种方式的远程访问：</p>
<ul>
<li>ssh 私钥登录；</li>
<li>密码登录；</li>
</ul>
<h4 id="禁用-root-用户登录"><a href="#禁用-root-用户登录" class="headerlink" title="禁用 root 用户登录"></a>禁用 root 用户登录</h4><ul>
<li>登录 root 用户；</li>
<li>修改 <code>/etc/ssh/sshd_config</code> 文件中的 <code>PermitRootLogin</code> 为 <code>no</code>；</li>
<li>重启 ssh：<code>service ssh restart</code>；</li>
</ul>
<p>此时 root 将无法通过密码远程登录；</p>
<h4 id="ssh-连接断开"><a href="#ssh-连接断开" class="headerlink" title="ssh 连接断开"></a>ssh 连接断开</h4><p>Mac 下 ssh 连接阿里云稍微长时间不操作，就会断开连接，比较烦，完成如下配置就不会断开了：</p>
<p>在 <code>~/.ssh/config</code> 文件中增加一行配置 ： <code>ServerAliveInterval 60</code>。<br><figure class="highlight plain"><figcaption><span>~/.ssh/config</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Host *</div><div class="line"> ServerAliveInterval 60</div></pre></td></tr></table></figure></p>
<h4 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://blog.csdn.net/beitiandijun/article/details/41678251" target="_blank" rel="external"> linux用户管理（1）—-创建用户（adduser和useradd）和删除用户（userdel）</a></li>
<li><a href="https://help.aliyun.com/knowledge_detail/41493.html" target="_blank" rel="external">云服务器 ECS Linux SSH 基于密钥交换的自动登录原理简介及配置说明</a></li>
<li><a href="https://talk.ninghao.net/t/mac-shang-fang-zhi-ssh-zi-dong-duan-kai/3399" target="_blank" rel="external">Mac 上防止 ssh 自动断开</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录微信公众号后台部署时 阿里云 ECS 服务器的配置和管理。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="阿里云 ECS" scheme="http://tanchao90.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91-ECS/"/>
    
      <category term="Ubuntu" scheme="http://tanchao90.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号后台开发 —— 功能开发</title>
    <link href="http://tanchao90.com/gzh-logic/"/>
    <id>http://tanchao90.com/gzh-logic/</id>
    <published>2017-11-18T02:00:00.000Z</published>
    <updated>2017-11-18T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录功能开发过程，以用到的知识点或者功能点为章节总结。</p>
<a id="more"></a>
<p>目录：</p>
<ul>
<li><a href="#Python">Python</a> </li>
<li><a href="#配置文件">配置文件</a></li>
<li><a href="#日志">日志</a></li>
<li><a href="#WeRoBot">WeRoBot</a></li>
<li><a href="#SQLAlchemy">SQLAlchemy</a></li>
<li><a href="#有限状态机">有限状态机</a></li>
<li><a href="#测试">测试</a></li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>关于 Python，熟悉语言肯定是基础，可以让开发变得简单、高效，此外可能还需要做下面的工作：</p>
<ul>
<li>配置开发环境，对本项目来说主要包括：<ul>
<li>创建虚拟 Python 环境，可参考 <a href="http://tanchao90.com/python-env/">Python 总结 —— Python 版本管理</a>；</li>
<li>安装依赖的软件包；</li>
</ul>
</li>
<li>发现一些好用的轮子，提高效率，可参考<a href="https://www.zhihu.com/question/24590883" target="_blank" rel="external">哪些 Python 库让你相见恨晚？</a>；</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://stackoverflow.com/questions/20301920/whats-the-difference-between-coding-utf8-and-coding-utf-8" target="_blank" rel="external">What’s the difference between ‘coding=utf8’ and ‘-<em>- coding: utf-8 -</em>-‘?</a></li>
<li><a href="https://stackoverflow.com/questions/16869024/what-is-pycache" target="_blank" rel="external">What is <strong>pycache</strong>?</a></li>
<li><a href="http://blog.csdn.net/index20001/article/details/73501375" target="_blank" rel="external">运行Python脚本时生成的<strong>pycache</strong>文件夹</a></li>
<li><a href="http://www.laobi.space/2016/12/04/Python%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0-68-%E2%80%94%E2%80%94-import/" target="_blank" rel="external">Python内置函数(68)——<strong>import</strong></a></li>
<li><a href="https://stackoverflow.com/questions/2724260/why-does-pythons-import-require-fromlist/2725668#2725668" target="_blank" rel="external">Why does Python’s <strong>import</strong> require fromlist?</a></li>
</ul>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>自己实现了一个配置文件管理模块，具有如下功能：</p>
<ul>
<li>像访问类属性一样访问每一个配置项，代码清晰简洁；</li>
<li>支持默认配置、本地配置；</li>
<li>支持同时配置多套环境；</li>
<li>通过启动命令中的参数指定运行环境；<ul>
<li>这个功能借助于 getopt 模块实现，具体参考 <a href="http://www.jianshu.com/p/71bc0c8295ed" target="_blank" rel="external">Python 获取命令行参数：getopt模块</a></li>
</ul>
</li>
</ul>
<h4 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://stackoverflow.com/questions/29033259/how-to-iterate-over-dict-in-class-like-if-just-referring-to-dict" target="_blank" rel="external">How to iterate over <code>dict</code> in class like if just referring to <code>dict</code>?</a></li>
</ul>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>对于线上程序，日志对于定位问题至关重要，本公众号后台程序基于 <a href="https://github.com/getlogbook/logbook" target="_blank" rel="external">getlogbook/logbook</a> 自定义了一个日志模块，主要完成下面的功能：</p>
<ul>
<li>自定义日志格式；</li>
<li>支持不同级别的日志；</li>
<li>可根据级别处理日志，如 Debug 只在开发环境打印，Info 输出到文件，Error 邮件通知；</li>
<li>对于 Error log，通过邮件的方式通知我，及时发现问题；<ul>
<li>完成该功能时，邮件发送方账号需要开启 <code>POP3/SMTP服务</code>，并将验证密码配置为 <code>授权密码</code>，保证邮箱账号原始密码的安全；</li>
</ul>
</li>
</ul>
<h4 id="一些不错的日志库"><a href="#一些不错的日志库" class="headerlink" title="一些不错的日志库"></a>一些不错的日志库</h4><ul>
<li><a href="https://docs.python.org/3.5/library/logging.html" target="_blank" rel="external">logging — Logging facility for Python</a></li>
<li><a href="https://github.com/getlogbook/logbook" target="_blank" rel="external">getlogbook/logbook</a></li>
<li><a href="https://github.com/hynek/structlog" target="_blank" rel="external">hynek/structlog</a></li>
<li><a href="https://github.com/metachris/logzero" target="_blank" rel="external">metachris/logzero</a> 默认彩色</li>
<li><a href="https://github.com/borntyping/python-colorlog" target="_blank" rel="external">borntyping/python-colorlog</a> 可自定义各种颜色</li>
<li><a href="https://github.com/reubano/pygogo" target="_blank" rel="external">reubano/pygogo</a></li>
</ul>
<h4 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://blog.yasking.org/a/python-logbook.html" target="_blank" rel="external">Python日志记录包logbook</a></li>
<li><a href="https://www.zybuluo.com/rickyChen/note/362077" target="_blank" rel="external">关于发邮件报错535 Error：authentication failed解决方法</a></li>
</ul>
<h2 id="WeRoBot"><a href="#WeRoBot" class="headerlink" title="WeRoBot"></a>WeRoBot</h2><ul>
<li><a href="https://github.com/whtsky/WeRoBot" target="_blank" rel="external">whtsky/WeRoBot</a> 微信公众号开发框架，封装了和微信服务器的交互；</li>
<li><a href="https://werobot.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="external">WeRoBot Docs</a></li>
</ul>
<p>通过使用 WeRoBot，省去和微信服务器的交互工作，专注于公众号功能的实现，使用下来没发现什么特别的问题，而且使用简单，值得推荐；</p>
<p>WeRoBot 默认单线程运行，通过配置可多线程运行，本程序借助于 <a href="http://www.gevent.org/index.html" target="_blank" rel="external">gevent</a> 实现多线程，具体配置也非常简单，在主逻辑代码中加入下面的配置即可：<br><figure class="highlight python"><figcaption><span>main.py</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</div><div class="line">monkey.patch_all()</div><div class="line"></div><div class="line">robot = werobot.WeRoBot(...)</div><div class="line"></div><div class="line">robot.run(server=<span class="string">'gevent'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="References-3"><a href="#References-3" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://aiohttp.readthedocs.io/en/stable/" target="_blank" rel="external">aiohttp: Asynchronous HTTP Client/Server</a></li>
<li><a href="http://www.gevent.org/index.html" target="_blank" rel="external">gevent</a></li>
<li><a href="https://medium.freecodecamp.org/million-requests-per-second-with-python-95c137af319" target="_blank" rel="external">A million requests per second with Python</a></li>
<li><a href="http://www.vincentsfootprint.com/post/python-wsgi-performance-benchmark-test" target="_blank" rel="external">Python WSGI Server 性能分析</a></li>
<li><a href="https://github.com/whtsky/WeRoBot/issues/63" target="_blank" rel="external">运行hello word例子出错 #63</a></li>
</ul>
<h2 id="SQLAlchemy"><a href="#SQLAlchemy" class="headerlink" title="SQLAlchemy"></a>SQLAlchemy</h2><p>通过 <a href="http://www.sqlalchemy.org/" target="_blank" rel="external">SQLAlchemy</a> 访问 MySQL，支持 ORM，支持一定的连接管理，使用还挺简单，用到的版本如下：</p>
<ul>
<li>MySQl 5.7.19</li>
<li>SQLAlchemy-1.1.15</li>
</ul>
<p>需要安装下面的库：</p>
<ul>
<li><code>pip install SQLAlchemy</code></li>
<li><code>pip install pymysql</code></li>
<li><code>pip install sqlalchemy-repr</code></li>
</ul>
<h4 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h4><ul>
<li><a href="https://docs.sqlalchemy.org/en/latest/orm/session_basics.html" target="_blank" rel="external">Session Basics</a></li>
<li><a href="https://docs.sqlalchemy.org/en/latest/orm/contextual.html#unitofwork-contextual" target="_blank" rel="external">Contextual/Thread-local Sessions</a></li>
<li><a href="https://anyisalin.github.io/anyisalin.github.io/2017/03/07/python-context-manager/" target="_blank" rel="external">Python - 上下文管理</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/24709718" target="_blank" rel="external">Python进阶：With语句和上下文管理器ContextManager</a></li>
</ul>
<p>注意多线程下 Session 的管理，保证一个 Session 最多被一个线程使用，并且能及时的提交、回滚、释放，多线程下可通过下面的方式管理：</p>
<ul>
<li>借助于 Python 的上下文管理器（@contextmanager）实现；</li>
<li>自定义上下文，结合 scoped_session 实现；</li>
</ul>
<h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><ul>
<li><a href="http://pythoncentral.io/sqlalchemy-orm-examples/" target="_blank" rel="external">SQLAlchemy ORM Examples</a></li>
<li><a href="https://github.com/manicmaniac/sqlalchemy-repr" target="_blank" rel="external">manicmaniac/sqlalchemy-repr</a> <ul>
<li>Automatically generates pretty <code>repr</code> of a SQLAlchemy model.</li>
<li>格式化 ORM 对象 print 结果，还不错；</li>
</ul>
</li>
</ul>
<h4 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h4><p>刚上线的第二天就收到了异常邮件，提示错误：(pymysql.err.OperationalError) (2006, “MySQL server has gone away (BrokenPipeError(32, ‘Broken pipe’))”)，经查证是由于 MySQL 默认 8 小时断开连接的问题导致的，参考了下面的文章：</p>
<ul>
<li><a href="http://docs.sqlalchemy.org/en/latest/faq/connections.html#mysql-server-has-gone-away" target="_blank" rel="external">“MySQL Server has gone away”</a></li>
<li><a href="https://docs.sqlalchemy.org/en/latest/core/engines.html#engine-creation-api" target="_blank" rel="external">Engine Creation API</a></li>
<li><a href="http://www.wangjunbo.com/?p=34" target="_blank" rel="external">使用SQLAlchemy时遇到”#2006: MySQL server has gone away”</a></li>
</ul>
<p>解决办法：<br>对于当前的 1.1.15 版本，在 <code>create_engine</code> 时配置 <code>pool_recycle</code> 参数即可，确保每个连接的寿命不超过指定的数值；在未来的 1.2.x 版本可以通过 <code>pool_pre_ping</code> 参数配置；<br><code>create_engine(url, echo=False, pool_size=5, pool_recycle=3600)</code> </p>
<h4 id="SQLAlchemy-分表"><a href="#SQLAlchemy-分表" class="headerlink" title="SQLAlchemy 分表"></a>SQLAlchemy 分表</h4><p>本项目没有用到分表，分表在之前写一个测试工具时用到过，当时看过下面的文章，在此一并总结一下：</p>
<ul>
<li><a href="http://blog.ligulfzhou.com/2017/05/16/sqlalchemy-sharding-snippet/" target="_blank" rel="external">sqlalchemy分表实现</a> <strong>GOOD!!!</strong></li>
<li><a href="http://ju.outofmemory.cn/entry/61448" target="_blank" rel="external">flask-sqlalchemy分表解决方案</a></li>
<li><a href="https://jpanj.com/2017/SQLAlchemy-%E5%88%86%E8%A1%A8%E5%AE%9E%E8%B7%B5/" target="_blank" rel="external">SQLAlchemy 分表实践</a></li>
<li><a href="https://shangliuyan.github.io/2015/06/29/sqlchemy%E5%A6%82%E4%BD%95%E5%88%86%E8%A1%A8/" target="_blank" rel="external">sqlalchemy如何分表</a></li>
<li><a href="https://www.sdg32.com/sqlalchemy-connect-multiple-databases" target="_blank" rel="external">SQLAlchemy 连接同一服务器下的不同数据库</a></li>
</ul>
<h4 id="References-4"><a href="#References-4" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://www.sqlalchemy.org/download.html" target="_blank" rel="external">SQLAlchemy 下载 及 版本说明</a></li>
<li><a href="https://stackoverflow.com/questions/1918539/can-anyone-explain-pythons-relative-imports" target="_blank" rel="external">Can anyone explain python’s relative imports?</a></li>
<li><a href="https://stackoverflow.com/questions/8253978/sqlalchemy-get-object-not-bound-to-a-session" target="_blank" rel="external">SQLAlchemy, get object not bound to a Session</a></li>
</ul>
<h2 id="有限状态机"><a href="#有限状态机" class="headerlink" title="有限状态机"></a>有限状态机</h2><p>本项目采用有限状态机（FSM）实现用户对话状态的控制，具体交互流程如下：</p>
<ul>
<li>接收用户信息；</li>
<li>读取 Session 中的状态机信息，还原状态机；</li>
<li>根据用户输入驱动状态机进入下一个状态；</li>
<li>将当前的状态机信息存入 Session；</li>
<li>读取状态机当前的处理结果返回给用户；</li>
<li>依此循环上述流程；</li>
</ul>
<p>注：其中的 Session 为 WeRoBot 中的 Session。</p>
<p>本项目采用开源的 <a href="https://github.com/pytransitions/transitions" target="_blank" rel="external">pytransitions/transitions</a>。</p>
<h4 id="transitions"><a href="#transitions" class="headerlink" title="transitions"></a>transitions</h4><ul>
<li><a href="https://runnerliu.github.io/2017/05/26/transitionstranslate/" target="_blank" rel="external">Transitions-Python状态机库</a></li>
</ul>
<p>安装 transitions，安装后面两个库的原因是为了使用其中的 GraphMachine，将状态机以图片的形式输出；</p>
<ul>
<li><code>pip install transitions</code></li>
<li><code>brew install graphviz</code></li>
<li><code>pip install pygraphviz</code><ul>
<li>安装 pygraphviz 之前需要安装 <code>sudo apt-get install python-dev graphviz libgraphviz-dev pkg-config</code></li>
</ul>
</li>
</ul>
<p>几个主要概念：</p>
<ul>
<li>状态（State）</li>
<li>状态转移（Transition）</li>
<li>回调（Callback），用于在状态发生变化时通知业务逻辑，完成相应的处理<ul>
<li>可自定义回调参数，建议打开 <code>send_event</code> ，通过键值对的方式传递；</li>
</ul>
</li>
</ul>
<h4 id="回调顺序（Callbacks-Order）"><a href="#回调顺序（Callbacks-Order）" class="headerlink" title="回调顺序（Callbacks Order）"></a>回调顺序（Callbacks Order）</h4><p>下面代码层次结构展示了状态变化时，回调的触发顺序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&apos;machine.prepare_event&apos;</div><div class="line">    &apos;transition.prepare&apos;</div><div class="line">    &apos;transition.conditions&apos;</div><div class="line">    &apos;transition.unless&apos;</div><div class="line">    &apos;machine.before_state_change&apos;</div><div class="line">        &apos;transition.before&apos;</div><div class="line">            &apos;state.on_exit&apos;</div><div class="line">                &lt;STATE CHANGE&gt;</div><div class="line">            &apos;state.on_enter&apos;</div><div class="line">        &apos;transition.after&apos;</div><div class="line">    &apos;machine.after_state_change&apos;</div><div class="line">&apos;machine.finalize_event&apos;</div></pre></td></tr></table></figure>
<h4 id="References-5"><a href="#References-5" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://stackoverflow.com/questions/40528048/pip-install-pygraphviz-no-package-libcgraph-found" target="_blank" rel="external">pip install pygraphviz: No package ‘libcgraph’ found</a></li>
<li><a href="http://www.jianshu.com/p/a3da7ecc5303" target="_blank" rel="external">解决使用pygraphviz出现的ImportError</a></li>
</ul>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>本项目只在开始阶段搭建了测试框架，写了基本的测试 Demo，后续由于时间原因（懒），并未增加业务逻辑对应的测试用例…</p>
<p><a href="https://faker.readthedocs.io/en/master/index.html" target="_blank" rel="external">Faker</a> 是一个挺不错的库，可用于构造测试数据。</p>
<h4 id="References-6"><a href="#References-6" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://python.usyiyi.cn/translate/python_278/library/unittest.html" target="_blank" rel="external">unittest — 单元测试框架</a></li>
<li><a href="https://stackoverflow.com/questions/644821/python-how-to-run-unittest-main-for-all-source-files-in-a-subdirectory" target="_blank" rel="external">Python: How to run unittest.main() for all source files in a subdirectory?</a></li>
<li><a href="https://stackoverflow.com/questions/1732438/how-do-i-run-all-python-unit-tests-in-a-directory/1732477#1732477" target="_blank" rel="external">How do I run all Python unit tests in a directory?</a></li>
<li><a href="https://stackoverflow.com/questions/31556718/is-it-possible-to-run-all-unit-test" target="_blank" rel="external">Is it possible to run all unit test?</a></li>
<li><a href="https://stackoverflow.com/questions/1896918/running-unittest-with-typical-test-directory-structure" target="_blank" rel="external">Running unittest with typical test directory structure</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录功能开发过程，以用到的知识点或者功能点为章节总结。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="WeRoBot" scheme="http://tanchao90.com/tags/WeRoBot/"/>
    
      <category term="Python" scheme="http://tanchao90.com/tags/Python/"/>
    
      <category term="MySQL" scheme="http://tanchao90.com/tags/MySQL/"/>
    
      <category term="SQLAlchemy" scheme="http://tanchao90.com/tags/SQLAlchemy/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号后台开发</title>
    <link href="http://tanchao90.com/gzh/"/>
    <id>http://tanchao90.com/gzh/</id>
    <published>2017-11-18T00:00:00.000Z</published>
    <updated>2017-11-18T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/gzh/1.jpg" width="200" height="200" title="我们的育儿日记！">
<p>这是我第一次做微信公众号后台开发，期间花费了不少时间来学习，也踩了不少坑，本文及其系列文章对开发过程进行了梳理、归纳，对准备工作、编写代码、上线部署和运维的整个过程进行了总结，希望对要做公众号开发的朋友有所帮助。</p>
<a id="more"></a>
<p>“微信公众号后台开发”系列文章：</p>
<ul>
<li><a href="http://tanchao90.com/gzh/">微信公众号后台开发</a> 本文，概述开发过程</li>
<li><a href="http://tanchao90.com/gzh-logic/">微信公众号后台开发 —— 功能开发</a> 业务逻辑开发总结</li>
<li><a href="http://tanchao90.com/gzh-ecs/">微信公众号后台开发 —— 阿里云 ECS</a> 阿里云 ECS 服务器配置、管理</li>
<li><a href="http://tanchao90.com/gzh-mysql/">微信公众号后台开发 —— MySQL</a> 数据库配置、管理</li>
<li><a href="http://tanchao90.com/gzh-ops/">微信公众号后台开发 —— Nginx &amp; Supervisor</a> 线上运维，主要介绍 Nginx 和 Supervisor 的配置</li>
</ul>
<p>目录：</p>
<ul>
<li><a href="#程序运行环境">程序运行环境</a></li>
<li><a href="#开发目标">开发目标</a></li>
<li><a href="#准备工作">准备工作</a></li>
<li><a href="#编码">编码</a></li>
<li><a href="#部署">部署</a></li>
<li><a href="#运维">运维</a></li>
<li><a href="#References">References</a></li>
</ul>
<h2 id="程序运行环境"><a href="#程序运行环境" class="headerlink" title="程序运行环境"></a>程序运行环境</h2><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul>
<li>Mac</li>
<li>macOS Sierra 10.12.6</li>
<li>MySQL 5.7.19</li>
<li>Python 3.6.2</li>
</ul>
<h4 id="线上环境"><a href="#线上环境" class="headerlink" title="线上环境"></a>线上环境</h4><ul>
<li>阿里云 ECS 服务器 </li>
<li>Ubuntu 16.04.2 LTS</li>
<li>MySQL 5.7.19</li>
<li>Python 3.6.2</li>
</ul>
<h2 id="开发目标"><a href="#开发目标" class="headerlink" title="开发目标"></a>开发目标</h2><p>完成一个公众号后台程序，具备以下功能：</p>
<ul>
<li>具备日记本的基本功能；</li>
<li>数据库持久化数据；</li>
<li>暂时不考虑开发前端页面；</li>
<li>基于上一条，所以采用文字的交互方式；</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h4 id="技术方案"><a href="#技术方案" class="headerlink" title="技术方案"></a>技术方案</h4><ul>
<li>阿里云 ECS：用户群大、成熟、价格合理</li>
<li>MySQL 存储数据：稳定、可靠、熟悉</li>
<li>Python：熟悉、适合快速开发</li>
</ul>
<h4 id="用到的轮子"><a href="#用到的轮子" class="headerlink" title="用到的轮子"></a>用到的轮子</h4><p>本后台程序开发过程中主要依赖了下面几个开源库：</p>
<ul>
<li><a href="http://www.sqlalchemy.org/" target="_blank" rel="external">SQLAlchemy</a> 数据库 ORM(Object Relational Mapper)工具包，用于访问 MySQL；</li>
<li><a href="https://github.com/whtsky/WeRoBot" target="_blank" rel="external">whtsky/WeRoBot</a> 微信公众号开发框架，封装了和微信服务器的交互；</li>
<li><a href="https://github.com/pytransitions/transitions" target="_blank" rel="external">pytransitions/transitions</a> 有限状态机（Finite-state machine, FSM），用于和用户交互，简化交互流程；</li>
<li><a href="https://github.com/getlogbook/logbook" target="_blank" rel="external">getlogbook/logbook</a> 用于记录 log，功能强大，使用简单，支持发送异常邮件；</li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><p>主要用到下面的工具：</p>
<ul>
<li><a href="https://www.sublimetext.com/" target="_blank" rel="external">Sublime Text 3</a>：主力 Python IDE，试了一下最新的 VS Code 也很好用；</li>
<li><a href="https://bitbucket.org" target="_blank" rel="external">Bitbucket</a>：类似 Github，有免费的私有仓库，管理代码；</li>
<li><a href="https://ngrok.com/" target="_blank" rel="external">ngrok</a> 内网穿透，用于开发时调试代码<ul>
<li><a href="https://github.com/inconshreveable/ngrok" target="_blank" rel="external">ngrok github</a></li>
<li><a href="https://tsukkomi.org/post/use-ngrok-to-puch-the-nat" target="_blank" rel="external">内网穿透之ngrok</a></li>
</ul>
</li>
<li>其他内网穿透方式：<ul>
<li><a href="https://github.com/gwuhaolin/blog/issues/11" target="_blank" rel="external">调试利器-SSH隧道</a> 未实践；</li>
<li><a href="https://natapp.cn" target="_blank" rel="external">NATAPP.cn</a></li>
</ul>
</li>
<li><a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 管理线上进程；</li>
<li><a href="https://nginx.org/" target="_blank" rel="external">Nginx</a> 服务端反向代理，对外暴露服务；</li>
</ul>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>总体来说编码阶段是遇到问题最少的，主要完成了下面的工作：</p>
<ul>
<li>通过网上调研，最后决定基于 WeRoBot 开发，省去了和微信服务器的具体交互细节，节省大量时间；</li>
<li>为了处理和用户的交互，需要有一定的上下文逻辑，最终决定采用有限状态机（FSM）处理交互逻辑；</li>
<li>使用 SQLAlchemy 作为数据库访问层，支持 ORM，简化数据库交互代码；</li>
<li>基于 logbook 定制自己的 log 系统，完成日志的记录，并将 Error 级别的 log 以邮件的方式发送到我的邮箱；</li>
<li>定义配置文件，支持配置多种环境的配置，通过启动命令指定运行环境；</li>
<li>完成业务代码；</li>
<li>调试；<ul>
<li>微信公众号的调试只能线上调试；</li>
<li>通过 ngrok 将本地的服务暴露给微信服务器；</li>
<li>ngrok 使用非常简单，除过偶尔出现超时之外，完全可以满足调试需要；</li>
</ul>
</li>
</ul>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><h4 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h4><p>在阿里云 ECS 服务器完成下面工作：</p>
<ul>
<li>安装、配置 MySQL；</li>
<li>安装 Python 及其版本管理工具；</li>
<li>配置项目运行的 Python 环境，安装需要的库；</li>
<li>安装、配置 Nginx，方向代理，响应用户请求；</li>
<li>安装、配置 Supervisor，管理公众号后台、Nginx 等进程；</li>
</ul>
<h4 id="对外提供服务"><a href="#对外提供服务" class="headerlink" title="对外提供服务"></a>对外提供服务</h4><ul>
<li>修改阿里云 ECS 机器安全组配置，对外暴漏提供服务的端口号；</li>
<li>在没有域名 或者 域名未备案的情况下，可直接通过 Ip:Port 方式对外提供服务；</li>
<li>由于微信公众号后台要求 2017年 年底之前必须全部切换为 HTTPS 方式，所以需要支持 HTTPS；</li>
</ul>
<h4 id="支持-HTTPS"><a href="#支持-HTTPS" class="headerlink" title="支持 HTTPS"></a>支持 HTTPS</h4><p>准备参考耗子叔的文章 <a href="https://coolshell.cn/articles/18094.html" target="_blank" rel="external">如何免费的让网站启用HTTPS</a> 部署 HTTPS，目前正在处理中；</p>
<ul>
<li><a href="https://certbot.eff.org/#ubuntuxenial-nginx" target="_blank" rel="external">EFF’s Certbot</a></li>
<li><a href="https://letsencrypt.org/" target="_blank" rel="external">Let’s Encrypt</a></li>
</ul>
<p>要完成 HTTPS 需要准备下面两个工作：</p>
<ul>
<li>申请域名，可以直接在阿里云申请，也可以通过其他渠道申请，比如 GoDaddy；</li>
<li>给域名配置路由规则，路由到服务器；</li>
<li>完成域名备案，否则也是无法访问阿里云服务器的；<ul>
<li><code>工信部规定域名指向中国大陆境内服务器访问网站时必须备案</code>；</li>
<li>所以只有访问国内服务器需要，如果你的服务部署在美国亚马逊云上，那么是不需要的；</li>
<li>备案也可通过阿里云完成，具体参考：<a href="https://help.aliyun.com/knowledge_detail/36898.html" target="_blank" rel="external">网站访问与备案</a>；</li>
</ul>
</li>
</ul>
<h2 id="运维"><a href="#运维" class="headerlink" title="运维"></a>运维</h2><ul>
<li>借助于 Supervisor 监控、管理进程；</li>
<li>后台程序有详细的日志，通过 Supervisor 重定向输出，便于查找问题；</li>
<li>公众号后台出现异常时会邮件通知我，及时发现问题；</li>
<li>定期做数据库备份；</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://shanguangyu.com/articles/wechat-ECS/" target="_blank" rel="external">阿里云ECS搭建微信公众平台</a></li>
<li><a href="https://yq.aliyun.com/articles/64384?utm_source=debugrun&amp;utm_medium=referral" target="_blank" rel="external">【讨论】创业公司要自建机房？ 还是自建机房不靠谱？</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_593af2a70102wt4d.html" target="_blank" rel="external">我为什么自建机房？</a></li>
<li><a href="https://stackoverflow.com/questions/17846529/could-not-open-a-connection-to-your-authentication-agent" target="_blank" rel="external">Could not open a connection to your authentication agent</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/gzh/1.jpg&quot; width=&quot;200&quot; height=&quot;200&quot; title=&quot;我们的育儿日记！&quot;&gt;
&lt;p&gt;这是我第一次做微信公众号后台开发，期间花费了不少时间来学习，也踩了不少坑，本文及其系列文章对开发过程进行了梳理、归纳，对准备工作、编写代码、上线部署和运维的整个过程进行了总结，希望对要做公众号开发的朋友有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="编程" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="公众号" scheme="http://tanchao90.com/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="阿里云 ECS" scheme="http://tanchao90.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91-ECS/"/>
    
      <category term="Python" scheme="http://tanchao90.com/tags/Python/"/>
    
      <category term="MySQL" scheme="http://tanchao90.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Python 总结 —— Python 版本管理</title>
    <link href="http://tanchao90.com/python-env/"/>
    <id>http://tanchao90.com/python-env/</id>
    <published>2017-10-06T07:24:40.000Z</published>
    <updated>2017-10-06T07:24:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>如何在一个系统中维护多个版本的 Python？</p>
<ul>
<li>pyenv</li>
<li>virtualenv</li>
</ul>
<a id="more"></a>
<p>目录：</p>
<ul>
<li><a href="#Python-版本管理">Python 版本管理</a></li>
<li><a href="#pyenv">pyenv</a></li>
<li><a href="#pyenv-virtualenv">pyenv-virtualenv</a></li>
<li><a href="#pip">pip</a></li>
<li><a href="#References">References</a></li>
</ul>
<h2 id="Python-版本管理"><a href="#Python-版本管理" class="headerlink" title="Python-版本管理"></a>Python-版本管理</h2><p>在一个系统中维护多个版本的 Python。</p>
<h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul>
<li>A 项目使用 Python 2.7；B 项目使用 Python 3.5；</li>
<li>A、B 项目都使用 Python 2.7，但是使用的库不相同；</li>
<li>每个项目可保持独立的 Python 版本及其依赖库，保证 Python 环境独立、干净；</li>
</ul>
<h4 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h4><ul>
<li><a href="https://github.com/pypa/virtualenv" target="_blank" rel="external">virtualenv</a> ☆ ☆ ☆<ul>
<li>A tool for creating isolated ‘virtual’ python environments.</li>
</ul>
</li>
<li><a href="https://github.com/yyuu/pyenv" target="_blank" rel="external">pyenv</a> ☆ ☆ ☆ ☆ ☆  <ul>
<li>Simple Python Version Management.</li>
<li>pyenv lets you easily switch between multiple versions of Python.</li>
<li><a href="https://github.com/yyuu/pyenv/wiki/Common-build-problems" target="_blank" rel="external">Common build problems</a></li>
</ul>
</li>
<li><a href="https://github.com/yyuu/pyenv-virtualenv" target="_blank" rel="external">pyenv-virtualenv</a> ☆ ☆ ☆ ☆ ☆    <ul>
<li>pyenv-virtualenv is a pyenv plugin that provides features to manage virtualenvs and conda environments for Python on UNIX-like systems.</li>
</ul>
</li>
<li><a href="https://code.csdn.net/gsls200808/chinese-opensource-mirror-site/tree/master" target="_blank" rel="external">国内开源镜像站点汇总</a></li>
<li><a href="http://mirrors.sohu.com/python/" target="_blank" rel="external">搜狐镜像</a> 内含各个 Python 版本的压缩包</li>
</ul>
<h4 id="个人建议"><a href="#个人建议" class="headerlink" title="个人建议"></a>个人建议</h4><ul>
<li>每个独立的 Python 项目创建一个独立的 Python 环境；</li>
<li>使用 <code>pyenv</code> + <code>pyenv-virtualenv</code> 管理 Python 环境；</li>
</ul>
<h4 id="pyenv-和-pyenv-virtualenv-区别"><a href="#pyenv-和-pyenv-virtualenv-区别" class="headerlink" title="pyenv 和 pyenv-virtualenv 区别"></a>pyenv 和 pyenv-virtualenv 区别</h4><ul>
<li>pyenv-virtualenv 是 pyenv 的插件；</li>
<li>pyenv 安装 Python 时，每个 Python 版本只能安装一份，和官方版本一一对应，如 2.7.14；</li>
<li>pyenv-virtualenv 可以基于官方版本虚拟出任意数量的版本，更加灵活，如基于 2.7.14 虚拟出 <code>app-server-2.7.14</code>、<code>webapp-2.7.14</code> 等；</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><code>pyenv install version</code> 安装，version 为对应的 Python 版本号，如 2.7.9；</li>
<li><code>pyenv virtualenv 3.5.2 webapp-3.5.2</code> 以 3.5.2 版本创建虚拟环境；</li>
<li><code>pyenv uninstall version</code> 删除 version 版本的 Python；</li>
<li><code>pyenv commands</code> 列出所有命令；</li>
<li><code>pyenv versions</code> 查看 pyenv 当前可检测到的所有版本，处于激活状态的版本前以 * 标示；</li>
<li><code>pyenv local 2.7.9</code> 设置局部版本</li>
<li><code>pyenv which python</code> 查看当前 python 命令的路径；</li>
<li><code>pyenv which pip</code> 查看当前 pip 命令的路径；</li>
</ul>
<h2 id="pyenv"><a href="#pyenv" class="headerlink" title="pyenv"></a>pyenv</h2><p><a href="https://github.com/pyenv/pyenv" target="_blank" rel="external">pyenv 官方文档</a></p>
<h4 id="Ubuntu-安装"><a href="#Ubuntu-安装" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h4><ul>
<li><a href="https://github.com/pyenv/pyenv#installation" target="_blank" rel="external">Installation</a> 官方安装文档</li>
<li><code>git clone https://github.com/pyenv/pyenv.git ~/.pyenv</code> clone pyenv 代码到本地；</li>
<li><code>echo &#39;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#39; &gt;&gt; ~/.bashrc</code> 定义环境变量 <code>PYENV_ROOT</code></li>
<li><code>echo &#39;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#39; &gt;&gt; ~/.bashrc</code> 将 <code>PYENV_ROOT</code> 添加到 <code>$PATH</code> 路径中</li>
<li><code>echo -e &#39;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval &quot;$(pyenv init -)&quot;\nfi&#39; &gt;&gt; ~/.bashrc</code> 将 <code>pyenv init</code> 命令添加到 shell 中</li>
<li><code>exec &quot;$SHELL&quot;</code> 重启 shell，使配置生效</li>
</ul>
<p>上述 <code>echo</code> 的三步相当于直接修改 <code>~/.bashrc</code> 文件末尾添加下面的内容，后面的 pyenv-virtualenv 也类似：</p>
<figure class="highlight plain"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">export PYENV_ROOT=&quot;$HOME/.pyenv&quot;</div><div class="line">export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;</div><div class="line">if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then</div><div class="line">  eval &quot;$(pyenv init -)&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p><strong>注：</strong>其中 <code>~/.bashrc</code> 文件根据系统进行替换，例如：</p>
<ul>
<li>Zsh note: <code>~/.zshenv</code></li>
<li>Ubuntu and Fedora note: <code>~/.bashrc</code></li>
</ul>
<h4 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h4><ul>
<li>方法1：<ul>
<li><code>brew install pyenv</code></li>
<li>在 <code>~/.bashrc</code> 中添加上述代码片段</li>
</ul>
</li>
<li>方法2：同 Ubuntu 安装</li>
</ul>
<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><ul>
<li><a href="https://github.com/pyenv/pyenv#uninstalling-pyenv" target="_blank" rel="external">Uninstalling pyenv</a> 官方卸载文档</li>
</ul>
<h4 id="管理不同版本的-Python"><a href="#管理不同版本的-Python" class="headerlink" title="管理不同版本的 Python"></a>管理不同版本的 Python</h4><p><strong>注：</strong>使用 pyenv 安装命令之前还需要安装相关依赖库，详见 <a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems" target="_blank" rel="external">Common build problems</a>，Ubuntu/Debian 需要执行下面的命令：</p>
<p><code>sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \
libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \
xz-utils tk-dev</code></p>
<p>安装需要的 Python 版本，安装之后的 Python 在 <code>~/.pyenv/versions</code> 目录下：</p>
<ul>
<li><code>pyenv install version</code> 安装，version 为对应的 Python 版本号，如 2.7.9</li>
<li><code>pyenv uninstall version</code> 删除 version 版本的 Python</li>
</ul>
<p><strong>注：</strong>阿里云通过上面命令安装的时候，一直无法从官网下载到 Python 安装包，最后谷歌找到下面的办法，还算好使：</p>
<ul>
<li><code>cd ~/.pyenv/cache</code> 进入 pyenv 缓存目录，没有 cache 目录时创建一个</li>
<li><code>wget http://mirrors.sohu.com/python/3.6.2/Python-3.6.2.tar.xz</code> 手动从 <a href="http://mirrors.sohu.com/python/" target="_blank" rel="external">搜狐镜像</a> 下载一个 Python 安装包</li>
<li><code>pyenv install 3.6.2</code> 使用 pyenv 安装，因为缓存中已经有了安装包，因此无需再去官网下载</li>
</ul>
<h4 id="不同级别的版本控制"><a href="#不同级别的版本控制" class="headerlink" title="不同级别的版本控制"></a>不同级别的版本控制</h4><p>pyenv 版本控制分下面三个级别，优先级依此增大：</p>
<ul>
<li><code>global</code> 配置全局 Python 版本，配置内容在 <code>~/.pyenv/version</code> 文件中<ul>
<li><code>pyenv global 2.7.9</code> 设置全局版本，取消只能通过删除上述配置文件完成</li>
</ul>
</li>
<li><code>local</code> 设置局部 Python 版本，配置内容在当前目录的 <code>.python-version</code> 文件中<ul>
<li><code>pyenv local 2.7.9</code> 设置局部版本</li>
<li><code>pyenv local --unset</code> 取消局部版本设置</li>
</ul>
</li>
<li><code>shell</code> 设置当前 shell 中的 Python 版本，参数存储在当前 shell 的 <code>PYENV_VERSION</code> 环境变量中<ul>
<li><code>pyenv shell 2.7.9</code></li>
<li><code>pyenv shell --unset</code></li>
</ul>
</li>
</ul>
<h4 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><code>pyenv commands</code> 列出所有命令；</li>
<li><code>pyenv versions</code> 查看 pyenv 当前可检测到的所有版本，处于激活状态的版本前以 * 标示；</li>
<li><code>pyenv version</code> 查看当前处于激活状态的版本，括号中内容表示这个版本是由哪条途径激活的；</li>
<li><code>pyenv rehash</code> 为所有已安装的可执行文件（如：<code>~/.pyenv/versions/*/bin/*</code>）创建 shims，每当增删了 Python 版本或带有可执行文件的包（如 pip）以后，都应该执行一次本命令；</li>
<li><code>pyenv which python</code> 查看当前 python 命令的路径</li>
<li><code>pyenv which pip</code> 查看当前 pip 命令的路径</li>
</ul>
<h2 id="pyenv-virtualenv"><a href="#pyenv-virtualenv" class="headerlink" title="pyenv-virtualenv"></a>pyenv-virtualenv</h2><p><a href="https://github.com/pyenv/pyenv-virtualenv" target="_blank" rel="external">pyenv-virtualenv 官方文档</a></p>
<h4 id="Ubuntu-安装-1"><a href="#Ubuntu-安装-1" class="headerlink" title="Ubuntu 安装"></a>Ubuntu 安装</h4><ul>
<li><a href="https://github.com/pyenv/pyenv-virtualenv#installation" target="_blank" rel="external">Installation</a> 官方安装文档</li>
<li><code>git clone https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</code> clone 仓库到 pyenv 的插件目录；</li>
<li><code>echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &gt;&gt; ~/.bashrc</code> 添加 <code>pyenv virtualenv-init</code> 到 shell，自动激活插件；</li>
<li><code>exec &quot;$SHELL&quot;</code> 重启 shell，使配置生效；</li>
</ul>
<h4 id="Mac-安装-1"><a href="#Mac-安装-1" class="headerlink" title="Mac 安装"></a>Mac 安装</h4><ul>
<li>方法1：<ul>
<li><code>brew install pyenv-virtualenv</code></li>
<li><code>echo &#39;eval &quot;$(pyenv virtualenv-init -)&quot;&#39; &gt;&gt; ~/.bashrc</code></li>
</ul>
</li>
<li>方法2：同 Ubuntu 安装</li>
</ul>
<h4 id="创建虚拟-Python-版本"><a href="#创建虚拟-Python-版本" class="headerlink" title="创建虚拟 Python 版本"></a>创建虚拟 Python 版本</h4><p><code>pyenv virtualenv [version] &lt;virtualenv-name&gt;</code></p>
<ul>
<li><code>[version]</code> 源版本，可选</li>
<li><code>&lt;virtualenv-name&gt;</code> 虚拟环境名称</li>
</ul>
<p>示例：</p>
<ul>
<li><code>pyenv virtualenv 3.5.2 webapp-3.5.2</code> 以 3.5.2 版本创建虚拟环境</li>
<li><code>pyenv virtualenv webapp-2.7.9</code> 只有一个参数的时候，默认从当前 Python 版本创建虚拟环境</li>
</ul>
<p>创建好的虚拟环境也会存在于 <code>~/.pyenv/versions</code> 目录下，如 <code>webapp-3.5.2</code>，但这里只是一个软连接，文件实际存储在源版本根目录下的 <code>envs</code> 目录，如下所示：<br><code>webapp-3.5.2 -&gt; /home/h39/.pyenv/versions/3.5.2/envs/webapp-3.5.2</code></p>
<h4 id="常用命令-2"><a href="#常用命令-2" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li><code>pyenv virtualenvs</code> 列出所有的虚拟环境</li>
<li><code>pyenv uninstall webapp-2.7.9</code> 删除虚拟环境</li>
<li>设置 Python 版本同 <code>pyenv</code> 部分</li>
<li>正确设置 <code>virtualenvs</code> 的情况下，进入或者退出包含 <code>.python-version</code> 的目录时会自动激活/关闭虚拟环境</li>
<li>手动激活/关闭虚拟环境<ul>
<li><code>pyenv activate webapp-2.7.9</code></li>
<li><code>pyenv deactivate</code></li>
</ul>
</li>
</ul>
<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><p>pip 是一个 Python 包管理工具，主要是用于安装 PyPI 上的软件包。</p>
<ul>
<li>Github：<a href="https://github.com/pypa/pip" target="_blank" rel="external">pypa/pip</a></li>
<li>Docs：<a href="https://pip.pypa.io/en/stable/" target="_blank" rel="external">pip docs</a></li>
</ul>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><ul>
<li><code>pip install -U pip</code> or <code>pip install --upgrade pip</code> 更新 pip</li>
<li><code>pip install package_name</code> 安装 package_name 包</li>
<li><code>pip --default-timeout=100 install package_name</code> 设置超时时间，避免在网络很差的情况下每次安装都报超时错误</li>
<li><code>pip install package_name.whl</code> 安装本地的 <code>package_name.whl</code> 文件<ul>
<li><a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">.whl 文件下载</a></li>
</ul>
</li>
<li><code>pip install --upgrade package_name</code> 升级软件包</li>
<li><code>pip freeze --local | grep -v &#39;^\-e&#39; | cut -d = -f 1  | xargs pip install -U</code> 升级安装的所有软件包</li>
<li><code>pip uninstall package_name</code> 卸载 package_name 包</li>
<li><code>pip show --files package_name</code> 查看安装的具体文件</li>
<li><code>pip list --outdated</code> 查看过期的软件包（可升级的包）</li>
</ul>
<h4 id="批量管理"><a href="#批量管理" class="headerlink" title="批量管理"></a>批量管理</h4><ul>
<li><code>pip freeze &gt; requirements.txt</code> 导出当前环境依赖的软件包</li>
<li><code>pip install -r requirements.txt</code> 在当前环境重建 <code>requirements.txt</code> 中的软件包</li>
</ul>
<h4 id="macOS-pip-安装软件包失败"><a href="#macOS-pip-安装软件包失败" class="headerlink" title="macOS pip 安装软件包失败"></a>macOS pip 安装软件包失败</h4><p><strong>原因：</strong>macOS 引入了 SIP 管理机制，所以旧版本的 pip 创建的文件目录操作被拒绝，包括使用root也是如此。</p>
<p><strong>解决办法：</strong>添加 <code>--user</code> 选项安装到用户包目录</p>
<ul>
<li><code>pip install --user package_name</code></li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.v2ex.com/t/256328" target="_blank" rel="external">阿里云 pyenv 无法下载 python</a></li>
<li><a href="http://www.jianshu.com/p/a23448208d9a" target="_blank" rel="external">使用 pyenv 可以在一个系统中安装多个python版本</a></li>
<li><a href="https://unix.stackexchange.com/questions/291737/zipimport-zipimporterror-cant-decompress-data-zlib-not-available" target="_blank" rel="external">zipimport.ZipImportError: can’t decompress data; zlib not available</a><ul>
<li><code>sudo apt-get install zlib1g-dev</code></li>
</ul>
</li>
<li><a href="https://github.com/pyenv/pyenv/issues/25" target="_blank" rel="external">Build failed on Mac OS X 10.9 #25</a><ul>
<li><code>CFLAGS=&quot;-I$(xcrun --show-sdk-path)/usr/include&quot;</code></li>
</ul>
</li>
<li><a href="http://ask.xmodulo.com/install-pip-linux.html" target="_blank" rel="external">《How to install pip on Linux》</a></li>
<li><a href="https://stackoverflow.com/questions/27885397/how-do-i-install-a-python-package-with-a-whl-file" target="_blank" rel="external">How do I install a Python package with a .whl file?</a></li>
<li><a href="https://majing.io/questions/342" target="_blank" rel="external">pip升级更新所有的已安装Python软件包</a></li>
<li><a href="https://stackoverflow.com/questions/7465445/how-to-install-python-modules-without-root-access" target="_blank" rel="external">How to install python modules without root access?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如何在一个系统中维护多个版本的 Python？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pyenv&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://tanchao90.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://tanchao90.com/tags/Python/"/>
    
      <category term="pip" scheme="http://tanchao90.com/tags/pip/"/>
    
      <category term="版本管理" scheme="http://tanchao90.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="pyenv" scheme="http://tanchao90.com/tags/pyenv/"/>
    
      <category term="virtualenv" scheme="http://tanchao90.com/tags/virtualenv/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis 事务操作中缓存带来的坑</title>
    <link href="http://tanchao90.com/mybatis-cache-pit/"/>
    <id>http://tanchao90.com/mybatis-cache-pit/</id>
    <published>2017-08-25T13:41:02.000Z</published>
    <updated>2017-08-25T13:41:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>记一次 MyBatis 缓存踩坑过程，最后通过跟踪源码定位、解决问题。</p>
<a id="more"></a>
<h2 id="踩坑背景"><a href="#踩坑背景" class="headerlink" title="踩坑背景"></a>踩坑背景</h2><p>我们的项目使用 <a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="external">MyBatis</a> 作为数据库访问层，并且使用 <a href="https://code.google.com/archive/p/shardbatis/" target="_blank" rel="external">shardbatis</a> 进行分表，分表逻辑通过实现 <code>ShardStrategy</code> 接口中的 <code>getTargetTableName</code> 接口完成。踩坑是在下面的特定情况下发生的：</p>
<ul>
<li>假如有三个分表，分别是 <code>demo_0</code>、<code>demo_1</code>、<code>demo_2</code>，其中包含的满足后面查询条件的数据分别有3条、0条、1条；</li>
<li>通过 <a href="http://www.mybatis.org/generator/" target="_blank" rel="external">MyBatis Generator</a> 生成对应的文件，包括 <code>DemoMapper.xml</code>、<code>DemoMapper.java</code>、<code>Demo.Java</code>、<code>DemoExample.java</code>；</li>
<li>业务处理函数 <code>getDemoList</code> 被 <code>@Transactional</code> 注解，这是一个事务性操作，失败时数据库操作会回滚；</li>
<li><code>getDemoList</code> 函数需要用同样的查询条件查询多张分表，并汇总结果；</li>
<li>查询的 SQL 语句通过 DemoExample 类实例创建。</li>
</ul>
<h2 id="实际表现"><a href="#实际表现" class="headerlink" title="实际表现"></a>实际表现</h2><p>实际的查询结果与 <code>getDemoList</code> 函数查询分表的顺序有关，如下表格所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">数据表查询顺序</th>
<th style="text-align:center">查询总结果中的记录数</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">demo_0、demo_1、demo_2</td>
<td style="text-align:center">9</td>
</tr>
<tr>
<td style="text-align:center">demo_1、demo_0、demo_2</td>
<td style="text-align:center">0</td>
</tr>
<tr>
<td style="text-align:center">demo_2、demo_1、demo_0</td>
<td style="text-align:center">3</td>
</tr>
</tbody>
</table>
<p>通过实际的代码 debug 调试，发现 <code>getDemoList</code> 返回的结果是将一份数据重复了三次，并且都是每次查询时 <code>第一个访问的数据表</code> 中的数据。</p>
<h2 id="问题原因及其解决办法"><a href="#问题原因及其解决办法" class="headerlink" title="问题原因及其解决办法"></a>问题原因及其解决办法</h2><h4 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h4><p>通过跟踪代码和 Google，发现问题的原因如下：</p>
<ul>
<li>在使用 MyBatis 的项目中，被 <code>@Transactional</code> 注解的函数中，一个单独的 sqlSession 对象将会被创建和使用，所有数据库操作会共用这个 sqlSession，当事务完成时，这个 sqlSession 会以合适的方式提交或回滚；</li>
<li><code>select</code> 语句默认开启查询缓存，并且不清除缓存，所以使用同一个 sqlSession 多次用相同的条件查询数据库时，只有第一次真实访问数据库，后面的查询都直接读取缓存返回；</li>
</ul>
<p>虽然在项目中增加了分表逻辑，但是因为是采用相同的查询语句及其查询条件，所以在到达分表逻辑之前就已经命中缓存，提前返回，从而导致上面的错误。</p>
<h4 id="flushCache-和-useCache-属性"><a href="#flushCache-和-useCache-属性" class="headerlink" title="flushCache 和 useCache 属性"></a><code>flushCache</code> 和 <code>useCache</code> 属性</h4><p>MyBatis 的一级缓存（local cache），即本地缓存，作用域默认为 Session，所以当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空。其中 flush 可在每个 SQL 语句中配置，具体说明如下：</p>
<ul>
<li>当为 <code>select</code> 语句时<ul>
<li><code>flushCache</code> 默认为 false，表示任何时候语句被调用，都不会去清空本地缓存和二级缓存；</li>
<li><code>useCache</code> 默认为 true，表示会将本条语句的结果进行二级缓存；</li>
</ul>
</li>
<li>当为 <code>insert</code>、<code>update</code>、<code>delete</code> 语句时：<ul>
<li><code>flushCache</code> 默认为 true，表示任何时候语句被调用，都会导致本地缓存和二级缓存被清空；</li>
<li><code>useCache</code> 属性在该情况下没有。</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><figcaption><span>默认的 select</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"save"</span> <span class="attr">parameterType</span>=<span class="string">"XX"</span> <span class="attr">flushCache</span>=<span class="string">"false"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">    ……</div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>为了解决这个问题，需要在 <code>DemoMapper.xml</code> 中对应的 SQL 中添加 <code>flushCache=&quot;true&quot;</code> 属性，表示在每次查询前清空缓存，下面几个 sql 都需要添加，因为底层都是通过 select 实现：</p>
<ul>
<li><code>selectByExample</code></li>
<li><code>selectByExampleWithRowbounds</code></li>
<li><code>selectByPrimaryKey</code></li>
<li><code>countByExample</code></li>
</ul>
<p>注：Mapper.xml 文件的配置可参考 <a href="http://www.mybatis.org/mybatis-3/zh/sqlmap-xml.html" target="_blank" rel="external">Mapper XML 文件</a>。</p>
<h2 id="定位问题的过程"><a href="#定位问题的过程" class="headerlink" title="定位问题的过程"></a>定位问题的过程</h2><p>本文中用到的 MyBatis 版本是 <code>mybatis-3.3.0</code>：<code>mybatis-3.3.0-sources.jar</code>。</p>
<h4 id="查询本地缓存之前清除缓存"><a href="#查询本地缓存之前清除缓存" class="headerlink" title="查询本地缓存之前清除缓存"></a>查询本地缓存之前清除缓存</h4><figure class="highlight java"><figcaption><span>/org/apache/ibatis/executor/BaseExecutor.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">  ErrorContext.instance().resource(ms.getResource()).activity(<span class="string">"executing a query"</span>).object(ms.getId());</div><div class="line">  <span class="keyword">if</span> (closed) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 配置 flushCache="true" 之后，ms.isFlushCacheRequired() 函数返回 true，将会在这里清除本地缓存</span></div><div class="line">  <span class="keyword">if</span> (queryStack == <span class="number">0</span> &amp;&amp; ms.isFlushCacheRequired()) &#123;</div><div class="line">    clearLocalCache();</div><div class="line">  &#125;</div><div class="line">  List&lt;E&gt; list;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    queryStack++;</div><div class="line">    <span class="comment">// 在这里查询本地缓存，key 由查询语句生成</span></div><div class="line">    list = resultHandler == <span class="keyword">null</span> ? (List&lt;E&gt;) localCache.getObject(key) : <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">if</span> (list != <span class="keyword">null</span>) &#123;</div><div class="line">      handleLocallyCachedOutputParameters(ms, key, parameter, boundSql);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      list = queryFromDatabase(ms, parameter, rowBounds, resultHandler, key, boundSql);</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    queryStack--;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (queryStack == <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">for</span> (DeferredLoad deferredLoad : deferredLoads) &#123;</div><div class="line">      deferredLoad.load();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// issue #601</span></div><div class="line">    deferredLoads.clear();</div><div class="line">    <span class="keyword">if</span> (configuration.getLocalCacheScope() == LocalCacheScope.STATEMENT) &#123;</div><div class="line">      <span class="comment">// issue #482</span></div><div class="line">      clearLocalCache();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="缓存查询结果"><a href="#缓存查询结果" class="headerlink" title="缓存查询结果"></a>缓存查询结果</h4><figure class="highlight java"><figcaption><span>/org/apache/ibatis/executor/BaseExecutor.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">  List&lt;E&gt; list;</div><div class="line">  localCache.putObject(key, EXECUTION_PLACEHOLDER);</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    list = doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    localCache.removeObject(key);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 将查询结果添加到本地缓存</span></div><div class="line">  localCache.putObject(key, list);</div><div class="line">  <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</div><div class="line">    localOutputParameterCache.putObject(key, parameter);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> list;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="根据查询语句生成-cacheKey"><a href="#根据查询语句生成-cacheKey" class="headerlink" title="根据查询语句生成 cacheKey"></a>根据查询语句生成 cacheKey</h4><figure class="highlight java"><figcaption><span>/org/apache/ibatis/executor/BaseExecutor.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> CacheKey <span class="title">createCacheKey</span><span class="params">(MappedStatement ms, Object parameterObject, RowBounds rowBounds, BoundSql boundSql)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (closed) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"Executor was closed."</span>);</div><div class="line">  &#125;</div><div class="line">  CacheKey cacheKey = <span class="keyword">new</span> CacheKey();</div><div class="line">  cacheKey.update(ms.getId());</div><div class="line">  cacheKey.update(Integer.valueOf(rowBounds.getOffset()));</div><div class="line">  cacheKey.update(Integer.valueOf(rowBounds.getLimit()));</div><div class="line">  cacheKey.update(boundSql.getSql());</div><div class="line">  List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</div><div class="line">  TypeHandlerRegistry typeHandlerRegistry = ms.getConfiguration().getTypeHandlerRegistry();</div><div class="line">  <span class="comment">// mimic DefaultParameterHandler logic</span></div><div class="line">  <span class="comment">// 依此遍历查询参数，将每个参数对应的值拼接到 cacheKey 中</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</div><div class="line">    ParameterMapping parameterMapping = parameterMappings.get(i);</div><div class="line">    <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</div><div class="line">      Object value;</div><div class="line">      String propertyName = parameterMapping.getProperty();</div><div class="line">      <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</div><div class="line">        value = boundSql.getAdditionalParameter(propertyName);</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</div><div class="line">        value = <span class="keyword">null</span>;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</div><div class="line">        value = parameterObject;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        MetaObject metaObject = configuration.newMetaObject(parameterObject);</div><div class="line">        value = metaObject.getValue(propertyName);</div><div class="line">      &#125;</div><div class="line">      cacheKey.update(value);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> (configuration.getEnvironment() != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">// issue #176</span></div><div class="line">    cacheKey.update(configuration.getEnvironment().getId());</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> cacheKey;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>Example：</strong>如下，就是根据一个 select 语句生成 cacheKey：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">350854748:2813260859:com.demo.dao.mapper.DemoMapper.selectByExample:0:2147483647:select</div><div class="line">    id, uid, start_time, end_time, status, is_deleted</div><div class="line">    from demo</div><div class="line">    WHERE (  uid = ? and end_time &gt; ? and status = ? and is_deleted = ? ):2:Wed Aug 16 13:32:01 CST 2017:1:false:SqlSessionFactoryBean</div></pre></td></tr></table></figure></p>
<h4 id="Session-管理"><a href="#Session-管理" class="headerlink" title="Session 管理"></a>Session 管理</h4><figure class="highlight java"><figcaption><span>/org/mybatis/spring/SqlSessionTemplate.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * Proxy needed to route MyBatis method calls to the proper SqlSession got</div><div class="line">   * from Spring's Transaction Manager</div><div class="line">   * It also unwraps exceptions thrown by &#123;<span class="doctag">@code</span> Method#invoke(Object, Object...)&#125; to</div><div class="line">   * pass a &#123;<span class="doctag">@code</span> PersistenceException&#125; to the &#123;<span class="doctag">@code</span> PersistenceExceptionTranslator&#125;.</div><div class="line">   */</div><div class="line">  <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionInterceptor</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">      SqlSession sqlSession = getSqlSession(</div><div class="line">          SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory,</div><div class="line">          SqlSessionTemplate.<span class="keyword">this</span>.executorType,</div><div class="line">          SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator);</div><div class="line">      <span class="keyword">try</span> &#123;</div><div class="line">        Object result = method.invoke(sqlSession, args);</div><div class="line">        <span class="comment">// 对于非事务性 session，会直接调用 commit</span></div><div class="line">        <span class="keyword">if</span> (!isSqlSessionTransactional(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory)) &#123;</div><div class="line">          <span class="comment">// force commit even on non-dirty sessions because some databases require</span></div><div class="line">          <span class="comment">// a commit/rollback before calling close()</span></div><div class="line">          <span class="comment">// 在 commit 中，会清除本地缓存</span></div><div class="line">          sqlSession.commit(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">      &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">        Throwable unwrapped = unwrapThrowable(t);</div><div class="line">        <span class="keyword">if</span> (SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator != <span class="keyword">null</span> &amp;&amp; unwrapped <span class="keyword">instanceof</span> PersistenceException) &#123;</div><div class="line">          <span class="comment">// release the connection to avoid a deadlock if the translator is no loaded. See issue #22</span></div><div class="line">          closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</div><div class="line">          sqlSession = <span class="keyword">null</span>;</div><div class="line">          Throwable translated = SqlSessionTemplate.<span class="keyword">this</span>.exceptionTranslator.translateExceptionIfPossible((PersistenceException) unwrapped);</div><div class="line">          <span class="keyword">if</span> (translated != <span class="keyword">null</span>) &#123;</div><div class="line">            unwrapped = translated;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">throw</span> unwrapped;</div><div class="line">      &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (sqlSession != <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">// 对于事务性 session，closeSqlSession 时只会 holder.released()</span></div><div class="line">          closeSqlSession(sqlSession, SqlSessionTemplate.<span class="keyword">this</span>.sqlSessionFactory);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="flushCache-所在的-Java-对象"><a href="#flushCache-所在的-Java-对象" class="headerlink" title="flushCache 所在的 Java 对象"></a>flushCache 所在的 Java 对象</h4><figure class="highlight java"><figcaption><span>/org/apache/ibatis/mapping/MappedStatement.java</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MappedStatement</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flushCacheRequired;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://blog.csdn.net/ssssny/article/details/52248960" target="_blank" rel="external">MyBatis 的 flushCache 和 useCache 的使用</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记一次 MyBatis 缓存踩坑过程，最后通过跟踪源码定位、解决问题。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://tanchao90.com/categories/Java/"/>
    
    
      <category term="MySQL" scheme="http://tanchao90.com/tags/MySQL/"/>
    
      <category term="Java" scheme="http://tanchao90.com/tags/Java/"/>
    
      <category term="Mybatis" scheme="http://tanchao90.com/tags/Mybatis/"/>
    
      <category term="Cache" scheme="http://tanchao90.com/tags/Cache/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis</title>
    <link href="http://tanchao90.com/mybatis/"/>
    <id>http://tanchao90.com/mybatis/</id>
    <published>2017-08-19T05:32:08.000Z</published>
    <updated>2017-08-19T05:32:08.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/mybatis/1.png" title="MyBatis">
<a id="more"></a>
<p>目前的工作是 Java 服务端开发，用到的技术有 <a href="https://spring.io/" target="_blank" rel="external">Spring</a>、<a href="https://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring Boot</a>、<a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="external">MyBatis</a>、<a href="https://redis.io/" target="_blank" rel="external">Redis</a>、<a href="https://www.mysql.com/" target="_blank" rel="external">MySQL</a> 等；近期通过两个项目的实践，对 MyBatis 进行了系统性的学习和踩坑，在此对其做一个简单的总结和回顾。</p>
<h2 id="学习-MyBatis"><a href="#学习-MyBatis" class="headerlink" title="学习 MyBatis"></a>学习 MyBatis</h2><p><a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="external">MyBatis 官方文档</a> 比较清晰明了，而且有英文、中文等多个语言版本，是非常好的学习资料，建议先通读一遍官方文档；</p>
<p>总的来说，通过以下几个方面就可以熟悉 MyBatis：</p>
<ul>
<li>通读官方文档，理解 MyBatis 的概念及其用法；</li>
<li>项目实践，遇到问题 Google；</li>
<li>对于遇到的问题，搜索相关博客，进行系统性的学习，争取理解其来龙去脉；</li>
<li>代码 debug，逐步跟踪源码，熟悉 MyBatis 的处理流程，从代码层面分析问题；</li>
</ul>
<p>后文将通过几个主题谈谈我对 MyBatis 的理解。</p>
<p><strong>注：</strong>还有一个项目 <a href="http://mp.baomidou.com/" target="_blank" rel="external">Mybatis-Plus</a>，是对 MyBatis 的增强，可以参考一下。</p>
<h2 id="什么是-MyBatis-？"><a href="#什么是-MyBatis-？" class="headerlink" title="什么是 MyBatis ？"></a>什么是 MyBatis ？</h2><blockquote><p>MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。</p>
<footer><strong>MyBatis</strong><cite><a href="http://www.mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="external">MyBatis 简介</a></cite></footer></blockquote>
<p><a href="http://www.jianshu.com/p/ec40a82cae28" target="_blank" rel="external">终结篇：MyBatis原理深入解析（一）</a> 详细讲解了 JDBC 到 Mybaits 的演变，非常清晰的展示了 MyBatis 的功能及用法。</p>
<p>此外，个人觉得 <a href="https://book.douban.com/subject/25953851/" target="_blank" rel="external">深入分析 Java Web 技术内幕</a> 一书中 【第 15 章 深入分析 iBatis 框架之系统架构与映射原理】讲的也比较明白，将 MyBatis 的功能总结为如下两点：</p>
<ul>
<li>根据 JDBC 规范建立与数据库的连接；</li>
<li>通过反射打通 Java 对象与数据库参数交互之间相互转换的关系；</li>
</ul>
<p>书中下面两幅图中的内容清晰直观的描述了 MyBatis 功能、配置文件和代码的关系：</p>
<img src="/images/mybatis/2.jpeg" title="MyBatis">
<img src="/images/mybatis/3.jpeg" title="MyBatis">
<h2 id="作用域（Scope）和生命周期"><a href="#作用域（Scope）和生命周期" class="headerlink" title="作用域（Scope）和生命周期"></a>作用域（Scope）和生命周期</h2><p>作用域和生命周期在程序中非常重要，好在 MyBatis 已经帮我们处理好了这些问题，具体可查看 <a href="http://www.mybatis.org/mybatis-3/zh/getting-started.html" target="_blank" rel="external">作用域（Scope）和生命周期</a>。</p>
<blockquote><p>依赖注入框架可以创建线程安全的、<strong>基于事务的 SqlSession</strong> 和映射器（mapper）并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。</p>
<footer><strong>MyBatis</strong></footer></blockquote>
<p>其中涉及到下面几个类，对 MyBatis 的环境配置，主要是对这几个类的配置，比如配置 DataSource、TransactionManager、SqlSessionFactoryBean 等。</p>
<ul>
<li><code>SqlSessionFactoryBuilder</code> 这个类可以被实例化、使用和丢弃，一旦创建了 SqlSessionFactory，就不再需要它了。因此 SqlSessionFactoryBuilder 实例的最佳作用域是方法作用域（也就是局部方法变量）。</li>
<li><code>SqlSessionFactory</code> SqlSessionFactory 一旦被创建就应该在应用的运行期间一直存在，没有任何理由对它进行清除或重建。SqlSessionFactory 的最佳作用域是应用作用域。</li>
<li><code>SqlSession</code> 每个线程都应该有它自己的 SqlSession 实例。SqlSession 的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是请求或方法作用域。绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。也绝不能将 SqlSession 实例的引用放在任何类型的管理作用域中，比如 Servlet 架构中的 HttpSession。</li>
</ul>
<h2 id="Mapper-配置"><a href="#Mapper-配置" class="headerlink" title="Mapper 配置"></a>Mapper 配置</h2><p>MyBatis 目前支持两种方式的配置，分别是：</p>
<ul>
<li>Java 注解：只有 Java 文件，简单清晰，但是不够灵活，可用于处理一些简单的 SQL；</li>
<li>XML 配置：需要增加 XML 文件，但是功能强大，借助于 MyBatis 的 <code>动态 SQL</code> 可以完成各种复杂的 SQL 语句；</li>
</ul>
<p><strong>注：</strong> 在 XML 配置中，MyBatis 可通过配置 <code>databaseIdProvider</code> 支持不同的数据库，针对它们各自的语法，同一条语句可以有不同的版本，MyBatis 通过 SQL 映射语句中 databaseId 字段选择合适的语句，从而对于逻辑层屏蔽数据库差异。</p>
<p>目前常见的做法是采用 XML 方式配置，特殊情况下借助于 Java 注解完成；</p>
<p>对于 XML 配置的方式，可以采用 <a href="http://www.mybatis.org/generator/" target="_blank" rel="external">MyBatis Generator</a> 工具一键生成对应的配置文件，比如对于数据库 <code>demo</code>，通过配置可生成下面的四个文件：</p>
<ul>
<li><code>DemoMapper.xml</code> 包含 <code>&lt;mapper&gt;</code>、<code>&lt;sql&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;update&gt;</code> 等数据库语句的具体配置；</li>
<li><code>DemoMapper.java</code> 是一个接口，定义了一些数据库操作，和 <code>DemoMapper.xml</code> 中的 sql 语句对应；</li>
<li><code>Demo.Java</code> 是 PO（Persistent Object）持久层对象，和数据库表中的字段一一对应；</li>
<li><code>DemoExample.java</code> 拥有构造操作数据库的条件，在 Java 代码中组合出任何查询条件，本质是借助 MyBatis 的 <code>动态 SQL</code>，它可以根据参数值生成不同的 sql；</li>
</ul>
<p><strong>注：</strong>修改 <code>generatorConfig.xml</code> 后重新生成上述四个文件时，需要先删除对应的 <code>*Mapper.xml</code> 文件，否则新生成的 XML 会追加到旧文件后面，出现错误。 </p>
<p>在我们的项目中，由于用到了 <a href="https://code.google.com/archive/p/shardbatis/" target="_blank" rel="external">shardbatis</a> 分表，所以需要对 <code>DemoExample.java</code>、<code>DemoMapper.java</code> 做一些修改，采用 XML 配置、Java 注解配置共存的方式，也踩了一些坑，总结如下：</p>
<ul>
<li>注解和 XML 配置不要混用；</li>
<li>推荐使用 XML 配置，灵活强大；</li>
<li>使用 XML 配置的情况下，部分注解会失效；如 SELECT 语句配置在 XML 中时，@Options() 注解该 SELECT 对应的接口函数会失效，MyBatis 按照 XML 中的语句配置工作；</li>
<li>部分情况下可搭配注解和 XML 一起使用；如 @Select() 情况下，可用 @ResultMap() 和 Mapper.xml 搭配处理返回结果，进行列名转换等；</li>
<li>在被 @Transactional 注解的函数中，所有数据库操作会共用一个 sqlSession；</li>
<li>SELECT 语句默认开启查询缓存，所以在相同的 sqlSession 中（比如在 @Transactional 注解的函数中），多次用相同的条件查询数据库时，后面的查询会直接读取缓存返回；</li>
</ul>
<h2 id="插件（plugins）"><a href="#插件（plugins）" class="headerlink" title="插件（plugins）"></a>插件（plugins）</h2><blockquote><p>MyBatis 允许你在已映射语句执行过程中的某一点进行拦截调用。</p>
<footer><strong>MyBatis</strong><cite><a href="http://www.mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="external">插件（plugins）</a></cite></footer></blockquote>
<p>其实就是说可以为 MyBatis 增加各种插件，扩展 MyBatis 的功能，比如在我们的项目中就用到了下面两个插件：</p>
<ul>
<li><a href="https://code.google.com/archive/p/shardbatis/" target="_blank" rel="external">shardbatis</a> 分表插件；</li>
<li><code>PageInterceptor</code> 这是一个自定义的分页插件，通过拦截 <code>StatementHandler</code> 的 <code>prepare</code> 方法，重写sql语句实现物理分页。<ul>
<li>增加这个插件是因为 MyBatis 默认的分页是逻辑分页，非常低效，是将所有的结果查询出来之后，再来截取指定页面的结果。</li>
<li><a href="https://github.com/pagehelper/Mybatis-PageHelper" target="_blank" rel="external">Mybatis-PageHelper</a> 这是在网上看到的一个分页插件，我没实践过。</li>
</ul>
</li>
</ul>
<p><strong>注：</strong>各个插件在一起可能会出现冲突，需要根据具体问题查看代码来解决。</p>
<h2 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h2><p>MyBatis 支持两级缓存，默认情况只开启一级缓存（sqlSession 缓存，不同 sqlSession 互不干扰），二级缓存需要配置才能启用，具体可看文章 <a href="http://blog.csdn.net/luanlouis/article/details/41408341" target="_blank" rel="external">《深入理解mybatis原理》 MyBatis的二级缓存的设计原理</a>。</p>
<p>在实际的项目中一般不会启用 MyBatis 的二级缓存，往往在业务逻辑层使用 Redis、<a href="https://github.com/Qihoo360/pika" target="_blank" rel="external">Qihoo360/pika</a> 等内存数据库做缓存，这样会更加灵活和可控，程序相应的可靠性、扩展性也会提高。</p>
<p>在项目过程中，由于不熟悉一级缓存，踩了一个坑，具体见另一篇博客 <a href="http://tanchao90.com/mybatis-cache-pit/">MyBatis 事务操作中缓存带来的坑</a>。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://alwayswithme.github.io/jekyll/update/2015/07/16/mybatis-trap.html" target="_blank" rel="external">MyBatis 的坑</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25010714" target="_blank" rel="external">Spring Boot 系列(六)：如何优雅的使用 mybatis - 知乎专栏</a> </li>
<li><a href="http://www.jianshu.com/p/03642b807688" target="_blank" rel="external">增强 MyBatis 注解 - 简书</a> </li>
<li><a href="http://openwares.net/database/mybatis_parametertype.html" target="_blank" rel="external">MyBatis 传入参数与 parameterType – OpenWares | Open Source and Free Matters</a> </li>
<li><a href="https://github.com/Vence/personalKnowledge/wiki/%E5%85%B3%E4%BA%8EMybatis%E5%8A%A8%E6%80%81%E8%B5%8B%E5%80%BC%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="external">关于 Mybatis 动态赋值的三种方式</a></li>
<li><a href="https://stackoverflow.com/questions/20708775/why-does-this-where-clause-work-in-my-mybatis-mapper-spring3-application" target="_blank" rel="external">Why does this WHERE clause work in my MyBatis mapper + Spring3 application?</a></li>
<li><a href="https://my.oschina.net/zudajun/blog/671446" target="_blank" rel="external">Mybatis3.3.x 技术内幕（十三）：Mybatis之RowBounds分页原理 - 祖大俊的个人页面</a> </li>
<li><a href="http://www.songjie.info/mybatis%E5%AD%A6%E4%B9%A0-databaseidprovider%E5%92%8Cdatabaseid/" target="_blank" rel="external">【原创】MyBatis 学习——databaseIdProvider 和 databaseId – 宋杰的站点</a> </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/mybatis/1.png&quot; title=&quot;MyBatis&quot;&gt;
    
    </summary>
    
      <category term="Java" scheme="http://tanchao90.com/categories/Java/"/>
    
    
      <category term="MySQL" scheme="http://tanchao90.com/tags/MySQL/"/>
    
      <category term="Java" scheme="http://tanchao90.com/tags/Java/"/>
    
      <category term="Mybatis" scheme="http://tanchao90.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>2016</title>
    <link href="http://tanchao90.com/annual-summary-2016/"/>
    <id>http://tanchao90.com/annual-summary-2016/</id>
    <published>2017-07-15T09:00:00.000Z</published>
    <updated>2017-07-15T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一篇迟到半年的博客，从年终总结变成了年中总结。</p>
<p>上一篇（也是第一篇）总结是去年四月写的 <a href="http://tanchao90.com/hello-world/">Hello World</a>。</p>
<a id="more"></a>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><h4 id="格罗亚传奇"><a href="#格罗亚传奇" class="headerlink" title="格罗亚传奇"></a>格罗亚传奇</h4><p>从 15 年 11 月到今年 6 月份，一直在参与开发 <a href="http://glory.163.com/" target="_blank" rel="external">格罗亚传奇</a>，基本算是完整的参与了整个项目的全部流程，只差正式上线；因为该项目原计划去年 10 月份上线，在那之前已经进行过线上渠道测试，但由于一些其他原因，到今年 6 月份还没上线，有点遗憾…</p>
<p>我的开发工作从服务端到客户端，涉及的功能杂七杂八一大堆，其中最有趣的还是仇恨系统，它是整个战斗的基础，规则有趣且复杂；中间对这个模块的实现做过一次大的迭代，自从迭代之后，系统稳定性有了质的变化，从中也更深刻理解了原子操作、一致性等设计的原则和思想，收获蛮大的。</p>
<h4 id="网易游戏的日子"><a href="#网易游戏的日子" class="headerlink" title="网易游戏的日子"></a>网易游戏的日子</h4><p>从 2015.4 到 2017.6 刚好在网易工作两年，期间大概经历了三个阶段，分别是新人入职培训和两个游戏项目的研发，这两个项目分别是 <a href="http://cb.163.com/" target="_blank" rel="external">时空之刃</a> 和 <a href="http://glory.163.com/" target="_blank" rel="external">格罗亚传奇</a>，我个人还是很喜欢时空之刃的，游戏中格斗的感觉非常棒。</p>
<p>在网易这两年工作还是蛮爽的，每天都能睡到八点半再起床，然后骑车去公司吃完早餐开始一天的工作；周末再去公司打一下午篮球，周日看看书、打打游戏、上上网、聚个餐，生活还不错。</p>
<p>离开主要还是基于个人发展考虑，项目看起来比较迷茫和渺茫，个人成长也很有限，而且几个熟悉的小伙伴都陆续离开了，所以换个产品、换个方向、换个生活节奏也许更好。</p>
<img src="/images/annual-summary-2016/1.png" title="网易的最后一天">
<p>放下 <code>蟒蛇</code>，喝杯 <code>咖啡</code>，继续前行。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h4 id="Get-Married"><a href="#Get-Married" class="headerlink" title="Get Married"></a>Get Married</h4><p>2016 生活依旧，却又意义重大，因为完成了个人终身大事，在年底的时候和老婆结婚了，从此不再是 <code>一人吃饱，全家不饿</code>，所有的事情都多了一些意义，也多了一些责任，珍惜、努力。</p>
<h4 id="游玩"><a href="#游玩" class="headerlink" title="游玩"></a>游玩</h4><p>过去两年也就出去游玩了四次，分别是云南（昆明-&gt;大理-&gt;丽江-&gt;香格里拉）、黄山千岛湖、上海 NBA 中国赛、香港，有一些简单的感受。</p>
<p>去云南是和舍友的毕业旅行，15 年 4 月 去的，那时候的昆明已经非常热，穿个半袖就可以；大理感觉人没那么多，洱海边很多地方都是原生的农村，挺不错的，古城印象中没啥意思，比较单调，基本全是商业；丽江挺不错的，虽然古城商业化更严重，但是感觉更精致和丰富一点；古城里有条街都是酒吧，夜晚里面灯红酒绿，人山人海，古城的大街上不断的唱着 <a href="https://music.163.com/#/song?id=274859" target="_blank" rel="external">一瞬间</a>，卖着鲜花饼；古城外又是另一番风景，玉龙雪山值得一去，第一次上雪山的感觉、缺氧的感觉都很爽；在香格里拉主要是参观了藏民家里，感受了一些藏族的文化，去了普达措国家公园，遗憾的是那时候花儿还没开，草也没绿，风景不是时候。</p>
<p>黄山千岛湖之行是和汪司机一起去的，一场说走就走的旅行，非常完美；详见 <a href="http://tanchao90.com/g20-huangshan/">G20 黄山、千岛湖四日游</a>。</p>
<p>上海 NBA 中国赛应该不算一次旅行，仅仅是来上海看了一场比赛，纯粹是为了感受 NBA 现场的感觉，希望以后能去美帝体验一下；详见 <a href="http://tanchao90.com/2016-nba-china-game-shanghai/">2016 NBA 中国赛——火箭VS鹈鹕 上海站</a>。</p>
<p>去香港是和老婆一起去的，主要是去买点结婚用品，所以玩的比较少，但在维多利亚港看跨年烟花的经历还是非常美好的；详见 <a href="http://tanchao90.com/2017-hong-kong/">2017 元旦香港行</a>。</p>
<p>虽然去的地方不多，但还是有一些不一样的感受，很多体验和书本上、媒体上看到的完全不一样，比如对香港的认识，之前也许很美好，但去过之后可能就会有变化；去过黄山的西海大峡谷之后就会觉得山可以这么险峻和漂亮，原来一些风景照是真的不用 PS 的；去过云南之后就会觉得生活还是可以很自在和悠闲的，工作日翠湖公园跳舞唱歌的景象别有一番意思。所以希望以后能更多的出去走走看看，接点地气。</p>
<h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><h4 id="本博客"><a href="#本博客" class="headerlink" title="本博客"></a>本博客</h4><p>2016 年一整年在这里写了 8 篇博客，平均一个月不到一篇，多数是记录生活，希望以后能多写几篇，增加一点技术文章的比例。</p>
<h4 id="字里行间"><a href="#字里行间" class="headerlink" title="字里行间"></a>字里行间</h4><p>这一年还在 <a href="https://zl-hj.com" target="_blank" rel="external">字里行间</a> 写过两个小短文，一个蛮不错的写错平台，有漂亮的模板。</p>
<ul>
<li><a href="https://zl-hj.com/w/a/578fa9df0cf2ad5fa3de4267" target="_blank" rel="external">我的第一个Kindle</a></li>
<li><a href="https://zl-hj.com/w/a/5774ee230cf29338e7e9b2ac" target="_blank" rel="external">生日</a></li>
</ul>
<h4 id="马蜂窝"><a href="#马蜂窝" class="headerlink" title="马蜂窝"></a>马蜂窝</h4><p>把自己的两篇游记发到了马蜂窝上面：</p>
<ul>
<li><a href="http://www.mafengwo.cn/i/6677744.html" target="_blank" rel="external">G20 黄山、千岛湖四日游</a></li>
<li><a href="http://www.mafengwo.cn/i/6713675.html" target="_blank" rel="external">2017元旦 香港行</a></li>
</ul>
<h2 id="书"><a href="#书" class="headerlink" title="书"></a>书</h2><p>这一节主要列一些自己以前读过的好书，尤其2016读了好多书，包括《三体》、《明朝那些事》这样的长篇巨著。</p>
<h4 id="编程"><a href="#编程" class="headerlink" title="编程"></a>编程</h4><ul>
<li><a href="https://book.douban.com/subject/25900156/" target="_blank" rel="external">Redis设计与实现</a></li>
<li><a href="https://book.douban.com/subject/25662138/" target="_blank" rel="external">NoSQL精粹</a></li>
<li><a href="https://book.douban.com/subject/4262627/" target="_blank" rel="external">重构-改善既有代码的设计</a></li>
<li><a href="https://book.douban.com/subject/23008813/" target="_blank" rel="external">高性能MySQL</a></li>
<li><a href="https://book.douban.com/subject/26709315/" target="_blank" rel="external">Effective Python : 编写高质量Python代码的59个有效方法</a></li>
</ul>
<h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><ul>
<li><a href="https://book.douban.com/subject/26754615/" target="_blank" rel="external">极简人类史</a></li>
<li><a href="https://book.douban.com/subject/1873231/" target="_blank" rel="external">明朝那些事儿</a></li>
</ul>
<h4 id="人文、科技"><a href="#人文、科技" class="headerlink" title="人文、科技"></a>人文、科技</h4><ul>
<li><a href="https://book.douban.com/subject/26297606/" target="_blank" rel="external">从0到1</a></li>
<li><a href="https://book.douban.com/subject/10785583/" target="_blank" rel="external">思考，快与慢</a></li>
<li><a href="https://book.douban.com/subject/26759508/" target="_blank" rel="external">硅谷钢铁侠</a></li>
<li><a href="https://book.douban.com/subject/26838557/" target="_blank" rel="external">智能时代</a></li>
<li><a href="https://book.douban.com/subject/20492550/" target="_blank" rel="external">清醒思考的艺术</a></li>
</ul>
<h4 id="小说"><a href="#小说" class="headerlink" title="小说"></a>小说</h4><ul>
<li><a href="https://book.douban.com/subject/26278687/" target="_blank" rel="external">皮囊</a></li>
<li><a href="https://book.douban.com/subject/26340138/" target="_blank" rel="external">岛上书店</a></li>
<li><a href="https://book.douban.com/subject/26356948/" target="_blank" rel="external">摆渡人</a></li>
<li><a href="https://book.douban.com/subject/24934182/" target="_blank" rel="external">一个人的朝圣</a></li>
<li><a href="https://book.douban.com/subject/6973970/" target="_blank" rel="external">人间失格</a></li>
<li><a href="https://book.douban.com/subject/2567698/" target="_blank" rel="external">三体</a></li>
</ul>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul>
<li><a href="https://book.douban.com/subject/26865865/" target="_blank" rel="external">深泽直人</a></li>
<li><a href="https://book.douban.com/subject/26592648/" target="_blank" rel="external">癌症·真相：医生也在读</a></li>
<li><a href="https://book.douban.com/subject/26915935/" target="_blank" rel="external">永远20 : 我们的NBA</a></li>
</ul>
<h2 id="娱乐"><a href="#娱乐" class="headerlink" title="娱乐"></a>娱乐</h2><h4 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h4><ul>
<li><a href="https://movie.douban.com/subject/6873143/" target="_blank" rel="external">一条狗的使命</a></li>
<li><a href="https://movie.douban.com/subject/1292064/" target="_blank" rel="external">楚门的世界</a></li>
<li><a href="https://movie.douban.com/subject/1295865/" target="_blank" rel="external">燃情岁月</a></li>
<li><a href="https://movie.douban.com/subject/26393561/" target="_blank" rel="external">小萝莉的猴神大叔</a></li>
<li><a href="https://movie.douban.com/subject/25986180/" target="_blank" rel="external">釜山行</a></li>
<li><a href="https://movie.douban.com/subject/1292849/" target="_blank" rel="external">拯救大兵瑞恩</a></li>
<li><a href="https://movie.douban.com/subject/26325320/" target="_blank" rel="external">血战钢锯岭</a></li>
<li><a href="https://movie.douban.com/subject/1292001/" target="_blank" rel="external">海上钢琴师</a></li>
<li><a href="https://movie.douban.com/subject/1291549/" target="_blank" rel="external">放牛班的春天</a></li>
<li><a href="https://movie.douban.com/subject/5262027/" target="_blank" rel="external">此间的少年</a></li>
<li><a href="https://movie.douban.com/subject/25964071/" target="_blank" rel="external">夏洛特烦恼</a></li>
<li><a href="https://movie.douban.com/subject/26387939/" target="_blank" rel="external">摔跤吧！爸爸 Dangal</a></li>
</ul>
<h4 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h4><ul>
<li><a href="https://movie.douban.com/subject/24736278/" target="_blank" rel="external">河西走廊</a></li>
<li><a href="https://movie.douban.com/subject/20502514/" target="_blank" rel="external">舌尖上的中国</a></li>
</ul>
<h4 id="电视剧"><a href="#电视剧" class="headerlink" title="电视剧"></a>电视剧</h4><ul>
<li><a href="https://movie.douban.com/subject/3754940/" target="_blank" rel="external">斯巴达克斯：血与沙</a></li>
<li><a href="https://movie.douban.com/subject/10491666/" target="_blank" rel="external">胜者即是正义</a></li>
<li><a href="https://movie.douban.com/subject/26654811/" target="_blank" rel="external">行尸走肉 第七季</a></li>
<li><a href="https://movie.douban.com/subject/25862357/" target="_blank" rel="external">权力的游戏 第六季</a></li>
<li><a href="https://movie.douban.com/subject/25907063/" target="_blank" rel="external">盗墓笔记 第一季</a></li>
<li><a href="https://movie.douban.com/subject/26298935/" target="_blank" rel="external">鬼吹灯之精绝古城</a></li>
<li><a href="https://movie.douban.com/subject/25994712/" target="_blank" rel="external">伪装者</a></li>
</ul>
<h4 id="综艺"><a href="#综艺" class="headerlink" title="综艺"></a>综艺</h4><ul>
<li><a href="https://movie.douban.com/subject/25895929/" target="_blank" rel="external">晓松奇谈</a></li>
<li><a href="https://movie.douban.com/subject/26747853/" target="_blank" rel="external">奇葩说</a></li>
<li><a href="https://sss.qingting.fm/ipay/?partner=weibo_youqinglianjie&amp;channel_id=216713" target="_blank" rel="external">矮大紧指北</a></li>
</ul>
<h2 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h2><p>这一节有点大杂烩，有玩过的游戏，不错的电子产品，好玩的小东西或者好用的软件等。</p>
<h4 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a>游戏</h4><ul>
<li>《这是我的战争》（This War Of Mine）</li>
<li>《地狱边境》（LIMBO）</li>
<li>《文明6》（Sid Meier’s Civilization® VI）</li>
<li>《纪念碑谷》</li>
<li>《机械迷城》（Machinarium）</li>
<li>《生命线》（Lifeline）</li>
<li>《饥荒》（Don’t Starve: Pocket Edition）</li>
</ul>
<h4 id="电子产品"><a href="#电子产品" class="headerlink" title="电子产品"></a>电子产品</h4><ul>
<li>MBP 2016</li>
<li>Kindle</li>
<li>OnePlus 3</li>
</ul>
<h4 id="充值信仰"><a href="#充值信仰" class="headerlink" title="充值信仰"></a>充值信仰</h4><ul>
<li><a href="https://github.myshopify.com/products/octocat-figurine" target="_blank" rel="external">Octocat Figurine（小雕像）</a></li>
<li><a href="https://github.myshopify.com/products/posters" target="_blank" rel="external">Hubot Posters（海报）</a></li>
<li><a href="http://zh.mweb.im/" target="_blank" rel="external">MWeb</a> 写 Markdown 文档的利器</li>
<li><a href="https://toolinbox.net/Klib/" target="_blank" rel="external">Klib</a> Kindle 读书笔记管理</li>
</ul>
<h2 id="展望-2017"><a href="#展望-2017" class="headerlink" title="展望 2017"></a>展望 2017</h2><p>一个年中的全年展望^-^，6个月的小目标：</p>
<ul>
<li>在新公司能有新的进步；</li>
<li>接下来每个月阅读一本书；</li>
<li>在工作、学习方面继续总结、积累，形成一些学习成果；</li>
<li>完成 <code>我们的育儿日记</code> 公众号的开发；</li>
<li>和方神的 <code>6点篮球</code> 坚持下去；</li>
<li>春节前完成本年的总结；</li>
</ul>
<p>在这 38℃ 的炎热夏天，再来首激情四射的歌 <a href="https://music.163.com/#/song?id=17427620" target="_blank" rel="external">Higher</a>，一起 Higher 吧！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一篇迟到半年的博客，从年终总结变成了年中总结。&lt;/p&gt;
&lt;p&gt;上一篇（也是第一篇）总结是去年四月写的 &lt;a href=&quot;http://tanchao90.com/hello-world/&quot;&gt;Hello World&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://tanchao90.com/categories/Life/"/>
    
    
      <category term="Life" scheme="http://tanchao90.com/tags/Life/"/>
    
      <category term="Summary" scheme="http://tanchao90.com/tags/Summary/"/>
    
  </entry>
  
  <entry>
    <title>Raven 性能优化</title>
    <link href="http://tanchao90.com/raven/"/>
    <id>http://tanchao90.com/raven/</id>
    <published>2017-06-07T15:47:44.000Z</published>
    <updated>2017-06-07T15:47:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>笔者近期对 Python 版本的 Raven 进行了性能优化，本文是对优化过程的复盘和总结。</p>
<a id="more"></a>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>收集异常和错误（Exception &amp; Error，后面简称EE）信息是修复 bug 的重要基础，我们项目采用 Raven 和 Sentry 实现 EE 的收集和管理。</p>
<p>最近测试中发现，当出现某个频发的 EE 时，我们的游戏画面会出现卡顿，怀疑是 Raven 过渡耗时导致的；经测试发现，每一个 EE 收集操作会消耗好几毫秒，这对于每秒60帧的游戏来说太奢侈了，每一帧只有16毫秒，一个 EE 消耗几毫秒，四五个就可以消耗完所有的时间，势必造成卡顿。</p>
<p>通过分析 Raven 的性能热点，对热点优化，最终将每一个收集操作的时间控制在一毫米之内，游戏体验显著提升。</p>
<p>注：本文中被优化的 Raven 版本并不是最新版，我对比 github 上最新的版本发现主要逻辑基本一致，并未发生大的变化。</p>
<h2 id="Sentry-amp-Raven"><a href="#Sentry-amp-Raven" class="headerlink" title="Sentry &amp; Raven"></a>Sentry &amp; Raven</h2><h4 id="Sentry"><a href="#Sentry" class="headerlink" title="Sentry"></a><a href="https://github.com/getsentry/sentry" target="_blank" rel="external">Sentry</a></h4><blockquote>
<p>Sentry is a modern error logging and aggregation platform.</p>
</blockquote>
<h4 id="Raven"><a href="#Raven" class="headerlink" title="Raven"></a><a href="https://github.com/getsentry/raven-python" target="_blank" rel="external">Raven</a></h4><blockquote>
<p>Raven is a Python client for Sentry.</p>
</blockquote>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>分析 Python 代码的时间消耗可以用 <a href="https://github.com/rkern/line_profiler" target="_blank" rel="external">rkern/line_profiler</a> 工具，在某些情况下不能使用外部库时，就需要自己用 <code>time</code> 库记录时间来分析了。</p>
<p>注：分析内存也有类似的兄弟工具：<a href="https://pypi.python.org/pypi/memory_profiler/0.9" target="_blank" rel="external">memory_profiler</a>。</p>
<p>下图是出现 EE 时 Raven 的调用过程图，其中红色背景的代码段是性能热点，后文主要对这些部分进行优化。</p>
<img src="/images/raven/1.png" title="Raven EE 收集流程图">
<p>注：此图用 Visio 2016 绘制，原文件可在 <a href="https://github.com/tanchao90/evolution/tree/master/python/Tools/Raven" target="_blank" rel="external">github/tanchao90 /evolution/Python/Raven</a> 下载。</p>
<h4 id="raven-base-py-send"><a href="#raven-base-py-send" class="headerlink" title="raven\base.py send()"></a><code>raven\base.py send()</code></h4><p>该函数消耗主要在于 encode() 函数，发送本身采用异步方案，耗时可忽略；</p>
<h4 id="raven-base-py-encode"><a href="#raven-base-py-encode" class="headerlink" title="raven\base.py encode()"></a><code>raven\base.py encode()</code></h4><p>该函数消耗取决于要 encode 的 data 的大小，所以通过控制 data 的大小来保证 encode 的效率；</p>
<h4 id="raven-base-py-build-msg"><a href="#raven-base-py-build-msg" class="headerlink" title="raven\base.py build_msg()"></a><code>raven\base.py build_msg()</code></h4><p>该函数耗时非常多，主要取决于 <code>handler.capture(**kwargs)</code> 内部收集 EE 数据的耗时；</p>
<p>该函数中通过 <code>processor.process(data)</code> 对收集的 EE 数据进行过滤，保证安全性;</p>
<h4 id="utils-stacks-py-get-lines-from-file"><a href="#utils-stacks-py-get-lines-from-file" class="headerlink" title="utils\stacks.py get_lines_from_file()"></a><code>utils\stacks.py get_lines_from_file()</code></h4><p>该函数用于获取 EE 所在行前后五行的代码段，消耗一般；</p>
<h4 id="utils-stacks-py-get-frame-locals"><a href="#utils-stacks-py-get-frame-locals" class="headerlink" title="utils\stacks.py get_frame_locals()"></a><code>utils\stacks.py get_frame_locals()</code></h4><p>该函数遍历 EE 栈，并获取每一个栈帧中的局部对象，包括变量、函数、类等，并对这些对象数据进行序列化；</p>
<p>该函数非常耗时，并且耗时不确定，主要取决于下面几个因素：</p>
<ul>
<li>EE 栈的深度</li>
<li>EE 栈帧中局部对象的数量及其复杂程度，Raven 默认限制每个栈帧中对象序列化之后的数据大小不超过 4096 bytes，从而一定程度上保证产生的数据量；但 Raven 是对每一个对象序列化之后才能计算产生的数据的大小，因此该机制并不能消除序列化对象带来的性能消耗，而在我们的游戏中，有些局部变量是非常庞大的 dict 或者 list，序列化会造成极大的性能消耗；</li>
<li>序列化每一个对象非常耗时，具体说明见后文 transform() 函数；</li>
</ul>
<h4 id="raven-utils-serializer-manager-py-class-Serializer-object-transform"><a href="#raven-utils-serializer-manager-py-class-Serializer-object-transform" class="headerlink" title="raven\utils\serializer\manager.py class Serializer(object): transform()"></a><code>raven\utils\serializer\manager.py class Serializer(object): transform()</code></h4><p>该函数用于序列化每一个对象，非常耗时，主要是因为下面几个方面：</p>
<ul>
<li>对于任何对象的序列化，即使最简单的 Int，都需要实例化所有的序列化类（<code>raven\utils\serializer\base.py class XXSerializer</code>）;</li>
<li>函数内部包含过多的 <code>try catch</code>，每个对象至少被 <code>try catch</code> 一次，类似 list、dict 的复杂对象被 <code>try catch</code> 的次数不少于其中的基本元素数目； </li>
</ul>
<h2 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h2><h4 id="方案-1-0"><a href="#方案-1-0" class="headerlink" title="方案 1.0"></a>方案 1.0</h4><p>由于项目近期要对外测试，所以和老大沟通之后，选择了修改代码量最小的方案，目的是在最低风险的情况下极大可能的优化性能。</p>
<ul>
<li>由于我们的数据不涉及敏感信息，所以我们直接注释掉 <code>processor.process(data)</code>；</li>
<li>对 <code>get_lines_from_file()</code> 函数进行修改，只获取 EE 所在行的代码，从而优化获取消耗并减少产生的数据量，提升 encode 效率；</li>
<li>关闭 <code>get_frame_locals()</code> 函数调用，放弃收集每一个栈帧中的对象数据，既舍弃了序列化耗时，又大大减少了产生的数据量，提升 encode 效率；</li>
</ul>
<p>通过上面三点的优化，目前我的测试 case 已经可以在一毫秒之内完成发送（优化之前基本在3-5毫秒），效果显著；<br>不好的一点是，收集的信息量会大大减少，也许在一些特殊情况下会对分析和处理 EE 造成困难；</p>
<h4 id="方案-2-0"><a href="#方案-2-0" class="headerlink" title="方案 2.0"></a>方案 2.0</h4><p>本方案是对上述 1.0 方案的改进，更精细化的进行优化，有待于实践验证。</p>
<ul>
<li>开启 <code>get_frame_locals()</code> 函数调用，但设置规则过滤当前栈帧中的对象，只对满足条件的对象进行序列号，这样就能在一定程度上保留现场信息，同时大大提高序列化效率，控制产生的数据量；</li>
<li>优化序列化类的实现（<code>class Serializer(object)</code>），大大减少其中的 <code>try catch</code> 次数，这个可有效提高序列化效率；</li>
<li>可以考虑只收集 EE 栈中部分栈帧的数据；比如控制栈帧层数，最多只收集离 EE 触发栈帧最近的5个栈帧的数据，这样既保留了最有效的数据，又控制了数据量；</li>
</ul>
<p>相比方案 1.0，本方案有比较灵活的策略，可以更多的保留 EE 相关数据，同时也提高性能，但性能肯定会比方案 1.0 有所降低，算是数据和性能的一个权衡。</p>
<h2 id="优化感悟"><a href="#优化感悟" class="headerlink" title="优化感悟"></a>优化感悟</h2><p>回顾同事之前对项目客户端的优化和我本次对 Raven 优化的经历，我大概有以下几点感悟，希望能在以后继续提升自己的理解：</p>
<ul>
<li>准确定位性能热点，积极借助于性能分析工具，阅读和分析源码，发现热点的真正原因；</li>
<li>纯代码的优化提升会比较有限，一般不会有质变，除非之前的代码非常烂；</li>
<li>性能优化要有明显的提升，往往需要做出一些取舍，比如降低客户端的渲染效果（画质、特效等），对渲染效果分级等；再如本文中直接放弃收集每一个栈帧的数据，对修复 EE 影响不大，但是可以带来质变的提升。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者近期对 Python 版本的 Raven 进行了性能优化，本文是对优化过程的复盘和总结。&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://tanchao90.com/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="Python" scheme="http://tanchao90.com/tags/Python/"/>
    
      <category term="Raven" scheme="http://tanchao90.com/tags/Raven/"/>
    
      <category term="Sentry" scheme="http://tanchao90.com/tags/Sentry/"/>
    
  </entry>
  
  <entry>
    <title>2017 元旦香港行</title>
    <link href="http://tanchao90.com/2017-hong-kong/"/>
    <id>http://tanchao90.com/2017-hong-kong/</id>
    <published>2017-02-26T14:04:52.000Z</published>
    <updated>2017-02-26T14:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>今年元旦的时候自由行去了一次香港和深圳，在去香港之前，专门看了一些攻略，也咨询了朋友很多信息，在他们的帮助下准备还算充分，四天旅程挺圆满，所以在此记录一下此次旅行的前前后后，以便回顾 ^-^</p>
<a id="more"></a>
<h2 id="出发前的准备"><a href="#出发前的准备" class="headerlink" title="出发前的准备"></a>出发前的准备</h2><p>总体来说去香港还算简单，主要包括签证、港币、住宿、交通、电话上网、门票等几个方面，下面会一一介绍。</p>
<p>PS：感叹一下X宝、X猫很强大，基本上所有东西都可以在上面搞定。</p>
<h4 id="签证"><a href="#签证" class="headerlink" title="签证"></a>签证</h4><p>对于一般游客来说，办理的签证是 <code>个人旅游G</code> 和 <code>团队旅游L</code> 中的某一种，主要取决于户籍所在地在哪；具体的签证种类可以咨询当地出入境管理中心，办理好的签证上面也有明确的标注；</p>
<p>这两种签证都可以去香港，并且每次都是最多逗留七天，且每个自然周最多去一次，它们的不同点如下：</p>
<p>个人旅游G：</p>
<ul>
<li>只有直通香港的城市的居民才可办理，截止目前的直通城市包括广东省及其他部分城市，城市有北京市、上海市、天津市、重庆市（限渝中区、江北区、南岸区、沙坪坝区、九龙坡区、大渡口区、北碚区、渝北区、巴南区、万州区、涪陵区、长寿区、江津市、永川市、合川市），广东，福州市区、厦门、泉州，南京、苏州、无锡，杭州、宁波、台州，沈阳、大连，济南，成都，南昌，长沙，南宁，海口，贵阳，昆明，石家庄，长春，合肥，郑州和武汉</li>
<li>持该签证的游客可在关口自由进入香港，可坐飞机直接进入，也可从深圳进入</li>
</ul>
<p>团队旅游L：</p>
<ul>
<li>不能自由进入香港，需要跟团</li>
<li>离开香港没限制</li>
<li>在这种情况下若想自由行，可选择在深圳找人送关L签，具体可看后面介绍</li>
<li>也可在机场找人送签，据说麻烦且贵，所以我选择的是从深圳过去</li>
</ul>
<p>深圳L签送关：</p>
<ul>
<li>在X宝购买“深圳L签送关”，并选择过关口岸；我这次选择的是从罗湖口岸进入香港，送钱费用只花了1元；</li>
<li>提前购买送关比较便宜，当天比较贵</li>
<li>提前购买的可在出发前至少一天在网上按卖家提示填写信息，方便卖家提前准备送关材料</li>
<li>出发当天到达对应口岸之后，去和卖家约定的地点领取送关材料即可，其实就是一张纸，非常方便；后面提到的电话卡、八达通卡都是在一家店购买的，所以当时一起领取了这几个东西，非常方便</li>
</ul>
<p>注意事项：</p>
<ul>
<li>需提前办理签证，记忆中办理签证时需要带【户口本】、【身份证】原件</li>
<li>若是已经办好的签证，需提前检查签证有效期，若已过有效期，需要去出入境管理中心重签，最好提前一个月左右准备，以免耽误行程</li>
</ul>
<p>其他更详细的信息可参考 <a href="http://wenzhang.16fan.com/a/4164.html" target="_blank" rel="external">2017 港澳通行证办理流程/G签与L签区别/网上续签/L签注送关，L签直飞</a>。</p>
<h4 id="港币"><a href="#港币" class="headerlink" title="港币"></a>港币</h4><p>可准备部分港币，以备需要，比如在关口充值公交卡等，我去的时候准备了1000港币，实际只花费了不到一半，因为绝大多数地方都可以刷银联卡。</p>
<p>最好提前去银行兑换港币，这样比较简单方便，而且都是按照当时汇率兑换的；在关口、香港都有兑换港币的店铺或场所，据说汇率会稍微贵一点，而且还得操心其真假。</p>
<h4 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h4><p>住宿提前在网上预订好即可，去哪儿、携程等等都可以，热门节假日出行最好提前一两个月预订，我当时提前一个月预订的，好多宾馆都已经住满了；而且香港的住宿非常贵，当时非常简单、且很小的宾馆都得四五百一晚，酒店基本都是上千块。</p>
<p>如果购物的话建议住在旺角到尖沙咀一带，购物比较方便，满大街的周大福、商场，而且晚上逛维多利亚港步行也可以。</p>
<h4 id="交通"><a href="#交通" class="headerlink" title="交通"></a>交通</h4><p>香港交通主要包括乘坐地铁、机场快线、公交车、打车等，面向游客的公交卡（八达通）也分很多种，有普通八达通卡、地铁1日票、地铁3日票、单程机场快线等，具体可参考 <a href="http://wenzhang.16fan.com/a/432.html" target="_blank" rel="external">2017香港交通卡全攻略（八达通卡怎样买最划算/地铁1日票/地铁3日票/常见问答）</a>。</p>
<p>由于我是从深圳进入，只会乘坐地铁或者公交，所以选择了普通的八达通卡，具体是在X宝上购买的，成人卡单张140人民币，内含余额100港币、押金50港币；三天香港旅行下来，乘坐了四次地铁，里面的余额刚刚差不多用完，稍微多坐一点肯定不够用，还需自己充值。</p>
<h4 id="电话上网"><a href="#电话上网" class="headerlink" title="电话上网"></a>电话上网</h4><p>电话和上网有两种方式，分别是：</p>
<ul>
<li>国内手机提前开通全球漫游业务，费用会比较贵，尤其上网</li>
<li>购买香港的电话卡，方便，而且非常便宜</li>
</ul>
<p>个人建议：</p>
<ul>
<li>去之前国内手机开通国际电话、上网业务，以免在香港遇到不时之需</li>
<li>在X宝购买香港电话卡，我购买的是“3天不限流量4G电话卡”，只用了30块钱，实际用下来体验非常好，虽然打电话一直没成功，但是上网非常给力，看视频都流畅，给同行的小伙伴开热点毫无压力；唯一不爽的是第一次识别网络花了很久很久的时间</li>
</ul>
<h4 id="门票"><a href="#门票" class="headerlink" title="门票"></a>门票</h4><p>如果计划好旅游线路，门票可以提前在X宝上购买好，这样便宜又方便。</p>
<p>我去之前没来得及购买门票，去太平山顶售票处之后，发现比X宝上贵，而且排队的人很多，在排队的过程中让朋友帮忙在X宝买了当天的票，十分钟之后拿到了电子票，非产顺利，票内容包括往返缆车、杜莎夫人蜡像馆、摩天台，总共250，要是提前买的话会更便宜。</p>
<h2 id="游玩路线"><a href="#游玩路线" class="headerlink" title="游玩路线"></a>游玩路线</h2><p>这次由于时间短，只有四天，留给香港的只有三天，而且主要目的是买东西，所以基本上没有提前规划旅游线路，最终根据当时的时间只去了维多利亚港、太平山顶、杜莎夫人蜡像馆等几个地方，海洋公园和迪士尼乐园都没去成。</p>
<h4 id="2016-12-31-第一天"><a href="#2016-12-31-第一天" class="headerlink" title="2016.12.31 第一天"></a>2016.12.31 第一天</h4><p>上午坐飞机到达深圳宝安机场，然后坐地铁去罗湖口岸，大概中午左右到达罗湖口岸，吃过午饭、领取电话卡、八达通卡、送关材料之后，大概一点左右开始过关进入香港，整个过关挺顺利，半小时之内搞定。</p>
<p>到达香港旺角之后大概是下午三点左右，然后就是住宿、逛街。</p>
<p>晚上十点左右的时候去维多利亚港看跨年烟花（去之前我也不知道有烟花），到的时候已经人满为患了，各个路口都是警察在维持秩序，而且只能到最后一个路口，去海边的路全部封死了，就这样人挤人等了一两个小时之后终于看到了漂亮的烟花，伴随着烟花从2016走进了2017！</p>
<h4 id="2017-01-01-第二天"><a href="#2017-01-01-第二天" class="headerlink" title="2017.01.01 第二天"></a>2017.01.01 第二天</h4><p>起来之后都快中午了，在旺角、油麻地一带逛了整整一天，总算是把该买的东西都买到了。</p>
<p>晚上又去看维多利亚港（昨晚只看了烟花，没能到海边），整个港湾很是壮观，对面是太平山，山底下是高楼大厦，看着楼上的灯光、吹着凉爽的海风，没有比这更惬意了；本来还准备去星光大道走走，结果在维修，没进得去；晚上回住宿的路上，竟然遇到了香港的红灯区（其实就在老街道和小区旁边），当时还挺惊讶，离繁华的弥顿道也就隔一两个街道而已。</p>
<h4 id="2017-01-02-第三天"><a href="#2017-01-02-第三天" class="headerlink" title="2017.01.02 第三天"></a>2017.01.02 第三天</h4><p>早上起来大概十点多了，退完酒店，寄存好行李，然后去了中环、太平山顶，看了蜡像馆，最后上摩天台看了香港全景，拍了一张140港币的照片（贵，所以记忆深刻，没白拍）。</p>
<p>当时用电子导游听到介绍九龙这个名字的来历，说是宋朝皇帝（宋帝昺）有一天环顾群山，对旁边的人说：“传说有一座山就有一条龙，这里有八座山，就该有八条龙了吧”，旁边的大臣听了进言说：“应该是九条龙！”，皇帝说：“八座山怎么有九条龙呢？”，大臣继续说：“陛下真龙天子，这不就是九条龙吗？”，皇帝大悦，从此就有了九龙这个地名。PS：不得不感叹说话的艺术。</p>
<p>下山之后奔赴金紫荆广场看了香港回归祖国纪念碑和“永远盛开的紫荆花”铜像，后者寓意香港永远繁荣昌盛。</p>
<p>逛完最后一站之后，吃晚饭、拿行李、回深圳同学家，香港三日游到此结束！</p>
<h4 id="2017-01-03-第四天"><a href="#2017-01-03-第四天" class="headerlink" title="2017.01.03 第四天"></a>2017.01.03 第四天</h4><p>睡了一个懒觉，中午去深圳湾公园逛了一圈，看了看红树林，总体感觉深圳建设的很不错，而且没有雾霾！没有雾霾！没有雾霾！</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>关于攻略，可以上马蜂窝和十六番看看，有很多有用的游记、文章。</p>
<ul>
<li><a href="http://www.mafengwo.cn/travel-scenic-spot/mafengwo/10189.html" target="_blank" rel="external">马蜂窝</a></li>
<li><a href="http://diqu.16fan.com/a/100004.html" target="_blank" rel="external">十六番</a></li>
</ul>
<h2 id="风光无限好"><a href="#风光无限好" class="headerlink" title="风光无限好"></a>风光无限好</h2><p>最后晒几张此次香港行拍的照片，旅游美丽、因为有你！</p>
<h4 id="香港"><a href="#香港" class="headerlink" title="香港"></a>香港</h4><img src="/images/2017-hong-kong/1.jpg" title="旺角街景">
<img src="/images/2017-hong-kong/2.jpg" title="维多利亚港看烟花的人群">
<img src="/images/2017-hong-kong/3.jpg" title="维多利亚港夜景">
<img src="/images/2017-hong-kong/4.jpg" title="维多利亚港夜景">
<img src="/images/2017-hong-kong/5.jpg" title="杜莎夫人蜡像馆-封盖大姚">
<img src="/images/2017-hong-kong/6.jpg" title="太平山顶-摩天台-香港全貌">
<img src="/images/2017-hong-kong/7.jpg" title="金紫荆广场">
<h4 id="深圳"><a href="#深圳" class="headerlink" title="深圳"></a>深圳</h4><img src="/images/2017-hong-kong/8.jpg" title="深圳湾公园">
<img src="/images/2017-hong-kong/9.jpg" title="深圳湾公园">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年元旦的时候自由行去了一次香港和深圳，在去香港之前，专门看了一些攻略，也咨询了朋友很多信息，在他们的帮助下准备还算充分，四天旅程挺圆满，所以在此记录一下此次旅行的前前后后，以便回顾 ^-^&lt;/p&gt;
    
    </summary>
    
      <category term="旅行" scheme="http://tanchao90.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="香港" scheme="http://tanchao90.com/tags/%E9%A6%99%E6%B8%AF/"/>
    
      <category term="杜莎夫人蜡像馆" scheme="http://tanchao90.com/tags/%E6%9D%9C%E8%8E%8E%E5%A4%AB%E4%BA%BA%E8%9C%A1%E5%83%8F%E9%A6%86/"/>
    
      <category term="太平山顶" scheme="http://tanchao90.com/tags/%E5%A4%AA%E5%B9%B3%E5%B1%B1%E9%A1%B6/"/>
    
      <category term="维多利亚港" scheme="http://tanchao90.com/tags/%E7%BB%B4%E5%A4%9A%E5%88%A9%E4%BA%9A%E6%B8%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何选择开源许可证</title>
    <link href="http://tanchao90.com/open-source-licenses/"/>
    <id>http://tanchao90.com/open-source-licenses/</id>
    <published>2017-02-23T15:19:10.000Z</published>
    <updated>2017-02-26T06:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时查阅 Github 的时候，发现上面好多代码都有开源协议申明，如 MIT、BSD、Apache 等，甚至有些博客都有版权申明，所以最近专门了解了一下<code>开源许可证（Open Source License）</code>，结果发现通过OSI（<a href="https://opensource.org/" target="_blank" rel="external">Open Source Initiative</a>）批准的许可证（<a href="https://opensource.org/licenses/alphabetical" target="_blank" rel="external">Licenses by Name</a>）就有接近一百个，如此多的许可证让人眼花缭乱，如何才能选择一个适合自己项目的呢？</p>
<a id="more"></a>
<p>本文主要参考其他人的博客成文，对那些博客中的信息做了一个整理总结，方便自己学习，希望对以后的学习者有帮助。</p>
<p>文章主要分<code>开源许可证</code>、<code>非软件类许可证</code>两大方面，它们本质上都属于<code>开放内容许可证</code>（<a href="https://en.wikipedia.org/wiki/Open_Content_License" target="_blank" rel="external">Open Content License</a>），具体章节如下：</p>
<ul>
<li><a href="#开源许可证">开源许可证</a></li>
<li><a href="#如何选择合适的开源许可证">如何选择合适的开源许可证</a></li>
<li><a href="#为代码添加开源许可证">为代码添加开源许可证</a></li>
<li><a href="#非软件类许可证">非软件类许可证</a></li>
</ul>
<h2 id="开源许可证"><a href="#开源许可证" class="headerlink" title="开源许可证"></a>开源许可证</h2><blockquote><p>An open-source license is a type of license for computer software and other products that allows the source code, blueprint or design to be used, modified and/or shared under defined terms and conditions.</p>
<footer><strong>Open-source license</strong><cite><a href="https://en.wikipedia.org/wiki/Open-source_license" target="_blank" rel="external">Wikipedia</a></cite></footer></blockquote>
<p>虽然OSI批准的许可证有接近一百个，但是比较流行的并不多，大概只有五六个，如MIT、BSD、Apache、GPL、LGPL、Mozilla等，所以下面主要介绍这几个协议。</p>
<h4 id="MIT"><a href="#MIT" class="headerlink" title="MIT"></a>MIT</h4><ul>
<li><a href="https://opensource.org/licenses/MIT" target="_blank" rel="external">The MIT License</a></li>
</ul>
<p>MIT许可协议之名源自麻省理工学院（Massachusetts Institute of Technology, MIT），又称“X许可协议”（X License）或“X11许可协议”（X11 License）。</p>
<p>MIT是限制最少的开源许可证！</p>
<p>特点：</p>
<ul>
<li>可以任意使用、拷贝和修改代码</li>
<li>可以用于商业软件</li>
<li>修改后的代码或者发行包包含原作者的许可信息</li>
<li>使用此协议的项目：<a href="https://github.com/jquery/jquery/blob/master/LICENSE.txt" target="_blank" rel="external">jQuery</a>, <a href="https://github.com/dotnet/corefx/blob/master/LICENSE" target="_blank" rel="external">.NET Core</a>, <a href="https://github.com/rails/rails/blob/master/activerecord/MIT-LICENSE" target="_blank" rel="external">Rails</a>, <a href="https://github.com/nodejs/node/blob/master/LICENSE" target="_blank" rel="external">Node.js</a> 等</li>
</ul>
<h4 id="BSD（Berkeley-Software-Distribution-License）"><a href="#BSD（Berkeley-Software-Distribution-License）" class="headerlink" title="BSD（Berkeley Software Distribution License）"></a>BSD（Berkeley Software Distribution License）</h4><ul>
<li><a href="https://opensource.org/licenses/BSD-2-Clause" target="_blank" rel="external">The 2-Clause BSD License</a></li>
<li><a href="https://opensource.org/licenses/BSD-3-Clause" target="_blank" rel="external">BSD 3-Clause “New” or “Revised” license</a></li>
</ul>
<p>特点：</p>
<ul>
<li>可以任意使用、拷贝和修改代码</li>
<li>可以用于商业软件</li>
<li>修改后的代码需包含原代码中的 BSD 许可证</li>
<li>未获书面许可，不可以用开源代码的作者/机构名字和原来产品的名字做市场推广</li>
<li>使用此协议的项目：<a href="https://nginx.org/en/" target="_blank" rel="external">nginx</a>, <a href="https://redis.io/topics/license" target="_blank" rel="external">Redis</a>、<a href="https://github.com/django/django" target="_blank" rel="external">Django</a> 等</li>
</ul>
<h4 id="Apache-License"><a href="#Apache-License" class="headerlink" title="Apache License"></a>Apache License</h4><ul>
<li><a href="http://www.apache.org/licenses/LICENSE-2.0" target="_blank" rel="external">Apache LICENSE-2.0</a></li>
<li><a href="https://opensource.org/licenses/Apache-2.0" target="_blank" rel="external">Apache License, Version 2.0</a></li>
</ul>
<p>特点：</p>
<ul>
<li>允许使用者修改和重新发布代码(以其他协议形式)，允许闭源商业发布和销售</li>
<li>一次授权，永久使用</li>
<li>一国授权，在其他国家也适用</li>
<li>授权不能撤回</li>
<li>使用者需要给代码的用户一份 Apache Lience</li>
<li>如果你修改了代码，需要在被修改的文件中说明</li>
<li>如果再发布的产品中包含了 Notice 文件，则需要在 Notice 文件中带有 Apache Lience</li>
<li>使用此协议的项目：<a href="https://github.com/android/platform_system_core/blob/master/NOTICE" target="_blank" rel="external">Android</a>, <a href="https://svn.apache.org/viewvc/httpd/httpd/trunk/LICENSE?view=markup" target="_blank" rel="external">Apache</a>, <a href="https://github.com/apple/swift/blob/master/LICENSE.txt" target="_blank" rel="external">Swift</a> 等</li>
</ul>
<h4 id="GPL（GNU-General-Public-License）"><a href="#GPL（GNU-General-Public-License）" class="headerlink" title="GPL（GNU General Public License）"></a>GPL（GNU General Public License）</h4><ul>
<li><a href="https://opensource.org/licenses/gpl-license" target="_blank" rel="external">GNU General Public License Versions</a></li>
</ul>
<p>特点：</p>
<ul>
<li>可以任意使用、拷贝和修改代码</li>
<li>具有“传染性”，只要在一个软件中使用(“使用”指类库引用或者修改后的代码) GPL 协议的产品，则该软件产品必须也采用 GPL 协议，既必须也是开源和免费的</li>
<li>不适合商业软件</li>
<li>使用此协议的项目：<a href="http://git.savannah.gnu.org/cgit/bash.git/tree/COPYING" target="_blank" rel="external">Bash</a>, <a href="https://github.com/torvalds/linux" target="_blank" rel="external">Linux</a>, <a href="https://github.com/git/git" target="_blank" rel="external">Git</a>, <a href="https://github.com/WordPress/WordPress/blob/master/license.txt" target="_blank" rel="external">WordPress</a> 等</li>
</ul>
<h4 id="LGPL（GNU-Library-or-“Lesser”-General-Public-License）"><a href="#LGPL（GNU-Library-or-“Lesser”-General-Public-License）" class="headerlink" title="LGPL（GNU Library or “Lesser” General Public License）"></a>LGPL（GNU Library or “Lesser” General Public License）</h4><ul>
<li><a href="https://opensource.org/licenses/lgpl-license" target="_blank" rel="external">LGPL Licenses</a></li>
</ul>
<p>由于 GPL 太严格，所有的使用者都必须免费和开源，基于此原因产生了 LGPL。</p>
<p>特点：</p>
<ul>
<li>允许商业软件通过类库引用(link)方式使用 LGPL 类库而不需要开源商业软件的代码</li>
<li>如果要修改原始组件的代码，则涉及修改部分的代码和基于原来代码衍生的代码都必须采用 LGPL 协议</li>
<li>不适合以 LGPL 协议为基础的代码进行二次开发的商业软件</li>
<li>使用此协议的项目：<a href="https://docs.jboss.org/jbossas/admindevel326/html/apa.html" target="_blank" rel="external">JBoss</a>, <a href="http://hibernate.org/community/license/" target="_blank" rel="external">Hibernate</a>, <a href="https://www.qt.io/qt-licensing-terms/" target="_blank" rel="external">Qt</a> 等</li>
</ul>
<h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/MIT%E8%A8%B1%E5%8F%AF%E8%AD%89" target="_blank" rel="external">MIT许可证 - Wikipedia</a></li>
<li><a href="https://en.wikipedia.org/wiki/BSD_licenses" target="_blank" rel="external">BSD</a></li>
<li><a href="https://zh.wikipedia.org/wiki/BSD%E8%AE%B8%E5%8F%AF%E8%AF%81" target="_blank" rel="external">BSD许可证</a></li>
<li><a href="https://www.gnu.org/licenses/gpl-howto.html" target="_blank" rel="external">GNU GPL</a></li>
</ul>
<h2 id="如何选择合适的开源许可证"><a href="#如何选择合适的开源许可证" class="headerlink" title="如何选择合适的开源许可证"></a>如何选择合适的开源许可证</h2><h4 id="一图胜千言"><a href="#一图胜千言" class="headerlink" title="一图胜千言"></a>一图胜千言</h4><p>俗话说一图胜千言，网上已经有很多流程图来说这个事情，比较清晰的有下面两张：</p>
<p>【图1】： 来自阮一峰老师的博客 <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="external">如何选择开源许可证？</a>：<br><img src="/images/open-source-licenses/1.png" title="来自阮一峰老师的博客-如何选择开源许可证"></p>
<p>【图2】： 来自乌克兰程序员 Paul Miller <a href="http://paulmillr.com/posts/simple-description-of-popular-software-licenses/" target="_blank" rel="external">开源许可协议分析图</a>：<br><img src="/images/open-source-licenses/2.png" title="来自乌克兰程序员 Paul Miller"></p>
<p>【图2】 对应的中文版可查看 陈皓的博客【酷客-COOLSHELL】 <a href="http://coolshell.cn/articles/4657.html" target="_blank" rel="external">狗日的开源软件许可证</a>：<br><img src="/images/open-source-licenses/3.jpg" title="来自陈皓的博客-狗日的开源软件许可证"></p>
<h4 id="Github-官方说明"><a href="#Github-官方说明" class="headerlink" title="Github 官方说明"></a>Github 官方说明</h4><p>为了帮助大家为自己的代码选择合适的许可证，Github 专门提供了一个网站来举例说明，对应的中英文链接如下：</p>
<ul>
<li><a href="https://choosealicense.com/" target="_blank" rel="external">Choose an open source license</a></li>
<li><a href="http://choosealicense.online/" target="_blank" rel="external">选择一个开源软件协议</a></li>
</ul>
<p>网址首页推荐了 MIT、Apache、GPL 三个许可证，并做了简单说明，列出了部分用该许可证的项目，方便大家参考，用户也可进入协议详情页面详细了解每个协议的权利和约束，网址展示很漂亮，如 <a href="http://choosealicense.online/licenses/mit/" target="_blank" rel="external">MIT 许可证说明</a>。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>若只要求署名，则可选择 MIT、BSD 许可证</li>
<li>若对专利有一定要求，则可选择 Apache 许可证</li>
<li>若想促进代码分享，强制使用者开源、免费，则选择 GPL 许可证</li>
<li>若想促进源码分享，但对类库使用放松限制，则可考虑 LGPL</li>
</ul>
<h4 id="References-1"><a href="#References-1" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html" target="_blank" rel="external">如何为你的代码选择一个开源协议</a><ul>
<li>【各协议授权详情】部分用图表的形式对比说明了各个协议，清晰明了</li>
</ul>
</li>
<li><a href="http://blog.jasonding.top/2015/05/11/Git/%E3%80%90Git%E3%80%91%E8%AE%A4%E8%AF%86%E5%90%84%E7%A7%8D%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB/" target="_blank" rel="external">【Git】认识各种开源协议及其关系</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/02/why_gpl_is_a_better_choice.html" target="_blank" rel="external">为什么GPL是更好的开源许可证?</a></li>
<li><a href="http://eleveneat.com/2015/12/15/License/" target="_blank" rel="external">如何选择和使用开源许可协议</a></li>
</ul>
<h2 id="为代码添加开源许可证"><a href="#为代码添加开源许可证" class="headerlink" title="为代码添加开源许可证"></a>为代码添加开源许可证</h2><p>以 Github 仓库为例，为 GitHub 仓库添加许可证有两种方式：</p>
<ul>
<li>创建仓库的同时选择一个许可证，Github 可自动为其创建相关许可证文件</li>
<li>手动创建名为 <code>LICENSE</code> 的文件，并将对应许可证的内容写入该文件，然后将该文件放入仓库根目录即可</li>
</ul>
<h4 id="为-Github-仓库添加-MIT-许可证"><a href="#为-Github-仓库添加-MIT-许可证" class="headerlink" title="为 Github 仓库添加 MIT 许可证"></a>为 Github 仓库添加 MIT 许可证</h4><p>由于我的 Github 仓库 <a href="https://github.com/tanchao90/evolution" target="_blank" rel="external">evolution</a> 已经存在，所以只能采用第二种方法，添加 MIT 许可证文件之后的仓库如下图所示：仓库中包含 <code>LICENSE</code> 文件，并且 Github 会识别其中的内容，并在仓库右上角显示出协议名称。<br><img src="/images/open-source-licenses/4.png"></p>
<h4 id="MIT-许可证头部说明"><a href="#MIT-许可证头部说明" class="headerlink" title="MIT 许可证头部说明"></a>MIT 许可证头部说明</h4><p>关于 MIT 许可证头部 <code>Copyright (c) [year] [fullname]</code> 中 year、fullname 的含义和填写说明，可参考 <a href="http://opensource.stackexchange.com/questions/1522/what-should-be-written-in-mit-license-year-full-name" target="_blank" rel="external">What should be written in MIT license (year, full name)?</a>：</p>
<blockquote>
<p><code>[year]</code> is the <strong>year copyright was applied</strong>. If you apply the copyright (which happens automatically when you write the work) in 2015, put in 2015. Some people like to put in a range of years (i.e. 2015-2020) - this isn’t necessary.<br><code>[fullname]</code> is the <strong>full name of the entity that owns the copyright</strong>. </p>
</blockquote>
<h2 id="非软件类许可证"><a href="#非软件类许可证" class="headerlink" title="非软件类许可证"></a>非软件类许可证</h2><p>除过软件许可证之外，还有 <a href="http://choosealicense.online/non-software/" target="_blank" rel="external">非软件类协议</a>，用于多媒体、文章等内容，其中最常用的就是 <code>知识共享许可证</code>(<a href="https://creativecommons.org/licenses/" target="_blank" rel="external">The Creative Commons Licenses</a>，也称为CC协议)。</p>
<h4 id="知识共享许可证"><a href="#知识共享许可证" class="headerlink" title="知识共享许可证"></a>知识共享许可证</h4><p>CC协议为作者提供了四种权利，分别是：</p>
<ul>
<li>署名（Attribution，简写为BY）：必须提到原作者</li>
<li>非商业用途（Noncommercial，简写为NC）：不得用于盈利性目的</li>
<li>禁止演绎（No Derivative Works，简写为ND）：不得修改原作品</li>
<li>相同方式共享（Share Alike，简写为SA）：如果允许修改原作品，那么必须使用相同的许可证发布</li>
</ul>
<p>上述四种权利的具体含义可参考 <a href="http://creativecommons.net.cn/licenses/licenses_exp/" target="_blank" rel="external">许可协议说明-知识共享中国大陆</a> 一文，文章使用具体的场景对其进行说明，简单明了。</p>
<p>对上述权利任意组合可以产生16种权利组合，但去除其中的无效（或没意义）组合，最终只留下了6种组合，绝大多数创作共用许可证都属于这6种组合之一，分别如下表格所示：</p>
<table>
<thead>
<tr>
<th style="text-align:center">协议名称</th>
<th style="text-align:center">中文名称</th>
<th style="text-align:center">协议图示</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CC BY</td>
<td style="text-align:center">署名</td>
<td style="text-align:center"><img src="https://licensebuttons.net/l/by/3.0/88x31.png" alt="CC BY"></td>
</tr>
<tr>
<td style="text-align:center">CC BY-SA</td>
<td style="text-align:center">署名-相同方式共享</td>
<td style="text-align:center"><img src="https://licensebuttons.net/l/by-sa/3.0/88x31.png" alt="CC BY-SA"></td>
</tr>
<tr>
<td style="text-align:center">CC BY-ND</td>
<td style="text-align:center">署名-禁止演绎</td>
<td style="text-align:center"><img src="https://licensebuttons.net/l/by-nd/3.0/88x31.png" alt="CC BY-ND"></td>
</tr>
<tr>
<td style="text-align:center">CC BY-NC</td>
<td style="text-align:center">署名-非商业性使用</td>
<td style="text-align:center"><img src="https://licensebuttons.net/l/by-nc/3.0/88x31.png" alt="CC BY-NC"></td>
</tr>
<tr>
<td style="text-align:center">CC BY-NC-SA</td>
<td style="text-align:center">署名-非商业性使用-相同方式共享</td>
<td style="text-align:center"><img src="https://licensebuttons.net/l/by-nc-sa/3.0/88x31.png" alt="CC BY-NC-SA"></td>
</tr>
<tr>
<td style="text-align:center">CC BY-NC-ND</td>
<td style="text-align:center">署名-非商业性使用-禁止演绎</td>
<td style="text-align:center"><img src="https://licensebuttons.net/l/by-nc-nd/3.0/88x31.png" alt="CC BY-NC-ND"></td>
</tr>
</tbody>
</table>
<h4 id="为我的博客添加协议声明"><a href="#为我的博客添加协议声明" class="headerlink" title="为我的博客添加协议声明"></a>为我的博客添加协议声明</h4><p>作者可根据自己的意愿选择上述6种协议中的一种用到自己的作品上。</p>
<p>对于本博客而言，我个人倾向于选择 <code>CC BY-NC-SA 4.0</code> 协议，具体的版权声明如下：</p>
<blockquote>
<p>本博客所有内容均采用创作共用 <strong>[署名-非商业性使用-相同方式共享 4.0 (CC BY-NC-SA 4.0)]</strong> 许可证授权。如要查看许可证全文，请访问如下网址 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh" target="_blank" rel="external">CC BY-NC-SA 4.0</a>。</p>
</blockquote>
<h4 id="References-2"><a href="#References-2" class="headerlink" title="References"></a>References</h4><ul>
<li><a href="http://www.ruanyifeng.com/blog/2008/04/creative_commons_licenses.html" target="_blank" rel="external">谈谈创作共用许可证（Creative Commons licenses）</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%9B%E4%BD%9C%E5%85%B1%E7%94%A8" target="_blank" rel="external">知识共享-wiki</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时查阅 Github 的时候，发现上面好多代码都有开源协议申明，如 MIT、BSD、Apache 等，甚至有些博客都有版权申明，所以最近专门了解了一下&lt;code&gt;开源许可证（Open Source License）&lt;/code&gt;，结果发现通过OSI（&lt;a href=&quot;https://opensource.org/&quot;&gt;Open Source Initiative&lt;/a&gt;）批准的许可证（&lt;a href=&quot;https://opensource.org/licenses/alphabetical&quot;&gt;Licenses by Name&lt;/a&gt;）就有接近一百个，如此多的许可证让人眼花缭乱，如何才能选择一个适合自己项目的呢？&lt;/p&gt;
    
    </summary>
    
      <category term="编程工具" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="MIT" scheme="http://tanchao90.com/tags/MIT/"/>
    
      <category term="BSD" scheme="http://tanchao90.com/tags/BSD/"/>
    
      <category term="Apache" scheme="http://tanchao90.com/tags/Apache/"/>
    
      <category term="GPL" scheme="http://tanchao90.com/tags/GPL/"/>
    
      <category term="LGPL" scheme="http://tanchao90.com/tags/LGPL/"/>
    
      <category term="Creative Commons" scheme="http://tanchao90.com/tags/Creative-Commons/"/>
    
  </entry>
  
  <entry>
    <title>VMware、VirtualBox使用总结</title>
    <link href="http://tanchao90.com/virtual-machine-use-experience/"/>
    <id>http://tanchao90.com/virtual-machine-use-experience/</id>
    <published>2016-12-25T09:25:26.000Z</published>
    <updated>2016-12-25T09:25:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>说到虚拟机，我最开始使用的是 <strong>VMware Workstation</strong>（当然都是破解版），一用就是好多年；直到去年合作项目的需要，转而使用 <strong>VirtualBox</strong>，从此基本放弃了 <strong>VMware Workstation</strong>。</p>
<a id="more"></a>
<h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><h4 id="虚拟机介绍"><a href="#虚拟机介绍" class="headerlink" title="虚拟机介绍"></a>虚拟机介绍</h4><p>Wikipedia上<code>虚拟机</code>的定义是：“有效的、独立的真实机器的副本。”，结合到实际中就是用各种<code>虚拟机软件</code>创建不同的“虚拟机”；从使用层面来说，这些“虚拟机”和物理机没有什么区别，甚至比物理机更加灵活方便，可以随时修改硬件配置、网络参数等等。<br>下面几个文章是对虚拟机及其技术的简单介绍：</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%99%9B%E6%93%AC%E6%A9%9F%E5%99%A8" target="_blank" rel="external">虚拟机-wikipedia</a></li>
<li><a href="http://www.ibm.com/developerworks/cn/linux/l-linuxvirt/" target="_blank" rel="external">虚拟 Linux-虚拟化方法、架构和实现概述</a></li>
<li><a href="https://www.zhihu.com/question/20848931" target="_blank" rel="external">虚拟机是怎么实现的？</a></li>
</ul>
<h4 id="虚拟机软件"><a href="#虚拟机软件" class="headerlink" title="虚拟机软件"></a>虚拟机软件</h4><p>我知道的虚拟机软件有下面三个（文章最后有它们的界面截图）：</p>
<ul>
<li><a href="http://www.vmware.com" target="_blank" rel="external">VMware</a>，支持<strong>Win</strong>、<strong>Mac</strong>、<strong>Linux</strong>，<strong>收费</strong><ul>
<li><a href="http://www.vmware.com/cn/products/fusion.html" target="_blank" rel="external">Fusion for Mac</a>，<code>Fusion</code> VS <code>Fusion Pro</code></li>
<li><a href="http://www.vmware.com/cn/products/workstation.html" target="_blank" rel="external">Workstation for Windows</a>，<code>Workstation Player</code> VS <code>Workstation Pro</code></li>
<li><a href="http://www.vmware.com/cn/products/workstation-for-linux.html" target="_blank" rel="external">Workstation for Linux</a>，<code>Workstation Player</code> VS <code>Workstation Pro</code></li>
</ul>
</li>
<li><a href="https://www.virtualbox.org/" target="_blank" rel="external">VirtualBox</a>，支持<strong>Win</strong>、<strong>Mac</strong>、<strong>Linux</strong>，<strong>免费</strong><ul>
<li><a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="external">VirtualBox Downloads</a></li>
</ul>
</li>
<li><a href="http://www.parallels.com/" target="_blank" rel="external">Parallels Desktop</a>，只支持<code>Mac</code>版本，收费</li>
</ul>
<p>它们各有特点，关于它们的对比和区别，可参考下面的文章：</p>
<ul>
<li><a href="http://www.orsoon.com/news/152449.html" target="_blank" rel="external">哪款虚拟机最好 ParallelsDesktop 10和VMware Fusion 7和VirtualBox 4对比分析</a>，基于Mac系统对比</li>
<li><a href="http://www.crifan.com/virtual_machine_soft_choice_vmware_or_virtualbox_definitely_recommend_virtualbox/" target="_blank" rel="external">【整理】虚拟机的选择，VMWare还是VirtualBox – 绝对推荐VirtualBox</a></li>
</ul>
<h4 id="我的使用体验"><a href="#我的使用体验" class="headerlink" title="我的使用体验"></a>我的使用体验</h4><p>由于我只使用过其中的VMware和VirtualBox，所以只能说一下这两个软件的使用体验：</p>
<ul>
<li>VMware Workstation<ul>
<li>功能强大、软件复杂</li>
<li>收费（找破解版麻烦），虽然Play版本免费，但是功能缩水，而且所谓的“不能用于商业用途”</li>
<li>非常耗资源</li>
</ul>
</li>
<li>VirtualBox<ul>
<li>简单易用</li>
<li>完全免费</li>
<li>节省资源，一台普通电脑开好几个Ubuntu虚拟机无压力</li>
</ul>
</li>
</ul>
<p>从长期的个人使用来看，对于一般的功能需求，两个都能满足，在没有特殊需求的情况下建议使用VirtualBox，免费又好用。</p>
<h4 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h4><p>基本都是谷歌解决问题，查资料的过程中发现下面两个资料，看评价还不错，貌似值得一看：</p>
<ul>
<li><a href="http://edu.51cto.com/course/course_id-1059.html" target="_blank" rel="external">精通VMware10虚拟机视频课程</a></li>
<li><a href="http://edu.51cto.com/course/course_id-2223.html" target="_blank" rel="external">VMware Workstation 10—虚拟化入门神器完全讲解视频课程</a></li>
</ul>
<h2 id="VirtualBox"><a href="#VirtualBox" class="headerlink" title="VirtualBox"></a>VirtualBox</h2><h4 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h4><ul>
<li>导入、导出：方便虚拟机文件备份、分享</li>
<li>注册：注册一个新的虚拟机目录，支持多个虚拟机在不同的路径，比如A虚拟机在D盘，B虚拟机在F盘，磁盘空间受限时非常有用处；</li>
<li>修改虚拟机配置<ul>
<li>内存</li>
<li>CPU</li>
<li>网络：NAT、桥接等</li>
<li>修改存储：一个虚拟机可以切换不同的存储文件（.vmdk、.vdi），个人理解类似于一个物理机，可以插不同的启动盘启动</li>
</ul>
</li>
</ul>
<h4 id="一些参考文档"><a href="#一些参考文档" class="headerlink" title="一些参考文档"></a>一些参考文档</h4><ul>
<li><a href="http://superuser.com/questions/360517/what-disk-image-should-i-use-with-virtualbox-vdi-vmdk-vhd-or-hdd" target="_blank" rel="external">What disk image should I use with VirtualBox, VDI, VMDK, VHD or HDD? </a> </li>
<li><a href="https://nfolamp.wordpress.com/2010/06/10/converting-vmdk-files-to-vdi-using-vboxmanage/" target="_blank" rel="external">Converting vmdk files to vdi using VBoxManage</a></li>
<li><a href="http://stackoverflow.com/questions/11659005/how-to-resize-a-virtualbox-vmdk-file" target="_blank" rel="external">How to resize a VirtualBox vmdk file</a></li>
<li><a href="http://superuser.com/questions/811088/mkfs-the-device-apparently-does-not-exist-did-you-specify-it-correctly" target="_blank" rel="external">mkfs - The device apparently does not exist; did you specify it correctly?</a></li>
</ul>
<h4 id="虚拟机磁盘扩容"><a href="#虚拟机磁盘扩容" class="headerlink" title="虚拟机磁盘扩容"></a>虚拟机磁盘扩容</h4><p>虚拟机使用久了，或者开始创建的时候空间设置小了，在后期都可能遇到磁盘空间不足的问题，一般有下面三种方式处理该问题：</p>
<ol>
<li>重新创建一个大容量的虚拟机，环境都得从头搭起</li>
<li>添加新的分区：根目录依旧还是那么大，基于根目录的操作依旧面临空间不足的限制<ul>
<li><a href="http://blog.csdn.net/ouyang_peng/article/details/53261599" target="_blank" rel="external">VirtualBox如何扩展虚拟机Ubuntu的硬盘容量？</a>，添加新分区</li>
<li>我的实践总结：<a href="https://gist.github.com/tanchao90/f85b5ffd140795fc11d1c8ec04b4100c" target="_blank" rel="external">github gist</a> </li>
</ul>
</li>
<li>直接增加根目录分区的大小：<strong>完美扩容</strong><ul>
<li><a href="http://imcczy.com/how-to-expand-the-root-filesystem-in-vmware.html" target="_blank" rel="external">VMware下扩展ubuntu虚拟机根目录分区</a>，扩展根目录分区 ☆☆☆☆</li>
<li><a href="https://hexeract.wordpress.com/2012/04/30/how-to-expand-the-root-filesystem-of-a-11-10-ubuntu-running-inside-vmware-player/" target="_blank" rel="external">HOW TO EXPAND THE ROOT FILESYSTEM OF A 12.04 UBUNTU RUNNING INSIDE VMWARE PLAYER</a> 对应的英文原文</li>
</ul>
</li>
</ol>
<p>在下面的环境亲测上述2方案、3方案均ok：</p>
<ul>
<li>Windows 10</li>
<li>VirtualBox 5.1.6 r110634 (Qt5.5.1)</li>
<li>Ubuntu 16.04 LTS</li>
</ul>
<h2 id="创建Ubuntu虚拟机"><a href="#创建Ubuntu虚拟机" class="headerlink" title="创建Ubuntu虚拟机"></a>创建Ubuntu虚拟机</h2><p>这里我想写一下我基于VirtualBox创建和使用Ubuntu的方法，充分发挥虚拟机的优势，重复利用已有的虚拟机；</p>
<h4 id="创建全新的虚拟机"><a href="#创建全新的虚拟机" class="headerlink" title="创建全新的虚拟机"></a>创建全新的虚拟机</h4><p>具体可参考网上的教程创建，非常简单，没遇到过什么问题；<br>建议：磁盘空间尽量设置大一点，避免后期扩容的痛苦；<br>该版本简称<code>V1</code>；</p>
<h4 id="将虚拟机导出备份"><a href="#将虚拟机导出备份" class="headerlink" title="将虚拟机导出备份"></a>将虚拟机导出备份</h4><ul>
<li>“管理”-&gt;“导出虚拟电脑”</li>
<li>选择要导出的虚拟机</li>
<li>选择导出目录</li>
<li>其他默认即可</li>
<li>即可导出<code>.ova</code>格式的虚拟机文件，用导入功能即可导入该虚拟机文件；</li>
</ul>
<h4 id="在V1的基础上安装软件，生成新的虚拟机版本"><a href="#在V1的基础上安装软件，生成新的虚拟机版本" class="headerlink" title="在V1的基础上安装软件，生成新的虚拟机版本"></a>在V1的基础上安装软件，生成新的虚拟机版本</h4><ul>
<li>v2<ul>
<li>vim</li>
<li>ssh</li>
<li>zsh</li>
<li>wget</li>
<li>curl</li>
<li>git</li>
<li>autojump</li>
<li>Nodejs</li>
<li>TDLR</li>
</ul>
</li>
<li>v3<ul>
<li>dos2unix</li>
<li>pyenv</li>
<li>pyenv-virtualenv</li>
</ul>
</li>
</ul>
<p>对于上述每一个版本的虚拟机都可以导出备份，后期可以从任何一个版本开始搭建新的开发环境，省去了搭建基础环境的过程，而且可以快速的分享给Team里面其他人，避免多次搭建环境的麻烦；<br>也可以用Docker完成类似的工作，但是个人感觉开发更使用虚拟机。</p>
<h2 id="创建OS-X（现在的macOS）虚拟机"><a href="#创建OS-X（现在的macOS）虚拟机" class="headerlink" title="创建OS X（现在的macOS）虚拟机"></a>创建OS X（现在的macOS）虚拟机</h2><p><strong>注：</strong>以下实验都是在Windows上完成的；</p>
<h4 id="我的物理机参数"><a href="#我的物理机参数" class="headerlink" title="我的物理机参数"></a>我的物理机参数</h4><p>以下是鲁大师检测的参数，外加一个1T的普通硬盘：</p>
<ul>
<li>电脑型号 <code>技嘉 B85-HD3 台式电脑</code></li>
<li>操作系统 <code>Windows 10 Enterprise 64位 ( DirectX 12 )</code></li>
<li>处理器 <code>英特尔 第四代酷睿 i5-4590 @ 3.30GHz 四核</code></li>
<li>主板 <code>技嘉 B85-HD3 ( 英特尔 Haswell - Lynx Point )</code></li>
<li>内存 <code>16 GB ( 金士顿 DDR3 1600MHz )</code></li>
<li>主硬盘 <code>三星 SSD 850 EVO 250GB ( 250 GB / 固态硬盘 )</code></li>
<li>显卡 <code>Nvidia GeForce GTX 750 ( 2 GB / Nvidia )</code></li>
<li>显示器 <code>戴尔 DEL4091 DELL E2414H ( 24 英寸  )</code></li>
<li>声卡 <code>瑞昱 ALC892 @ 英特尔 Lynx Point  高保真音频</code></li>
<li>网卡 <code>瑞昱 RTL8168/8111/8112 Gigabit Ethernet Controller / 技嘉</code></li>
</ul>
<h4 id="我的建议"><a href="#我的建议" class="headerlink" title="我的建议"></a>我的建议</h4><p>在上述硬件环境下，使用VMware Workstation和VirtualBox我均搭建过OS X虚拟机，实际的体检都很差，特别卡，所以我建议：</p>
<ul>
<li>直接购买Mac系列产品；</li>
<li>直接裸机装苹果系统，俗称<strong>黑苹果</strong>；</li>
</ul>
<h4 id="使用VMware-Workstation"><a href="#使用VMware-Workstation" class="headerlink" title="使用VMware Workstation"></a>使用VMware Workstation</h4><ul>
<li><a href="http://bbs.feng.com/read-htm-tid-10389424.html" target="_blank" rel="external">OS X 10.11.4 15E65 原版安装U盘镜像（百度云分享）</a><ul>
<li><a href="http://pan.baidu.com/s/1i4PbPGx" target="_blank" rel="external">OS X Yosemite</a>，密码：<code>eqjm</code>，内含<code>unlocker203.zip</code>、<code>darwin6.0.3.zip</code>；</li>
<li><a href="http://pan.baidu.com/s/1cafzJo" target="_blank" rel="external">OS X El Capitan</a>，密码：<code>tjpi</code>；</li>
</ul>
</li>
<li><a href="http://jingyan.baidu.com/article/ff411625b9011212e48237b4.html" target="_blank" rel="external">VMware 11安装Mac OS X 10.10</a></li>
</ul>
<p>遇到的问题：</p>
<ul>
<li>不能验证这个“安装 OS X El Capitan”应用程序副本。它在下载过程中可能已遭破坏或篡改。<ul>
<li>解决办法是修改系统时间到15年：<code>sudo date 122501112015.20</code></li>
<li><a href="https://discussionschinese.apple.com/thread/77105" target="_blank" rel="external">问:不能验证这个“安装 OS X El Capitan”应用程序副本。它在下载过程中可能已遭破坏</a></li>
<li><a href="http://tieba.baidu.com/p/4186921833" target="_blank" rel="external">求助大神 不能验证 安装OS X Ei Capitan</a></li>
</ul>
</li>
</ul>
<h4 id="使用VirtualBox"><a href="#使用VirtualBox" class="headerlink" title="使用VirtualBox"></a>使用VirtualBox</h4><ul>
<li><a href="http://bbs.feng.com/read-htm-tid-9908410.html" target="_blank" rel="external">[APP开发] 在 Win 7或8 下使用 VirtualBOX 虚拟机安装 OS X 10.11 El Capitan 及 Xcode 7.0 </a></li>
<li><a href="http://ibiji.org/post/26.html" target="_blank" rel="external">VirtualBox安装OS X El Capitan笔记</a></li>
</ul>
<p>安装方式更简单，源文件获取方式同“使用VMware Workstation”。</p>
<p>遇到的问题：<br>(1) 虚拟机分辨率太小，不足以全屏</p>
<pre><code>- [How To Change Display Resolution On OS X (VirtualBox)](https://www.youtube.com/watch?v=0ws3gHc0k70) 
</code></pre><p>具体的操作过程如下：<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 进入VirtualBox的安装目录，我的是（C:\Program Files\Oracle\VirtualBox）</div><div class="line">&gt; <span class="built_in">cd</span> "C:\Program Files\Oracle\VirtualBox"</div><div class="line"></div><div class="line"># 以管理员权限运行<span class="built_in">CMD</span>，然后运行下面的命令</div><div class="line"># 参数说明</div><div class="line"># OSXElCapitan：虚拟机名称</div><div class="line"># N：Where N can be one of <span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> referring to the <span class="number">640</span>*<span class="number">480</span>, <span class="number">800</span>*<span class="number">600</span>, <span class="number">1024</span>*<span class="number">768</span>, <span class="number">1280</span>*<span class="number">1024</span>, <span class="number">1440</span>*<span class="number">900</span>, <span class="number">1900</span>*<span class="number">1200</span></div><div class="line">&gt; VBoxManage setextradata "OSXElCapitan"  VBoxInternal2/EfiGopMode <span class="number">5</span></div><div class="line"></div><div class="line"># 完成设置时重启VirtualBox</div></pre></td></tr></table></figure></p>
<h2 id="几款虚拟机软件截图对比"><a href="#几款虚拟机软件截图对比" class="headerlink" title="几款虚拟机软件截图对比"></a>几款虚拟机软件截图对比</h2><h4 id="VMware-Workstation"><a href="#VMware-Workstation" class="headerlink" title="VMware Workstation"></a>VMware Workstation</h4><p>VMware Workstation Play<br><img src="/images/virtual-machine-use-experience/1.png" title="VMware Workstation Play"></p>
<p>VMware Workstation Pro<br><img src="/images/virtual-machine-use-experience/2.png" title="VMware Workstation Pro"></p>
<h4 id="VirtualBox-1"><a href="#VirtualBox-1" class="headerlink" title="VirtualBox"></a>VirtualBox</h4><img src="/images/virtual-machine-use-experience/3.png" title="VirtualBox">
<p>OS X<br><img src="/images/virtual-machine-use-experience/5.png" title="VirtualBox OS X"></p>
<p>Ubuntu V3<br><img src="/images/virtual-machine-use-experience/6.png" title="VirtualBox Ubuntu V3"></p>
<h4 id="Parallels-Desktop"><a href="#Parallels-Desktop" class="headerlink" title="Parallels Desktop"></a>Parallels Desktop</h4><img src="/images/virtual-machine-use-experience/4.png" title="Parallels Desktop">
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到虚拟机，我最开始使用的是 &lt;strong&gt;VMware Workstation&lt;/strong&gt;（当然都是破解版），一用就是好多年；直到去年合作项目的需要，转而使用 &lt;strong&gt;VirtualBox&lt;/strong&gt;，从此基本放弃了 &lt;strong&gt;VMware Workstation&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="编程工具" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VMware Workstation" scheme="http://tanchao90.com/tags/VMware-Workstation/"/>
    
      <category term="VirtualBox" scheme="http://tanchao90.com/tags/VirtualBox/"/>
    
      <category term="Parallels Desktop" scheme="http://tanchao90.com/tags/Parallels-Desktop/"/>
    
      <category term="OS X" scheme="http://tanchao90.com/tags/OS-X/"/>
    
      <category term="macOS" scheme="http://tanchao90.com/tags/macOS/"/>
    
      <category term="Ubuntu" scheme="http://tanchao90.com/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>《THIS WAR OF MINE》（这是我的战争）</title>
    <link href="http://tanchao90.com/this-war-of-mine/"/>
    <id>http://tanchao90.com/this-war-of-mine/</id>
    <published>2016-12-19T12:39:14.000Z</published>
    <updated>2017-02-26T17:51:14.000Z</updated>
    
    <content type="html"><![CDATA[<img src="/images/this-war-of-mine/0.jpg" title="游戏开始画面">
<a id="more"></a>
<img src="/images/this-war-of-mine/00.jpg" title="游戏开始画面">
<p>上面两张图是游戏开始画面，由于手机拍不全，所以左右两边各半张；画面中间不断的冒着浓烟，右边是一个大人带着小孩的背影，旁边写着 “Fuck the War！”，有强烈的氛围感！</p>
<h2 id="为什么玩这个游戏？"><a href="#为什么玩这个游戏？" class="headerlink" title="为什么玩这个游戏？"></a>为什么玩这个游戏？</h2><p>11月20几号的某一天，在“TGP腾讯游戏平台”中看到了《THIS WAR OF MINE》，当时优惠价14元（原价68），禁不住诱惑，并且感觉画风挺不错，就了解了一下，结果发现知乎（<a href="https://www.zhihu.com/question/26834036" target="_blank" rel="external">如何评价 This War of Mine （这是我的战争）这款游戏？</a>）、<a href="http://store.steampowered.com/app/282070/" target="_blank" rel="external">Steam</a> 上都是超高评价，果断剁手一个，走上一条战争年代的求生路！</p>
<p>游戏介绍视频配音很赞，背景音乐是 <a href="http://music.163.com/#/m/song?id=26587845&amp;userid=33671420" target="_blank" rel="external">Zegarmistrz Swiatla</a>。</p>
<h2 id="我的生存经历"><a href="#我的生存经历" class="headerlink" title="我的生存经历"></a>我的生存经历</h2><p>旁边同事刚好是这个游戏的老司机，在他的指导下断断续续玩了一周多，基本熟悉了游戏，其中有一次坚持到了40天，只剩下一个女的活着，当时广播说战争快要结束了，而且我的物资很充沛，完全可以每天待在家里过日子，然后我还是勇（作）敢（死）的去了危险的地方偷东西，结果不意外，被打死了（-^-），未能活下来！</p>
<p>12月4号（星期日）来公司想着争取用一个完整的时间通关一次，最终还是坚持到战争结束了。从下午两点多玩到晚上十一点多，牺牲了两三把，终于在最后一把坚持到战争结束了，而且物资充沛、人物状态也比较好，45天之后战争结束！</p>
<p>PS:中间除过上厕所就没动过，晚饭就吃了一包零食，根本感觉不到饿(中毒不浅)，十一点多结束之后，去公司食堂吃了一个夜宵，开心的回家了！</p>
<h2 id="关于游戏"><a href="#关于游戏" class="headerlink" title="关于游戏"></a>关于游戏</h2><ul>
<li>真心的好游戏，虽然游戏内容不多，但是好多细节和氛围都到位了，很有代入感，几个小时一下子就过去了；</li>
<li>厨师不会弹吉他，还不如士兵；</li>
<li>当被交谈的人躺在床上时，别人走过去和他交谈时，有个翻转的动作很逗，感觉是bug；</li>
</ul>
<h2 id="一些Tips"><a href="#一些Tips" class="headerlink" title="一些Tips"></a>一些Tips</h2><ul>
<li>及时安慰、聊天，否则失落、悲伤很容易发展成奔溃，后果很严重；在我通关的这次，大量的时间用于互相安慰、聊天了；</li>
<li>尽量不要去攻击、杀害npc，否则自己和小伙伴又该失落、悲伤，甚至奔溃了；而且容易被打伤，既要吃药、包扎伤口，还得休息，总之伤身又伤心！</li>
<li>尽量不要明着去偷东西，很大概率会被打残或者打死，而且对最后的结局也有影响；</li>
<li>npc的提示得注意，尤其“从这里滚开”、“出去”之类的话，一定得听，否则就是被揍，俗话说：“留得青山在不愁没柴烧”，下次再找机会喽；</li>
<li>床、金属工作台、灶台、集水器、捕鼠器、火炉得尽量早的造出来，并升级到最高级，床和捕鼠器最好各两个，其他的一个足矣；酿酒器、草药工作台等物品看情况，有材料的时候可以造；</li>
<li>食物、水得规划好，尽量“非常饥饿”的时候再吃东西，尽量吃做好的饭或者罐头，胡萝卜一次可做两碗饭，比较划算；</li>
<li>武器很重要，可以防卫，也可以拿出去杀人；后期我拥有好几把枪、头盔、子弹、防弹衣等，晚上在家的人就可以自卫，基本没有被抢走东西过；</li>
<li>药品得储备一些，受伤、生病的时候必须有；</li>
<li>可以用一张纸辅助探索，记录每个场景有什么，需要带什么工具过去（比如开锁器、钢锯等），这样子伴随着探索的场景变多之后也不会乱，做到高效、有计划的探（苟）索（且）；</li>
<li>战争年代活下来是最主要的！</li>
</ul>
<h2 id="剧情概要及结局"><a href="#剧情概要及结局" class="headerlink" title="剧情概要及结局"></a>剧情概要及结局</h2><p>游戏通关之后，会有一个故事回顾和人物结局，我的故事和结局如下：</p>
<ul>
<li>倒数第三张是 <code>人物结局</code>；</li>
<li>倒数第二张是我 <code>通关手册</code>；</li>
<li>最后一张是我的美味夜宵，面包+油泼面，色香味俱全^-^！</li>
</ul>
<img src="/images/this-war-of-mine/1.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/2.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/3.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/4.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/5.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/6.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/7.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/8.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/9.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/10.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/11.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/12.jpg" title="剧情概要">
<img src="/images/this-war-of-mine/13.jpg" title="人物结局">
<img src="/images/this-war-of-mine/14.jpg" title="我的通关手册">
<img src="/images/this-war-of-mine/15.jpg" title="我的美味夜宵">
<h2 id="Fuck-the-War！"><a href="#Fuck-the-War！" class="headerlink" title="Fuck the War！"></a>Fuck the War！</h2>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/this-war-of-mine/0.jpg&quot; title=&quot;游戏开始画面&quot;&gt;
    
    </summary>
    
      <category term="游戏" scheme="http://tanchao90.com/categories/%E6%B8%B8%E6%88%8F/"/>
    
    
      <category term="游戏" scheme="http://tanchao90.com/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>2016 NBA中国赛——火箭 VS 鹈鹕 上海站</title>
    <link href="http://tanchao90.com/2016-nba-china-game-shanghai/"/>
    <id>http://tanchao90.com/2016-nba-china-game-shanghai/</id>
    <published>2016-10-24T15:33:10.000Z</published>
    <updated>2017-02-15T15:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>第一次去现场看 NBA，虽然是在中国，但还是挺值得怀念的，毕竟第一次！！！</p>
<h2 id="比赛信息"><a href="#比赛信息" class="headerlink" title="比赛信息"></a>比赛信息</h2><p>赛事：2016 NBA中国赛——火箭 VS 鹈鹕 上海站</p>
<ul>
<li>时间：2016-10-9 19:00</li>
<li>地址：上海梅赛德斯-奔驰文化中心</li>
<li>座位：看台525、512区域各一张，进去之后找空位坐到了一个区域</li>
<li>买票：在虎扑上找 jrs 买的，每张比原价贵了50</li>
</ul>
<a id="more"></a>
<img src="/images/2016-nba-china-game-shanghai/0.jpg" title="门票">
<h2 id="我的篮球故事"><a href="#我的篮球故事" class="headerlink" title="我的篮球故事"></a>我的篮球故事</h2><h4 id="初中"><a href="#初中" class="headerlink" title="初中"></a>初中</h4><p>初中那会，上体育课男生一般会打篮球、乒乓球，而我那时候身材太小，没人带着打篮球（-^-），所以只能看别人玩…</p>
<p>然而某一天上课之后，我在场的一边呆着，一个胖子同学在场的另一边，当他将球扔过全场的时候，我积（冲）极（动）的跑过去接，连胳膊、手腕都不带弯的，结果可想而知：手腕扭伤了；回家还不敢告诉爸妈，但异常的肢体反应还是被他们发现了，就这样恢复了好几个月。后来接触篮球多了才明白，当时应该用手腕和胳膊弯曲做缓冲的，真是 Too young too naive！</p>
<p>这就是我关于篮球最早的记忆。</p>
<h4 id="高中"><a href="#高中" class="headerlink" title="高中"></a>高中</h4><p>上高中之后，体育课偶尔会跟着大家玩玩篮球，但是玩的不多，三年下来，水平连入门都谈不上，但对篮球有了比较大的兴趣；总的来说，关于篮球在高中没什么特别的记忆。</p>
<p>PS：从高一到高三，尤其高二之后，我个子长了不少，直接突破了175，目前差不多179的样子；较多接触篮球基本是在个子长高之后#-#！</p>
<h4 id="大学"><a href="#大学" class="headerlink" title="大学"></a>大学</h4><p>日子很慢，时间很快，8年前（2008）的夏末秋初，父亲送我来到东营这座城市，从此开始了上大学的生活。</p>
<p>入学第一件事就是军训，那是一段艰苦又美好的日子，连长教我们唱<a href="http://music.163.com/#/m/song?id=29023808&amp;userid=33671420" target="_blank" rel="external">《当你的秀发拂过我的钢枪》</a>的画面就像在昨天；</p>
<p>那年中秋（2008.9.14）刚好在军训期间，这一天学校安排我们进行 20KM 的徒步拉练；凌晨三点多我们从学校出发，路灯点缀着黑夜，我们穿梭在城市的街道，大约早晨八九点钟的时候再次回到学校，记忆中当时大家并没有喊累，反而有点激情高涨；</p>
<p>军训的最后一天，例行大阅兵，经历了最难忘的一天；记忆中那天中午开始，天空就布满了乌云，下午当我们刚列好阵列，整备接下来的阅兵仪式时，天空下起了雨，雨越下越大，然后领导决定省掉一些环节，尽量压缩阅兵时间；队伍环操场步行一圈之后，依次列开，校长开始检阅；当我们的山红红校长（女）走下主席台，进入倾盆大雨的操场时，工作人员在身后为她撑起了一把伞，可就在撑起的一瞬间，山校长让他们离开了；此时，山校长和我们一起站在雨中，雨滴打在我们每一个人的脸上，焕发出了大家更大的热情，操场不断响起了：“同志们好”-“首长好”、“同志们辛苦了”-“为人民服务”，在这嘹亮的口号中，校长依次走过每一个阵列，检阅着每一个人，今天我们既是军人、又是学生；最后，在一声“解散”之后，大家开始奔向自己的宿舍，此时操场的积水已经可以淹没鞋底了，水花在奔跑的人群中四处飞舞，像是在给大家鼓掌；</p>
<p>回到宿舍之后，宿舍6个人拍了一张照，至今还留在我的电脑里。<br><img src="/images/2016-nba-china-game-shanghai/1.jpg" title="211宿舍的6个少年"></p>
<p>下面是雨中的山校长！<br><img src="/images/2016-nba-china-game-shanghai/2.jpg" title="雨中的山校长"></p>
<p>这一天是难忘的、是激动的，当时从内心深处发出了强烈的感叹：“能来这里上学太对了，这是一个不一样的地方！”</p>
<p>咳咳，感觉写成了小说的感觉，回归主题，通过军训的日子，宿舍、隔壁宿舍、班级同学都有了基本的认识和了解，这里面就包括以后的篮球兄弟，在他们的带领下我正真开始了打篮球的日子。</p>
<h4 id="23、24、12-三人组"><a href="#23、24、12-三人组" class="headerlink" title="23、24、12 三人组"></a>23、24、12 三人组</h4><p>入学后的某一天，老姜、老潘、鑫哥和我四人去定制球衣，每个人选了一个号码，老姜23号（小皇帝）、老潘24号（科比）、鑫哥99号（不知道是谁），他们帮我选了12号（魔兽），从此我被成为了一个魔兽球迷！！！从 <strong>魔术-&gt;湖人-&gt;火箭-&gt;老鹰</strong> 一路看过来。</p>
<p>记得有了球衣之后，鑫哥只打了几次，剩下的日子基本都是老姜、老潘带着我玩，一起玩的还有小弟、西毒、运政等；就这样从东营打到青岛，一直到本科毕业，然后各奔东西；曾经的场地、岁月永远留在了内心深处。<br><img src="/images/2016-nba-china-game-shanghai/3.jpg" title="XX"></p>
<p>本科四年，我从不会打球到会打球，从一个人到一帮兄弟，从一张白纸到一个程序员，这是最值得怀念的四年，感谢遇到的每个人。</p>
<h2 id="NBA-中国赛"><a href="#NBA-中国赛" class="headerlink" title="NBA 中国赛"></a>NBA 中国赛</h2><p>今年由于时间、地点都比较方便，就拉着小白一起去现场看了，也算是满足一下自己的小心愿。</p>
<p><strong>PS：</strong>我十一回了一趟家里，比赛的前一晚还在西安，当时吃饭吃坏肚子了，上吐下泻，都快拉虚脱了，由于比赛、上班都没法请假了，所以硬扛着坐火车去了上海，在<code>口服补液盐</code>、<code>氧佛沙星胶囊</code>的帮助下总算恢复过来了，当时有点死里逃生的感觉。对于拉肚子如下雨的情况，强烈推荐<code>口服补液盐</code>，能很快的帮助身体恢复，补充水分和能量。</p>
<p>现场最大的感受是气氛比较好；还有现场和电视里面看直播的感觉不一样，虽然买的座位比较远，但是场上的全局感会更强烈；此外，当时还建立了一个微信群，从火箭区拉了不少人，现在群里还有五六十人，平时大家在里面侃球、扯淡，也挺有意思。其他也没特别的感受，看看后面的照片吧。</p>
<h4 id="球场外"><a href="#球场外" class="headerlink" title="球场外"></a>球场外</h4><p>我大概下午两点多到达<code>梅赛德斯-奔驰文化中心</code>，当时天气还不错，就在周边逛了一下，拍了下面的照片，其中场馆很漂亮！</p>
<img src="/images/2016-nba-china-game-shanghai/6.jpg" title="场外Adidas的广告，帅">
<img src="/images/2016-nba-china-game-shanghai/7.jpg" title="场馆下面的比赛海报">
<img src="/images/2016-nba-china-game-shanghai/8.jpg" title="Adidas球衣">
<img src="/images/2016-nba-china-game-shanghai/9.jpg" title="球衣模特">
<img src="/images/2016-nba-china-game-shanghai/10.jpg" title="球衣模特">
<img src="/images/2016-nba-china-game-shanghai/11.jpg" title="梅赛德斯-奔驰文化中心">
<img src="/images/2016-nba-china-game-shanghai/12.jpg" title="黄浦江边的风景">
<img src="/images/2016-nba-china-game-shanghai/13.jpg" title="球馆旁边的建筑">
<img src="/images/2016-nba-china-game-shanghai/14.jpg" title="梅赛德斯-奔驰文化中心全景">
<img src="/images/2016-nba-china-game-shanghai/15.jpg" title="登哥的球迷">
<img src="/images/2016-nba-china-game-shanghai/16.jpg" title="梅赛德斯-奔驰文化中心夜景">
<img src="/images/2016-nba-china-game-shanghai/17.jpg" title="梅赛德斯-奔驰文化中心夜景">
<h4 id="球场内"><a href="#球场内" class="headerlink" title="球场内"></a>球场内</h4><p>六点多我和小白入场，进去之后我们直奔一个区域，本来是准备找人换座位的，结果发现有空位，意外的惊喜，然后就找空位坐在一起看了一晚。</p>
<img src="/images/2016-nba-china-game-shanghai/18.jpg" title="赛前热身">
<img src="/images/2016-nba-china-game-shanghai/19.jpg" title="赛前热身">
<img src="/images/2016-nba-china-game-shanghai/20.jpg" title="球员介绍">
<img src="/images/2016-nba-china-game-shanghai/21.jpg" title="跳球">
<img src="/images/2016-nba-china-game-shanghai/22.jpg" title="火箭发边线球">
<img src="/images/2016-nba-china-game-shanghai/23.jpg" title="暂停">
<h4 id="赛后"><a href="#赛后" class="headerlink" title="赛后"></a>赛后</h4><p>由于我第二天要上班，所以买了连夜回去的火车票。比赛十点多结束后，我和小白各回各家，我也是运气好，坐上了最后一班去上海南站的地铁，在南站还碰到了一起回浙江方向的球迷。</p>
<img src="/images/2016-nba-china-game-shanghai/24.jpg" title="上海南站遇到的登哥球迷">
<img src="/images/2016-nba-china-game-shanghai/25.jpg" title="上海南站候车室">
<h2 id="CBA"><a href="#CBA" class="headerlink" title="CBA"></a>CBA</h2><p>2015年12月18日，和方神以及他的两个同学去<code>杭州·广厦体育馆</code>看了<code>浙江广厦控股</code>VS<code>福建泉州银行</code>的比赛，这是第一次去现场看篮球比赛，还挺兴奋的。</p>
<img src="/images/2016-nba-china-game-shanghai/26.jpg" title="球票">
<img src="/images/2016-nba-china-game-shanghai/27.jpg" title="罚球">
<img src="/images/2016-nba-china-game-shanghai/28.jpg" title="球馆上空的球员介绍">
<img src="/images/2016-nba-china-game-shanghai/29.jpg" title="中场表演，小学生朗诵">
<img src="/images/2016-nba-china-game-shanghai/30.jpg" title="下半场开始前的热身">
<p>记忆中当时的感受大概有下面几个：</p>
<ul>
<li>场馆有点小，硬件设施很一般</li>
<li>外援水平确实高</li>
<li>林志杰比大陆球员水平高不少</li>
<li>球场活动比较没劲，氛围一般</li>
</ul>
<p>记得去年公司举行秋季运动会的时候，还和方神约好一起报名参加今年公司秋季运动会的篮球赛，可计划不如变化，今年三月份方神就跳槽走了；从那以后我把周内打球改到了周末打球，基本坚持每周一次，每次去都能碰到常打的同事，大家慢慢成了球场的熟悉人！</p>
<h2 id="畅想"><a href="#畅想" class="headerlink" title="畅想"></a>畅想</h2><p>除过篮球，平时也没什么特别的爱好，希望能将每周一次的篮球运动坚持下去！</p>
<p>希望未来有机会去美帝看看，感受一下他们的生活，再去NBA现场看一次比赛！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一次去现场看 NBA，虽然是在中国，但还是挺值得怀念的，毕竟第一次！！！&lt;/p&gt;
&lt;h2 id=&quot;比赛信息&quot;&gt;&lt;a href=&quot;#比赛信息&quot; class=&quot;headerlink&quot; title=&quot;比赛信息&quot;&gt;&lt;/a&gt;比赛信息&lt;/h2&gt;&lt;p&gt;赛事：2016 NBA中国赛——火箭 VS 鹈鹕 上海站&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;时间：2016-10-9 19:00&lt;/li&gt;
&lt;li&gt;地址：上海梅赛德斯-奔驰文化中心&lt;/li&gt;
&lt;li&gt;座位：看台525、512区域各一张，进去之后找空位坐到了一个区域&lt;/li&gt;
&lt;li&gt;买票：在虎扑上找 jrs 买的，每张比原价贵了50&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="吃喝玩乐" scheme="http://tanchao90.com/categories/%E5%90%83%E5%96%9D%E7%8E%A9%E4%B9%90/"/>
    
    
      <category term="NBA" scheme="http://tanchao90.com/tags/NBA/"/>
    
      <category term="CBA" scheme="http://tanchao90.com/tags/CBA/"/>
    
  </entry>
  
  <entry>
    <title>G20 黄山、千岛湖四日游</title>
    <link href="http://tanchao90.com/g20-huangshan/"/>
    <id>http://tanchao90.com/g20-huangshan/</id>
    <published>2016-10-15T02:00:00.000Z</published>
    <updated>2016-10-15T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>奇峰云海峥嵘，苍松破壁挺立。<br>观止三都景色，无愧名山第一！</p>
<footer><strong>《咏黄山》 周扬</strong><cite><a href="http://www.zbyw.cn/gushi/huangshan.html/" target="_blank" rel="external">描写黄山的诗句</a></cite></footer></blockquote>
<p>一次说走就走的旅行，计划近乎没有，但旅途顺利、惊喜不断，玩得很爽！</p>
<a id="more"></a>
<h2 id="说走就走"><a href="#说走就走" class="headerlink" title="说走就走"></a>说走就走</h2><p>在杭州召开 G20 之际，为了响应“办好 G20，当（赶）好（走）东道主”的政府号召，公司放假两天，加上周末刚好四天假期，所以准备去周边玩一次。</p>
<p>由于黄山免门票，而且离杭州不远，很顺利的被选为了此次出行的目的地，于是说走就走，在基本无规划的情况下完成了一次比较完美的旅行^-^。</p>
<p>我是拉着我们组的一个同事去的，在计划不足、准备不充分的情况下，走了一路，惊喜了一路。</p>
<p>在去的路上还遇到了项目组的另外一个同事和他的小伙伴（<code>惊喜1</code>），到高铁站之后，我俩跟着他们的路线一直走到了云谷寺，然后他们选择坐缆车上山，我们步行上山；当时他们给了我俩一个地图（电子版），在后面的登山中起了很大的帮助，非常感谢。</p>
<p><strong>PS：</strong>可能很多人都是基于上面的想法，所以当天来黄山的游客绝大多数来自杭州，并且当天黄山上的游客数量竟然达到了景区的最大容量，不得不感叹中国人真是多！</p>
<h2 id="行程安排"><a href="#行程安排" class="headerlink" title="行程安排"></a>行程安排</h2><p>由于我们在放假前几天才计划了这次出行，所以一切都是匆忙的，没有详细的游玩路线，只是大概规划了此次的主要方向和时间安排，甚至去的火车票都是临时抢到的，下面是最终游玩的路线和安排。</p>
<p>PS：在下面所有的步行阶段，我俩的速度相对比较快，所以用时比较短，大家可适当放宽时间，比如可以增加到1.5倍。</p>
<h4 id="Day1-9-2"><a href="#Day1-9-2" class="headerlink" title="Day1 - 9.2"></a>Day1 - 9.2</h4><ul>
<li><code>杭州东 -&gt; 黄山北站</code> 坐高铁G1509（09:49-13:15），到站之后去旁边的汽车站买票（包括景区大巴的票）乘车</li>
<li><code>黄山北站 -&gt; 汤口镇-黄山风景区换乘中心</code> 坐大巴</li>
<li><code>汤口镇-黄山风景区换乘中心 -&gt; 云谷寺</code> 坐景区大巴</li>
<li><code>云谷寺 -&gt; 仙人翻桌 -&gt; 仙人指路 -&gt; 白鹅岭 -&gt; 北海宾馆</code> 步行，在云谷寺吃了晚饭（泡面+烤肠）后步行上山，也可以乘坐缆车；我俩爬山的速度可谓是飞快，一路赶超别人，五点多开始，七八点就到达北海饭店了</li>
<li><code>北海宾馆 夜宿帐篷</code> 去之前我们没有订到房间和帐篷，做好了在外面露宿一晚的准备，幸运的是晚上我们在酒店大堂休息的时候，一个工作人员拿出了私人帐篷租给了我们（<code>惊喜2</code>），真是两全其美，他赚了钱，我们睡了觉！！</li>
</ul>
<h4 id="Day2-9-3"><a href="#Day2-9-3" class="headerlink" title="Day2 - 9.3"></a>Day2 - 9.3</h4><ul>
<li><code>北海宾馆 -&gt; 光明顶</code> 步行，大概早上三四点起床，直奔光明顶看日出</li>
<li><code>光明顶 -&gt; 白云宾馆</code> 步行，在白云宾馆吃了早餐（粥、咸菜、馒头），感觉挺好吃，一下就满血复活了</li>
<li><code>白云宾馆 -&gt; 海心亭</code> 步行，到达海心亭之后，我两觉得体力充足，没必要现在就去看迎客松、下山，于是有了西海大峡谷之行</li>
<li><code>海心亭 -&gt; 卧石披云 -&gt; 步仙桥 -&gt; 三溪口 -&gt; 西海大峡谷观光缆车排云溪站</code> 步行，这一路道路险峻，游客稀少，但风景非常漂亮、壮观，这在其他地方是看不到的，非常值得走一趟（<code>惊喜3</code>）</li>
<li><code>西海大峡谷观光缆车排云溪站 -&gt; 西海大峡谷观光缆车天海站 -&gt; 白云宾馆</code> 坐缆车上山，回到山顶，上来之后发现还是在白云宾馆附近；此时大概是上午九十点，也就是说西海大峡谷一趟大概花了三个小时左右</li>
<li><code>白云宾馆 -&gt; 海心亭 -&gt; 鳌鱼洞 -&gt; 百步云梯 -&gt; 迎客松</code> 步行，这一路人巨多，不长的路却走了好久；到达迎客松大概是中午，逛了逛，拍了点照片，随便吃了点东西就动身下山了</li>
<li><code>迎客松 -&gt; 玉屏索道 -&gt; 慈光阁</code> 坐玉屏索道下山</li>
<li><code>慈光阁 -&gt; 汤口镇-黄山风景区换乘中心</code> 坐大巴，到达汤口镇大概是下午两点左右的样子</li>
<li><code>汤口镇-黄山风景区换乘中心 -&gt; 宏村</code> 打车，原计划是要在宏村住一晚的，到了之后发现宏村没啥玩的，半小时足够逛完，就去酒店退了房间，准备直奔千岛湖；在宏村游玩等待的时间大概是一个多小时，四五点的时候打到了去黄山市的车（最后直接去了深渡港）</li>
<li><code>宏村 -&gt; 深渡港</code> 打车，本来想直接打顺风车去千岛湖，无奈打不到，最后决定先回黄山市，第二天去千岛湖；和我们一车回黄山市的其他三个人听说我们要去千岛湖玩的时候，也想一起去（<code>惊喜4</code>）；司机师傅听到我们的计划之后，直接给我们建议了游玩路线，那就是直接去深渡港，在那里过夜，第二天早上坐船去千岛湖，大家沟通之后就让师傅直接把我们拉到深渡港了，师傅非常热心，路上还帮我们联系了酒店（住宿环境还不错）（<code>惊喜5</code>）</li>
<li><code>深渡港 夜宿酒店</code> 晚上酒店老板帮我们买了第二天的船票和旅游门票，第二天早上还开车送我们过去，非常感谢</li>
</ul>
<h4 id="Day3-9-4"><a href="#Day3-9-4" class="headerlink" title="Day3 - 9.4"></a>Day3 - 9.4</h4><ul>
<li><code>深渡港 -&gt; 梅峰 -&gt; 千岛湖中心-湖区-游客中心</code> 坐船（船上的午餐建议不要预定，真的不好吃），沿途风景非常漂亮，两边是郁郁葱葱的山，中间是清澈的江水，迎面吹着凉爽的风，非常惬意，未曾想到的体验（<code>惊喜6</code>）；到达千岛湖区域之后，不断的下船登岛游玩，梅峰、锁岛、月光岛等，每个岛都有一个主题，尤其梅峰上面看千岛的风景，特别壮观</li>
<li><code>千岛湖中心-湖区-游客中心 -&gt; 林海酒店</code> 坐工交，住宿在林海酒店是因为：其他三个小伙伴有个同事家是千岛湖的，那个同事建议住在林海酒店，晚饭去旁边的餐馆吃剁椒鱼头（类似农家乐，菜口味还可以）（<code>惊喜7</code>）</li>
<li><code>夜游淳安县</code> 吃完晚饭之后，那个同事带我们逛了一下淳安县城，城市建设的挺漂亮；</li>
<li><code>淳安县 夜宿酒店</code></li>
</ul>
<h4 id="Day4-9-5"><a href="#Day4-9-5" class="headerlink" title="Day4 - 9.5"></a>Day4 - 9.5</h4><ul>
<li><code>林海酒店 -&gt; 千岛湖客运中心 -&gt; 杭州东站汽车站</code> 坐大巴，早上睡了个懒觉，起床之后吃完早餐就直接去车站坐车回杭州了</li>
</ul>
<h4 id="同事给的地图"><a href="#同事给的地图" class="headerlink" title="同事给的地图"></a>同事给的地图</h4><p>个人感觉这张地图挺好，至少对我们起了很大的帮助。<br><img src="/images/g20-huangshan/map.jpg" title="黄山路线图"></p>
<h4 id="花费明细"><a href="#花费明细" class="headerlink" title="花费明细"></a>花费明细</h4><p>我俩人均花费大概1500左右的样子，黄山、宏村景点都免门票，其他大概如下：</p>
<ul>
<li>住宿：约三百多，帐篷150+深渡港酒店100+千岛湖酒店70</li>
<li>交通：约五六百，高铁+大巴+打车</li>
<li>千岛湖门票：貌似一百多</li>
<li>吃饭：两三百吧</li>
</ul>
<h2 id="看到的美景"><a href="#看到的美景" class="headerlink" title="看到的美景"></a>看到的美景</h2><p>这部分主要晒一下当时拍的照片，尤其黄山和千岛湖的风景，真是漂亮。</p>
<h4 id="夜爬黄山"><a href="#夜爬黄山" class="headerlink" title="夜爬黄山"></a>夜爬黄山</h4><p>下图是云谷寺入口，下山排队往外走的人巨多，感觉能排上百米长：<br><img src="/images/g20-huangshan/1.jpg" title="云谷寺入口"></p>
<p>下图是在登山口的合照，我和同事+另一个同事和他的小伙伴，拍完照后我们爬山，他们坐缆车：<br><img src="/images/g20-huangshan/2.jpg" title="合照"></p>
<p>爬山途中的风景：<br><img src="/images/g20-huangshan/3.jpg" title="爬山途中的风景"></p>
<p>下图就是北海宾馆门口的夜景，晚上我俩的帐篷就搭在宾馆门口右边的台阶上：<br><img src="/images/g20-huangshan/4.jpg" title="北海宾馆外面的夜景"></p>
<h4 id="光明顶观日出"><a href="#光明顶观日出" class="headerlink" title="光明顶观日出"></a>光明顶观日出</h4><p>早上三四点钟我们起床，然后直奔光明顶看日出，到光明顶的路旁有很多游客睡觉的帐篷；到达光明顶之后，等候的人已经不少了，大家都怀着期待、激动的心情等着。</p>
<p>大概一个多小时之后，五点多快六点的时候太阳终于升起来了，成功看到日出，遗憾的是当时的季节看不到云海。</p>
<p>等待的人群：<br><img src="/images/g20-huangshan/5.jpg" title="等待的人群"></p>
<p>粉红色的太阳渐渐升起：<br><img src="/images/g20-huangshan/6.jpg" title="太阳渐渐升起"></p>
<p>太阳全部露出云层，变为了火焰的颜色，这时候看着还不刺眼，再升高一点之后就会非常刺眼，没法直视：<br><img src="/images/g20-huangshan/7.jpg" title="太阳升起"></p>
<p>光明顶全貌：<br><img src="/images/g20-huangshan/8.jpg" title="光明顶"></p>
<h4 id="西海大峡谷"><a href="#西海大峡谷" class="headerlink" title="西海大峡谷"></a>西海大峡谷</h4><p>下面是西海大峡谷沿途的风景，非常壮观：<br><img src="/images/g20-huangshan/9.jpg"><br><img src="/images/g20-huangshan/10.jpg"><br><img src="/images/g20-huangshan/11.jpg"><br><img src="/images/g20-huangshan/12.jpg"><br><img src="/images/g20-huangshan/13.jpg"><br><img src="/images/g20-huangshan/14.jpg" title="卧石披云"><br><img src="/images/g20-huangshan/15.jpg"><br><img src="/images/g20-huangshan/16.jpg" title="逆光照"><br><img src="/images/g20-huangshan/17.jpg" title="西海大峡谷观光缆车"></p>
<h4 id="鳌鱼洞-gt-百步云梯-gt-迎客松-gt-玉屏索道下山"><a href="#鳌鱼洞-gt-百步云梯-gt-迎客松-gt-玉屏索道下山" class="headerlink" title="鳌鱼洞 -&gt; 百步云梯 -&gt; 迎客松 -&gt; 玉屏索道下山"></a>鳌鱼洞 -&gt; 百步云梯 -&gt; 迎客松 -&gt; 玉屏索道下山</h4><p>这一路路不长，但人巨多，走了很久，有些路段也非常险峻，比如百步云梯：<br><img src="/images/g20-huangshan/18.jpg" title="百步云梯"><br><img src="/images/g20-huangshan/19.jpg" title="路上挤满了人"><br><img src="/images/g20-huangshan/20.jpg" title="迎客松"><br><img src="/images/g20-huangshan/21.jpg" title="坐玉屏索道下山"></p>
<h4 id="宏村"><a href="#宏村" class="headerlink" title="宏村"></a>宏村</h4><p>来之前朋友就说宏村没什么玩的，心里已经有了思想准备，可万万没想到的是，比我预期的还没意思很多，半个小时就可以逛完，能看的过去的就是进门水塘旁边的风景了，其他老房子基本全部是店铺，而且破破旧旧，乱起八糟，不知道是怎么评为国家五A级景点的：<br><img src="/images/g20-huangshan/22.jpg" title="宏村石碑"><br><img src="/images/g20-huangshan/23.jpg" title="宏村景区入口"><br><img src="/images/g20-huangshan/24.jpg" title="池塘旁边的风景"><br><img src="/images/g20-huangshan/25.jpg" title="池塘旁边的风景"><br><img src="/images/g20-huangshan/26.jpg" title="画画的姑娘"></p>
<h4 id="深渡港"><a href="#深渡港" class="headerlink" title="深渡港"></a>深渡港</h4><p>在深渡港吃了一个晚饭，住了一晚，第二天早上出发的时候拍了几张码头的照片：<br><img src="/images/g20-huangshan/27-0.jpg" title="同行的小伙伴，从宏村到深渡港途中"><br><img src="/images/g20-huangshan/27.jpg" title="住宿和吃晚饭的地方"><br><img src="/images/g20-huangshan/28.jpg" title="深渡港码头"><br><img src="/images/g20-huangshan/29.jpg" title="深渡港码头的景色"><br><img src="/images/g20-huangshan/30.jpg" title="深渡港码头的景色"></p>
<h4 id="深渡港-gt-千岛湖"><a href="#深渡港-gt-千岛湖" class="headerlink" title="深渡港 -&gt;  千岛湖"></a>深渡港 -&gt;  千岛湖</h4><p>早晨坐船（我们的船叫“旺华”号）从深渡港出发，沿途风景秀丽，不觉想起了“朝辞白帝彩云间,千里江陵一日还。两岸猿声啼不住,轻舟已过万重山。”；进入千岛湖景区之后，岛屿慢慢多了起来，水域也变得开阔了，途中登上了梅峰、锁岛等岛屿游玩，全身心放松的一天：<br><img src="/images/g20-huangshan/31.jpg" title="江水上的风景"><br><img src="/images/g20-huangshan/32.jpg" title="江水上的风景"><br><img src="/images/g20-huangshan/33.jpg" title="船荡起的水花"><br><img src="/images/g20-huangshan/34.jpg" title="红旗飘扬"><br><img src="/images/g20-huangshan/35.jpg" title="应该是铁路"><br><img src="/images/g20-huangshan/36.jpg" title="梅峰山下"><br><img src="/images/g20-huangshan/37.jpg" title="梅峰观千岛"><br><img src="/images/g20-huangshan/38.jpg" title="梅峰观千岛"><br><img src="/images/g20-huangshan/39.jpg" title="锁岛"><br><img src="/images/g20-huangshan/40.jpg" title="千岛湖风景"><br><img src="/images/g20-huangshan/41.jpg" title="千岛湖风景"><br><img src="/images/g20-huangshan/42.jpg" title="千岛湖旅游咨询服务中心"></p>
<h4 id="回杭州"><a href="#回杭州" class="headerlink" title="回杭州"></a>回杭州</h4><p>这是汽车站商店里卖的鱼：<br><img src="/images/g20-huangshan/43.jpg" title="汽车站商店里面的鱼"></p>
<p>给舍友带的吃的，回家后发现大多数不好吃：<br><img src="/images/g20-huangshan/44.jpg" title="给舍友买的吃的"></p>
<p>最后晒一张这一趟的车票、门票：<br><img src="/images/g20-huangshan/45.jpg" title="所有的票"></p>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>一趟完美的旅行，希望以后有机会再去。<br>PS：个人感觉 <code>五一 -&gt; 十一</code> 期间去都是非常好的季节，天气晴朗，景色秀丽。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;奇峰云海峥嵘，苍松破壁挺立。&lt;br&gt;观止三都景色，无愧名山第一！&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;《咏黄山》 周扬&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://www.zbyw.cn/gushi/huangshan.html/&quot;&gt;描写黄山的诗句&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;一次说走就走的旅行，计划近乎没有，但旅途顺利、惊喜不断，玩得很爽！&lt;/p&gt;
    
    </summary>
    
      <category term="旅行" scheme="http://tanchao90.com/categories/%E6%97%85%E8%A1%8C/"/>
    
    
      <category term="旅行" scheme="http://tanchao90.com/tags/%E6%97%85%E8%A1%8C/"/>
    
      <category term="黄山" scheme="http://tanchao90.com/tags/%E9%BB%84%E5%B1%B1/"/>
    
      <category term="千岛湖" scheme="http://tanchao90.com/tags/%E5%8D%83%E5%B2%9B%E6%B9%96/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 使用小结</title>
    <link href="http://tanchao90.com/sublime/"/>
    <id>http://tanchao90.com/sublime/</id>
    <published>2016-04-18T14:00:00.000Z</published>
    <updated>2016-04-30T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Sublime Text</strong> 是我工作以来使用最多的编辑器，总得来说很好用，简单、简洁、速度快，很适合写Python等脚本语言；<br>本文对我用到的东西做了简单总结，主要包括下面几个方面，通过这些不仅可以提高编程效率，而且可以让编程变得轻松有趣：</p>
<ul>
<li><a href="#插件">插件</a></li>
<li><a href="#个性化配置">个性化配置</a></li>
<li><a href="#快捷键">快捷键</a></li>
</ul>
<a id="more"></a>
<h2 id="Sublime-Text"><a href="#Sublime-Text" class="headerlink" title="Sublime Text"></a>Sublime Text</h2><h4 id="Sublime-Text-1"><a href="#Sublime-Text-1" class="headerlink" title="Sublime Text"></a><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text</a></h4><blockquote>
<p>Sublime Text is a sophisticated text editor for code, markup and prose.<br>You’ll love the slick user interface, extraordinary features and amazing performance.</p>
</blockquote>
<h4 id="我的配置文件"><a href="#我的配置文件" class="headerlink" title="我的配置文件"></a>我的配置文件</h4><p>由于 Sublime 的配置文件是纯文本，所以可以很方便的备份，并且做版本管理，我的配置文件保存在<a href="https://github.com/tanchao90/sublime-config" target="_blank" rel="external">个人GitHub</a>上，欢迎查看、fork，使用非常简单，直接clone到本地对应目录，Sublime会自动安装需要的插件，总之一句话：妈妈再也不用担心我配置Sublime了。</p>
<h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul>
<li><a href="https://github.com/jikeytang/sublime-text" target="_blank" rel="external">sublime-text</a> 总结详细、全面、排版漂亮</li>
<li><a href="http://www.imooc.com/learn/333" target="_blank" rel="external">快乐的sublime编辑器</a> 系列视频，比较全面的了解Sublime</li>
</ul>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h4 id="Package-Control"><a href="#Package-Control" class="headerlink" title="Package Control"></a><a href="https://packagecontrol.io/" target="_blank" rel="external">Package Control</a></h4><p>这是为 Sublime Text 安装插件的基础，基本上所有插件都可以通过这种方式安装<br>安装方法见：<a href="https://packagecontrol.io/installation" target="_blank" rel="external">Package Control Installation</a></p>
<h4 id="SublimeCodeIntel"><a href="#SublimeCodeIntel" class="headerlink" title="SublimeCodeIntel"></a><a href="https://github.com/SublimeCodeIntel/SublimeCodeIntel" target="_blank" rel="external">SublimeCodeIntel</a></h4><blockquote>
<p>A full-featured code intelligence and smart autocomplete engine for Sublime Text.</p>
</blockquote>
<p>通过 SublimeCodeIntel 可以实现代码自动补全、函数和参数提示等功能，大大提高开发效率<br><strong>注：</strong>安装时可能会出现安装不成功的情况，卸载重新安装即可<br>具体配置和说明文档可参考 GitHub 上面的 ReadMe 文件，下面是我Python27的配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&quot;codeintel_language_settings&quot;: &#123;</div><div class="line">     &quot;Python&quot;: &#123; // For Windows Python 2.7</div><div class="line">         &quot;python&quot;: &quot;C:/Python27/python.exe&quot;,</div><div class="line">         &quot;pythonExtraPaths&quot;:</div><div class="line">             [</div><div class="line">                 &quot;C:/Python27/Lib&quot;,</div><div class="line">                 &quot;C:/Python27/Lib/site-packages&quot;</div><div class="line">             ],</div><div class="line">     &#125;,</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<h4 id="Python-Flake8-Lint"><a href="#Python-Flake8-Lint" class="headerlink" title="Python Flake8 Lint"></a><a href="https://github.com/dreadatour/Flake8Lint" target="_blank" rel="external">Python Flake8 Lint</a></h4><blockquote>
<p>Python Flake8 Lint is a Sublime Text 2/3 plugin for check Python files against some of the style conventions in <strong>PEP8, pydocstyle, PyFlakes, mccabe, pep8-naming, flake8-debugger and flake8-import-order</strong>.</p>
</blockquote>
<p>用于检查 Python 代码，检查范围包括语法、命名规范、文档规范等等，可以通过配置文件决定是否开启对应的检查功能，非常好用；例如许多低级的语法错误都可以通过 Flake 提前发现，大大提高 code 和 debug 效率。</p>
<h4 id="安装的其他插件"><a href="#安装的其他插件" class="headerlink" title="安装的其他插件"></a>安装的其他插件</h4><p>下面也是我目前安装的几个插件，在这里简单介绍一下：</p>
<ul>
<li><a href="https://github.com/skuroda/Sublime-AdvancedNewFile" target="_blank" rel="external">AdvancedNewFile</a> 改进Sublime中创建文件的过程，简单高效</li>
<li><a href="https://github.com/wbond/sublime_alignment" target="_blank" rel="external">Alignment</a> 等号对齐，也可以增加<code>:</code>等符号，默认快捷键：<code>Ctrl+Alt+A</code></li>
<li><a href="https://github.com/temochka/sublime-text-2-github-tools" target="_blank" rel="external">Github Tools</a> GitHub 插件</li>
<li><a href="https://github.com/revolunet/sublimetext-markdown-preview" target="_blank" rel="external">Markdown Preview</a> Markdown文件预览，支持浏览器预览、导出HTML文件等方式</li>
<li><a href="https://github.com/SublimeText-Markdown/MarkdownEditing" target="_blank" rel="external">MarkdownEditing</a> 支持用Sublime编辑Markdown文件，和专门的Markdown编辑器相比体验比较差</li>
<li><a href="https://github.com/titoBouzout/SideBarEnhancements" target="_blank" rel="external">SideBarEnhancements</a> 左侧文件目录右键菜单增强插件</li>
</ul>
<h2 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h2><p>基础的个性化配置见GitHub配置文件，如使用Tab or 空格</p>
<h4 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h4><p>这是一个看颜值的时代，编辑器也不例外，一个好的主题可以提升编码幸福感，下面是我比较喜欢的几个主题：</p>
<ul>
<li>Tomorrow-Night-Eighties</li>
<li>Material-Theme</li>
<li>Tomorrow-Night</li>
<li>Flatland Monokai</li>
<li>Flatland Dark</li>
<li>base16-eighties.dark</li>
<li>Monokai</li>
</ul>
<p>下面是对应的主题链接：</p>
<ul>
<li><a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">Tomorrow Theme</a></li>
<li><a href="https://github.com/kkga/spacegray" target="_blank" rel="external">Theme - Spacegray</a></li>
<li><a href="https://github.com/equinusocio/material-theme" target="_blank" rel="external">Material-Theme</a></li>
<li><a href="https://github.com/thinkpixellab/flatland" target="_blank" rel="external">Theme - Flatland</a></li>
<li><a href="http://colorsublime.com/" target="_blank" rel="external">ColorSublime主题网站</a></li>
<li><a href="https://gist.github.com/renz45/1854721" target="_blank" rel="external">左侧Sidebar黑色UI配置</a></li>
</ul>
<h4 id="配置指定语言的编译环境"><a href="#配置指定语言的编译环境" class="headerlink" title="配置指定语言的编译环境"></a>配置指定语言的编译环境</h4><p>通过Tools -&gt; Build System -&gt; New Build System 可以很轻松地自定义新的Build方式，下面是 Python 和 Lua 的例子</p>
<p><strong>Python</strong>: 如增加2.x版本的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;cmd&quot;: [&quot;C:/Python27/python.exe&quot;, &quot;-u&quot;, &quot;$file&quot;],</div><div class="line">    &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;,</div><div class="line">    &quot;selector&quot;: &quot;source.python&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Lua</strong>: Sublime Text 默认的Build系统中不包含Lua，需要自己添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;cmd&quot;: [&quot;lua&quot;, &quot;$file&quot;], </div><div class="line">    &quot;file_regex&quot;:&quot;^(?:lua:)?[\t](...*?):([0-9]*):?([0-9]*)&quot;, </div><div class="line">    &quot;selector&quot;:&quot;source.lua&quot; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="给鼠标右键增加“文件夹打开”功能"><a href="#给鼠标右键增加“文件夹打开”功能" class="headerlink" title="给鼠标右键增加“文件夹打开”功能"></a>给鼠标右键增加“文件夹打开”功能</h4><p>功能：Windows文件夹右键即可选择<strong>“用Sublime Text 3”</strong>打开<br>配置方法：将下面的内容保存成<strong>bat</strong>文件（如add_right_click.bat）执行即可：<strong>注意</strong>修改其中的路径<br><figure class="highlight bat"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off</div><div class="line"><span class="built_in">SET</span> st2Path=C:\Program Files (x86)\Sublime Text <span class="number">3</span>\sublime_text.exe</div><div class="line"><span class="comment">rem add it for folders</span></div><div class="line">@reg add "HKEY_CLASSES_ROOT\Folder\shell\Open with Sublime Text <span class="number">3</span>"         /t REG_SZ /v "" /d "Open with Sublime Text <span class="number">3</span>"   /f</div><div class="line">@reg add "HKEY_CLASSES_ROOT\Folder\shell\Open with Sublime Text <span class="number">3</span>"         /t REG_EXPAND_SZ /v "Icon" /d "<span class="variable">%st2Path%</span>,<span class="number">0</span>" /f</div><div class="line">@reg add "HKEY_CLASSES_ROOT\Folder\shell\Open with Sublime Text <span class="number">3</span>\command" /t REG_SZ /v "" /d "<span class="variable">%st2Path%</span> \"<span class="variable">%%1</span>\"" /f</div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>根据 2-8 原则，个人认为记住几个常用的快捷键即可，其他需要的时候Google^-^下面是我用到的一些快捷键，尤其是前面几项</p>
<h4 id="Ctrl-Shift-P"><a href="#Ctrl-Shift-P" class="headerlink" title="Ctrl+Shift+P"></a>Ctrl+Shift+P</h4><p>在弹出的搜索框中输入下面的命令即可完成对应的功能：</p>
<ul>
<li><code>Install Package</code> 搜索并安装需要的插件</li>
<li><code>List Packages</code> 显示所有已安装的插件</li>
<li><code>Remove Packages</code> 移除一个指定的插件</li>
<li><code>Upgrade Package</code> 更新一个指定的插件</li>
<li><code>Upgrade/Overwrite All Packages</code> 更新所有已安装的插件</li>
</ul>
<h4 id="Ctrl-P"><a href="#Ctrl-P" class="headerlink" title="Ctrl+P"></a>Ctrl+P</h4><p>Goto Anything功能，实现快速查找文件<br>文件名后面还可以跟随下面的参数，从而跳转到该文件中指定位置</p>
<ul>
<li><code>:+行号</code> == <code>Ctrl+G</code> 快速跳转到指定行</li>
<li><code>@+函数名</code> == <code>Ctrl+R</code> 快速找到函数</li>
<li><code>#+文本</code> 快速进行文件内文本匹配，跳转到第一个匹配的地方</li>
</ul>
<h4 id="查找-and-替换"><a href="#查找-and-替换" class="headerlink" title="查找 and 替换"></a>查找 and 替换</h4><ul>
<li><code>Ctrl+F</code> 文件内查找</li>
<li><code>Ctrl+H</code> 文件内查找并替换</li>
<li><code>Ctrl+Shift+F</code> 全局查找</li>
<li><code>Ctrl+Shift+H</code> 全局查找并替换</li>
</ul>
<h4 id="文件Tab管理"><a href="#文件Tab管理" class="headerlink" title="文件Tab管理"></a>文件Tab管理</h4><p>下面部分命令同样可以在 Chrome 浏览器中使用</p>
<ul>
<li><code>Ctrl+N</code> or <code>双击Tab栏空白区域</code> 创建新的Tab页面</li>
<li><code>Ctrl+W</code> 关闭当前Tab页面</li>
<li><code>Ctrl+Shift+T</code> 依次打开关闭的Tab页面，屡试不爽</li>
<li><code>Ctrl+Tab</code> 在打开的Tab页面之间切换</li>
</ul>
<h4 id="视图管理"><a href="#视图管理" class="headerlink" title="视图管理"></a>视图管理</h4><ul>
<li><code>Esc</code> 关闭唤出的窗口，如各种搜索框</li>
<li><code>Ctrl+K, Ctrl+B</code> 显示/关闭左侧目录树</li>
</ul>
<h4 id="格式代码"><a href="#格式代码" class="headerlink" title="格式代码"></a>格式代码</h4><ul>
<li><code>Ctrl+]</code> or <code>Tab</code> 增加缩进</li>
<li><code>Ctrl+[</code> or <code>Shift+Tab</code> 减少缩进</li>
<li><code>Ctrl+Shift+[</code> 折叠当前行所在函数</li>
<li><code>Ctrl+Shift+]</code> 展开当前行所在函数</li>
<li><code>Ctrl+K, Ctrl+1(2...)</code> 折叠所有函数，其中的数字表示函数层级</li>
<li><code>Ctrl+K, Ctrl+J</code> 展开所有函数</li>
</ul>
<h4 id="文档编辑"><a href="#文档编辑" class="headerlink" title="文档编辑"></a>文档编辑</h4><ul>
<li><code>Ctrl+/</code> 打开或关闭注释</li>
<li><code>Ctrl+Shif +V</code> 粘贴，实现完整拷贝，保持原格式</li>
<li><code>Ctrl+Shift+M</code>：选中括号（(), [], {}）里面的全部内容不包括括号</li>
<li><code>Ctrl+Enter</code> 在当前行下新建一行</li>
<li><code>Ctrl+Shift+Enter</code> 在当前行上面添加一行</li>
<li><code>Ctrl+Shift+(←或→)</code> 快速选中一行中的某一部分，连续按<strong>扩大</strong>或<strong>缩小</strong>选择范围</li>
<li><code>Ctrl+Shift+(↑或↓)</code> 交换当前行与上(下)一行</li>
<li><code>Ctrl+Shift+D</code> 可快速复制光标所在的一整行</li>
<li><code>Ctrl+Shift+K</code> 删除整行</li>
<li><code>Ctrl+K, Ctrl+U</code> 将所选内容中的字母变成大写</li>
<li><code>Ctrl+K, Ctrl+L</code> 将所选内容中的字母变成小写</li>
</ul>
<h4 id="列选择"><a href="#列选择" class="headerlink" title="列选择"></a>列选择</h4><ul>
<li><code>Shift+鼠标右键</code></li>
<li><code>鼠标中键</code></li>
<li><code>Ctrl+鼠标中键</code> 增加选择</li>
<li><code>Alt+鼠标中键</code> 减少选择</li>
<li><code>Alt+F3</code> 全选所有符合条件的单词，产生多个光标</li>
<li><code>Ctrl+D</code> 依次在满足条件的语句后面添加光标，遇到不需要添加光标的可按 <code>Ctrl+K</code> 跳过</li>
<li><code>Ctrl+A, Ctrl+Shift+L</code> 在当前文件每行末尾都添加光标</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://stackoverflow.com/questions/23730866/set-up-python-3-build-system-with-sublime-text-3" target="_blank" rel="external">Set up Python 3 build system with Sublime Text 3</a></li>
<li><a href="http://stackoverflow.com/questions/18943406/sublimecodeintel-how-to-set-path-to-python-3-installation" target="_blank" rel="external">SublimeCodeIntel - how to set path to Python 3 installation</a></li>
<li><a href="http://my.oschina.net/shede333/blog/170536" target="_blank" rel="external">Sublime Text 编辑器 插件 之 “Sublime Alignment” 详解</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_932db1950101l5oe.html" target="_blank" rel="external">Windows下使用Sublime Text 2配置Lua开发环境</a></li>
<li><a href="http://blog.csdn.net/abbuggy/article/details/7016185" target="_blank" rel="external">eclipse中格式化代码快捷键Ctrl+Shift+F失效的解决办法</a></li>
<li><a href="http://www.qiansw.com/sublime-text3%E8%AE%BE%E5%AE%9Atab%E9%94%AE%E4%B8%BA4%E4%B8%AA%E7%A9%BA%E6%A0%BC.html" target="_blank" rel="external">SUBLIME TEXT3设定TAB键为4个空格</a></li>
<li><a href="http://jingyan.baidu.com/article/7f766dafbc89f24101e1d085.html" target="_blank" rel="external">Sublime Text的列模式如何操作？</a></li>
<li><a href="http://tutorial.jingwentian.com/Sublime-Text-3-Documentation/column_selection.html" target="_blank" rel="external">列选择</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Sublime Text&lt;/strong&gt; 是我工作以来使用最多的编辑器，总得来说很好用，简单、简洁、速度快，很适合写Python等脚本语言；&lt;br&gt;本文对我用到的东西做了简单总结，主要包括下面几个方面，通过这些不仅可以提高编程效率，而且可以让编程变得轻松有趣：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#插件&quot;&gt;插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#个性化配置&quot;&gt;个性化配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#快捷键&quot;&gt;快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="编程工具" scheme="http://tanchao90.com/categories/%E7%BC%96%E7%A8%8B%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDE" scheme="http://tanchao90.com/tags/IDE/"/>
    
      <category term="Sublime" scheme="http://tanchao90.com/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>用Hexo和GitHub Pages搭建个人博客</title>
    <link href="http://tanchao90.com/hexo-github/"/>
    <id>http://tanchao90.com/hexo-github/</id>
    <published>2016-04-07T14:00:00.000Z</published>
    <updated>2017-02-15T15:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要记录我用 <strong>Hexo</strong> 和 <strong>GitHub Pages</strong> 搭建个人博客的过程，主要包括以下章节：</p>
<ul>
<li><a href="#Hexo">Hexo</a></li>
<li><a href="#我的搭建过程">我的搭建过程</a></li>
<li><a href="#博客备份">博客备份</a></li>
<li><a href="#遇到的问题">遇到的问题</a></li>
<li><a href="#命令详细说明">命令详细说明</a></li>
<li><a href="#官方文档梳理">官方文档梳理</a></li>
<li><a href="#参考文章">参考文章</a></li>
</ul>
<a id="more"></a>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><h4 id="什么是Hexo"><a href="#什么是Hexo" class="headerlink" title="什么是Hexo?"></a>什么是Hexo?</h4><ul>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo官网</a></li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="external">Hexo官网(中文)</a></li>
<li><a href="https://github.com/hexojs/hexo" target="_blank" rel="external">GitHub Hexo</a></li>
</ul>
<blockquote>
<p>快速、简洁且高效的博客框架</p>
<blockquote>
<p>超快速度<br>支持 Markdown<br>一键部署<br>丰富的插件</p>
</blockquote>
</blockquote>
<p>个人使用下来的感受是：安装、使用简单，部署方便，专注于写作，主要得益于下面几点：</p>
<ul>
<li>支持Markdown，专注于写作</li>
<li>资源管理方便，如图片支持两种管理模式</li>
<li>学习成本很低，常用的命令不超过5个</li>
<li>灵活的插件，如发布到各个托管网站</li>
<li>漂亮简洁的主题，有相关能力的还可以自己修改主题或者制作主题</li>
</ul>
<h4 id="Hexo目录结构说明"><a href="#Hexo目录结构说明" class="headerlink" title="Hexo目录结构说明"></a>Hexo目录结构说明</h4><blockquote>
<p>├── <strong>_config.yml</strong>   网站的配置信息<br>├── <strong>package.json</strong>  应用程序的信息。EJS, Stylus和Markdown renderer已默认安装<br>├── <strong>scaffolds</strong>     模版文件夹。当您新建文章时，Hexo会根据<code>scaffold</code>来建立文件<br>├── <strong>source</strong>        资源文件夹是存放用户资源的地方<br>├──   ├── <strong>_drafts</strong> 草稿箱，可以将不想发布的文章放在该目录下面，比如我将自己的写作模板文件放在这里<br>├──   └── <strong>_posts</strong> 该目录下的文件会被生成和发布<br>├── <strong>themes</strong>        主题文件夹。Hexo 会根据主题来生成静态页面<br>└── <strong>public</strong>        执行<code>generate</code>命令后生成<code>public文</code>件夹，并解析Markdown和HTML文件到该目录</p>
</blockquote>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>以下是操作Hexo书写、生成、部署博客常用的几个命令，后面会有详细介绍：</p>
<ul>
<li><code>hexo init [folder]</code></li>
<li><code>hexo version</code></li>
<li><code>hexo list &lt;type&gt;</code></li>
<li><code>hexo new [layout] &lt;title&gt;</code></li>
<li><code>hexo publish [layout] &lt;filename&gt;</code></li>
<li><code>hexo generate</code></li>
<li><code>hexo clean</code></li>
<li><code>hexo server</code></li>
<li><code>hexo deploy</code></li>
</ul>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><p>创建草稿，写作，本地预览</p>
<ul>
<li><code>hexo --config custom.yml new draft my_blog</code></li>
<li><code>hexo --config custom.yml server --draft</code></li>
</ul>
<p>写作完成之后，发布草稿，生成静态博客，并部署到 Github Pages</p>
<ul>
<li><code>hexo --config custom.yml publish draft my_blog</code></li>
<li><code>hexo clean</code> 正常情况不需要执行该命令</li>
<li><code>hexo --config custom.yml generate</code></li>
<li><code>hexo --config custom.yml deploy</code></li>
</ul>
<h2 id="我的搭建过程"><a href="#我的搭建过程" class="headerlink" title="我的搭建过程"></a>我的搭建过程</h2><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>按照Hexo官网的步骤依次安装即可。</p>
<ul>
<li>Git</li>
<li>Node.js</li>
<li>Hexo</li>
</ul>
<p>升级 Hexo 的建议：</p>
<ul>
<li>小版本内除非必要，否则不要升级，意义不大</li>
<li>大版本升级最好重新创建 Hexo 工程，然后拷贝博客源文件和相关配置</li>
<li>上述建议的原因是我在网上看到了很多升级的惨痛教训</li>
</ul>
<h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>官网有很多的<a href="https://hexo.io/themes/" target="_blank" rel="external">主题</a>，每个都有说明文档，照着按照即可，本博客使用的是<strong>apollo</strong>；</p>
<p>下面是我浏览所有主题之后觉得比较好看的，后面的星表示大致的喜欢程度：</p>
<ul>
<li><a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">Apollo</a> ⭐️⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/hexojs/hexo-theme-landscape" target="_blank" rel="external">Landscape</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">litten/hexo-theme-yilia</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/probberechts/cactus-dark" target="_blank" rel="external">Cactus Dark</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/tufu9441/maupassant-hexo" target="_blank" rel="external">Maupassant</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/lotabout/very-simple" target="_blank" rel="external">Very-Simple</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/Alex-fun/hexo-theme-jane/" target="_blank" rel="external">jane</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/ahonn/hexo-theme-even" target="_blank" rel="external">even</a> ⭐️⭐️⭐️⭐️</li>
<li><a href="https://github.com/CodeDaraW/Hacker" target="_blank" rel="external">Hacker</a> ⭐️⭐️⭐️</li>
<li><a href="https://dnxbf321.github.io" target="_blank" rel="external">Simplest</a> <a href="https://github.com/dnxbf321/hexo-theme-simplest" target="_blank" rel="external">github</a> ⭐️⭐️</li>
</ul>
<p>PS：若主题是通过 Github 管理的，则可直接进入主题目录通过 git 命令对其更新。</p>
<h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>我主要修改了下面的内容：</p>
<ul>
<li>博客基本信息：标题、作者等</li>
<li>deploy信息：指定部署的网站</li>
<li>主题：选择主题，并修改对应的主题配置文件，比如评论和谷歌分析；</li>
</ul>
<p>Hexo支持本地自定义配置文件，然后在执行Hexo命令时通过<code>--config</code>字段指定本地配置文件即可，如我本地的配置文件叫做<code>custom.yml</code>，用法如下：</p>
<ul>
<li><code>hexo --config custom.yml new [layout] &lt;title&gt;</code></li>
<li><code>hexo --config custom.yml server -p 5000</code></li>
<li><code>hexo --config custom.yml server -p 5000 --draft</code></li>
</ul>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>可通过插件来扩展Hexo，提升Hexo的写作体检，插件基本有下面两个方面的来源：</p>
<ul>
<li>模板会内置一些插件</li>
<li>自己安装插件<ul>
<li><a href="https://github.com/hexojs/hexo-filter-auto-spacing" target="_blank" rel="external">hexo-filter-auto-spacing</a>，在中日韩文与英文之间插入空格，提升阅读体验</li>
</ul>
</li>
</ul>
<h4 id="Disqus评论"><a href="#Disqus评论" class="headerlink" title="Disqus评论"></a>Disqus评论</h4><p>我的评论系统选择的是Disqus，个人感觉比多说优势多太多，而且功能强大，唯一的不好就是需要翻墙。</p>
<p>一些Tips：</p>
<ul>
<li>163邮箱默认收不到Disqus的邮件，需要设置白名单<ul>
<li>在邮箱中依此点击：“设置”-&gt;“反垃圾/黑白名单”-&gt;在白名单中添加<code>disqus.com</code></li>
</ul>
</li>
<li>Migration Tools 很强大，很好用；本质是将旧的Url映射到新的Url，并且支持多个Url映射到同一个新的Url，可用于完成下面功能：<ul>
<li>将旧Url的评论迁移到新Url</li>
<li>将多组评论汇总到一个Url</li>
<li>删除Url，通过将其映射到其他Url（一般映射为已存在的Url）即可删除该Url，参考自<a href="https://help.disqus.com/customer/portal/questions/6515747-how-can-i-delete-discussions-" target="_blank" rel="external">How can I delete Discussions?</a></li>
</ul>
</li>
</ul>
<h4 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h4><p>通过 <code>hexo new filename</code> 创建新的文章，用Markdown编辑器完成文章内容的编写。</p>
<h4 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h4><p>本博客选择部署在 GitHub Pages 上面，具体可参考<a href="https://hexo.io/zh-cn/docs/deployment.html#Git" target="_blank" rel="external">Hexo部署:Git</a></p>
<p>关于 GitHub Pages 的介绍可参考官方文档：<a href="https://help.github.com/articles/what-is-github-pages/" target="_blank" rel="external">What is GitHub Pages?</a> 。</p>
<h4 id="购买并绑定域名"><a href="#购买并绑定域名" class="headerlink" title="购买并绑定域名"></a>购买并绑定域名</h4><p>具体方法可Google或者参考文章后面的参考链接：</p>
<ul>
<li>在 <a href="https://godaddy.com/" target="_blank" rel="external">GoDaddy</a> 购买域名</li>
<li>将域名绑定到 <code>http://username.github.io</code>,具体参考下面的链接：<ul>
<li><a href="https://help.github.com/articles/setting-up-an-apex-domain/" target="_blank" rel="external">Setting up an apex domain</a></li>
<li><a href="http://andrewsturges.com/blog/jekyll/tutorial/2014/11/06/github-and-godaddy.html" target="_blank" rel="external">Configuring a Godaddy domain name with github pages</a></li>
</ul>
</li>
</ul>
<h2 id="博客备份"><a href="#博客备份" class="headerlink" title="博客备份"></a>博客备份</h2><p>俗话说备份容灾非常重要，博客源文件的备份亦是如此，尤其随着博客数目增加之后，备份既可以保存原始文件用于恢复博客，还能够帮忙对比每次的修改，避免意外误操作已有的博客文件。</p>
<p>常用的备份策略：</p>
<ul>
<li>在本地磁盘备份博客源文件</li>
<li>通过 Github、Bitbucket 等网络仓库备份，个人建议私有仓库，恰巧 Bitbucket 提供免费的私有仓库，值得拥有</li>
</ul>
<p>上述两种方案都可以通过手工操作，也可以写代码辅助自己完成；为此我专门写了一个备份程序，辅助自己完成备份，简单方便。</p>
<p>我的备份方案是采用 Bitbucket 的私有仓库，本地采用自动化脚本辅助备份、还原，备份工具及说明可参考我的 Github 仓库：<a href="https://github.com/tanchao90/hexo-git-backup" target="_blank" rel="external">tanchao90/hexo-git-backup</a>。</p>
<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h4 id="bash-hexo-command-not-found"><a href="#bash-hexo-command-not-found" class="headerlink" title="bash: hexo: command not found"></a>bash: hexo: command not found</h4><p>在 Windows 下有两种提示，同一个意思</p>
<ul>
<li>cmd 窗口： ‘hexo’ 不是内部或外部命令，也不是可运行的程序或批处理文件</li>
<li>Git Bash窗口： bash: hexo: command not found</li>
</ul>
<p>我在安装的过程中遇到了该错误，最终是通过卸载 Node.js 和 Git，并重新安装它们和 Hexo 解决的<br>为此还在 Hexo 项目下面发起了一个Issue：<a href="https://github.com/hexojs/hexo/issues/1871" target="_blank" rel="external">Windows 7: bash: hexo: command not found #1871</a></p>
<h4 id="npm-WARN-optional-dep-failed-continuing-fsevents-1-0-11"><a href="#npm-WARN-optional-dep-failed-continuing-fsevents-1-0-11" class="headerlink" title="npm WARN optional dep failed, continuing fsevents@1.0.11"></a>npm WARN optional dep failed, continuing fsevents@1.0.11</h4><p>这是我安装 Hexo 时出现的警告，通过 Google 发现是</p>
<blockquote>
<p>fsevents is an API available only on OSX</p>
</blockquote>
<p><a href="http://stackoverflow.com/questions/31228862/npm-warn-optional-dep-failed-continuing-fsevents0-3-6" target="_blank" rel="external">npm WARN optional dep failed, continuing fsevents@0.3.6</a></p>
<p>可以忽略该警告，至少我没遇到什么问题</p>
<h4 id="博客乱码问题"><a href="#博客乱码问题" class="headerlink" title="博客乱码问题"></a>博客乱码问题</h4><p>最近迁移旧博客到 Hexo 时遇到神奇的乱码问题，包括本文扩充之后也出现了，坑了我很久，还以为是特殊代码片段引起的解析问题，具体估计是下面的原因导致的：</p>
<ul>
<li><a href="https://github.com/hexojs/hexo-server/issues/23" target="_blank" rel="external">Garbled code will be generated if .md file contains too many Chinese characters #23</a></li>
<li><a href="https://github.com/hexojs/hexo/issues/2285" target="_blank" rel="external">一篇文章总字符数过多会出现乱码是什么问题? #2285</a></li>
</ul>
<p><strong>实测表明：</strong>该问题只在本地Server调试时存在，上传到GitHub Pages之后正常显示；<br>个人猜测可能是本地每篇文章的缓存空间不足导致。</p>
<h4 id="ERROR-Deployer-not-found-git"><a href="#ERROR-Deployer-not-found-git" class="headerlink" title="ERROR Deployer not found: git"></a>ERROR Deployer not found: git</h4><p>在2017年2月份的时候，尝试重建了一次 Hexo 环境，结果遇到了上述错误，最终参考 <a href="http://www.jianshu.com/p/5e0ca2b14815" target="_blank" rel="external">升级hexo碰到“Deployer not found”问题及解决</a> 解决，解决办法是执行下面的命令安装 git 组件：</p>
<p><code>npm install --save hexo-deployer-git</code></p>
<h2 id="命令详细说明"><a href="#命令详细说明" class="headerlink" title="命令详细说明"></a>命令详细说明</h2><p>这部分内容可以直接查看官网，那里的信息最新最准确。</p>
<h4 id="init-新建一个网站"><a href="#init-新建一个网站" class="headerlink" title="init: 新建一个网站"></a>init: 新建一个网站</h4><blockquote>
<p><strong>$ hexo init [folder]</strong></p>
</blockquote>
<h4 id="version-显示Hexo版本"><a href="#version-显示Hexo版本" class="headerlink" title="version: 显示Hexo版本"></a>version: 显示Hexo版本</h4><blockquote>
<p><strong>$ hexo version</strong></p>
</blockquote>
<h4 id="new-新建一篇文章"><a href="#new-新建一篇文章" class="headerlink" title="new: 新建一篇文章"></a>new: 新建一篇文章</h4><blockquote>
<p><strong>hexo new [layout] title</strong><br>layout指定文章的布局，默认为 post，可以通过修改<code>_config.yml</code>中的<code>default_layout</code>参数来指定默认布局<br>Hexo 有三种默认布局：<code>post、page 和 draft</code>，它们分别对应不同的路径，而您自定义的其他布局和 post 相同，都将储存到 source/_posts 文件夹</p>
<blockquote>
<p>post    source/_posts<br>page    source<br>draft    source/_drafts</p>
</blockquote>
</blockquote>
<h4 id="generate-生成静态文件"><a href="#generate-生成静态文件" class="headerlink" title="generate: 生成静态文件"></a>generate: 生成静态文件</h4><blockquote>
<p><strong>$ hexo generate</strong><br>-d, –deploy, 文件生成后立即部署网站<br>-w, –watch, 监视文件变动</p>
</blockquote>
<h4 id="clean-清除缓存文件-db-json-和已生成的静态文件-public"><a href="#clean-清除缓存文件-db-json-和已生成的静态文件-public" class="headerlink" title="clean: 清除缓存文件(db.json) 和已生成的静态文件 (public)"></a>clean: 清除缓存文件(db.json) 和已生成的静态文件 (public)</h4><blockquote>
<p><strong>$ hexo clean</strong></p>
</blockquote>
<h4 id="list-列出网站资料"><a href="#list-列出网站资料" class="headerlink" title="list: 列出网站资料"></a>list: 列出网站资料</h4><blockquote>
<p><strong>$ hexo list type</strong></p>
</blockquote>
<h4 id="publish-发布草稿，也就是将source-drafts中的草稿文件移动到source-posts文件夹"><a href="#publish-发布草稿，也就是将source-drafts中的草稿文件移动到source-posts文件夹" class="headerlink" title="publish: 发布草稿，也就是将source/_drafts中的草稿文件移动到source/_posts文件夹"></a>publish: 发布草稿，也就是将<code>source/_drafts</code>中的草稿文件移动到<code>source/_posts</code>文件夹</h4><blockquote>
<p><strong>$ hexo publish [layout] filename</strong></p>
</blockquote>
<h4 id="server-启动服务器，默认访问网址为http-localhost-4000"><a href="#server-启动服务器，默认访问网址为http-localhost-4000" class="headerlink" title="server: 启动服务器，默认访问网址为http://localhost:4000/"></a>server: 启动服务器，默认访问网址为<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a></h4><blockquote>
<p><strong>$ hexo server</strong><br>-i, –ip, 重设ip，覆盖默认的<code>0.0.0.0</code><br>-p, –port, 重设端口<br>-s, –static, 只使用静态文件，也就是不监听文件变化<br>-l, –log, 启动日记记录，使用覆盖记录格式</p>
</blockquote>
<h4 id="deploy-部署网站"><a href="#deploy-部署网站" class="headerlink" title="deploy: 部署网站"></a>deploy: 部署网站</h4><blockquote>
<p><strong>$ hexo deploy</strong><br>-g, –generate, 部署之前预先生成静态文件</p>
</blockquote>
<p>若部署到Git（Github），需提前安装<strong>hexo-deployer-git</strong>：<code>npm install hexo-deployer-git --save</code></p>
<h4 id="render-渲染文件"><a href="#render-渲染文件" class="headerlink" title="render: 渲染文件"></a>render: 渲染文件</h4><blockquote>
<p><strong>$ hexo render file1 [file2] …</strong><br>-o, –output, 设置输出路径</p>
</blockquote>
<h4 id="选项-在执行上面的命令时还可以增加下面的选项，完成额外功能"><a href="#选项-在执行上面的命令时还可以增加下面的选项，完成额外功能" class="headerlink" title="选项: 在执行上面的命令时还可以增加下面的选项，完成额外功能"></a>选项: 在执行上面的命令时还可以增加下面的选项，完成额外功能</h4><blockquote>
<p><strong>$ hexo –safe</strong>    安全模式，在安全模式下，不会载入插件和脚本<br><strong>$ hexo –debug</strong>   调试模式，在终端中显示调试信息并记录到 debug.log<br><strong>$ hexo –silent</strong>  简洁模式，隐藏终端信息<br><strong>$ hexo –config custom.yml</strong>  自定义配置文件的路径，执行后将不再使用 _config.yml</p>
</blockquote>
<h2 id="官方文档梳理"><a href="#官方文档梳理" class="headerlink" title="官方文档梳理"></a>官方文档梳理</h2><p>梳理 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo官方文档</a>，帮助自己回忆每个模块的内容，读者可以直接查看官网。</p>
<h4 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h4><ul>
<li>写作: 主要介绍一般的写作流程，从创建文章到发布</li>
<li><strong>Front-matter</strong>: 可以方便的修改文章信息，如指定文章建立时间，对发布历史文章非常方便~(≧▽≦)/~</li>
<li><strong>标签插件（Tag Plugins）</strong>: 支持多种标签格式，如引用文章内容、代码块、图片等，这一节功能强大，能极大的帮助丰富文章内容</li>
<li><strong>资源文件夹</strong>: 主要讲了Hexo中图片等资源的管理，普通用户将资源放在<strong>source</strong>目录下即可</li>
<li><strong>数据文件夹</strong>: 实现数据复用</li>
<li>服务器: 详解<code>server</code>命令</li>
<li>生成器: 详解<code>generate</code>命令</li>
<li><strong>部署</strong>: 讲解<code>deploy</code>命令和相关配置，可以部署到GitHub、Heroku等，详细说明了每一种对应的配置</li>
</ul>
<h4 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h4><ul>
<li>永久链接（Permalinks）：配置网页链接的格式</li>
<li>主题：添加、配置主题，主题目录说明</li>
<li>模板：模板的使用</li>
<li>变量：Hexo支持的变量，可在模板中使用</li>
<li>辅助函数：列举了Hexo内置的所有函数</li>
<li>国际化（i18n）：国际化的配置，也就是支持多语种选择</li>
<li>插件: 插件使用和开发</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><a href="http://codepub.cn/2015/04/06/Github-Pages-personal-blog-from-Octopress-to-Hexo/" target="_blank" rel="external">Github Pages个人博客，从Octopress转向Hexo</a></li>
<li><a href="http://blog.csdn.net/poem_of_sunshine/article/details/29369785/" target="_blank" rel="external">如何搭建一个独立博客——简明Github Pages与Hexo教程</a></li>
<li><a href="https://github.com/limedroid/HexoLearning" target="_blank" rel="external">Hexo 博客搭建指南</a></li>
<li><a href="http://wanderyt.github.io/2015/07/13/Apply-theme-and-other-features-in-Hexo/" target="_blank" rel="external">Hexo中添加主题等其他功能</a><ul>
<li>Sitemap网站地图</li>
<li>Swifttype，站内搜索框</li>
</ul>
</li>
<li><a href="http://www.jianshu.com/p/e15121af5e22" target="_blank" rel="external">hexo干货系列：（七）hexo安装统计插件</a>，CNZZ</li>
<li><a href="https://blog.yizhilee.com/post/blog-config/" target="_blank" rel="external">Hexo 主题基础配置</a><ul>
<li>Sitemap</li>
<li>流量分析</li>
<li>侧栏</li>
<li>RSS</li>
<li>社交连接</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要记录我用 &lt;strong&gt;Hexo&lt;/strong&gt; 和 &lt;strong&gt;GitHub Pages&lt;/strong&gt; 搭建个人博客的过程，主要包括以下章节：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#Hexo&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#我的搭建过程&quot;&gt;我的搭建过程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#博客备份&quot;&gt;博客备份&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#遇到的问题&quot;&gt;遇到的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#命令详细说明&quot;&gt;命令详细说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#官方文档梳理&quot;&gt;官方文档梳理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#参考文章&quot;&gt;参考文章&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="博客" scheme="http://tanchao90.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://tanchao90.com/tags/Hexo/"/>
    
      <category term="GitHub Pages" scheme="http://tanchao90.com/tags/GitHub-Pages/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tanchao90.com/hello-world/"/>
    <id>http://tanchao90.com/hello-world/</id>
    <published>2016-04-06T14:00:00.000Z</published>
    <updated>2017-11-18T15:25:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过几天的折腾，终于用 <a href="https://hexo.io/" target="_blank" rel="external"><strong>Hexo</strong></a> 搭建好了新博客，新的域名、新的风格、新的开始。</p>
<h2 id="为什么开新博客？"><a href="#为什么开新博客？" class="headerlink" title="为什么开新博客？"></a>为什么开新博客？</h2><p>大概去年10月份的时候用 WordPress 搭建了一个<a href="http://www.tanchaoblog.com/" target="_blank" rel="external">博客</a>，陆陆续续发布了几篇文章，目前依旧在用，但是一直找没找到一个心仪的模板。</p>
<p>前几天看到<a href="http://numbbbbb.com/" target="_blank" rel="external">梁杰的个人博客</a>时被其简单漂亮的风格所吸引，然后知道了 <strong>Hexo</strong>，然后从上个周末开始利用业余时间学习 <strong>Hexo</strong> 搭建博客，接着就有了这篇文章。</p>
<a id="more"></a>
<p>选择从 WordPress 转移到 Hexo 的原因：</p>
<ul>
<li>Hexo 书写发布文章更加简单方便，专注于内容</li>
<li>Hexo 有简洁漂亮的主题</li>
<li>可以用 GitHub Pages 等网站部署博客，省去了购买管理空间的麻烦</li>
</ul>
<p>后续我会把 WordPress上 的文章慢慢转移过来，也会写文章记录用 Hexo 搭建博客的全过程。 </p>
<p>通过书写前面几篇博客，发现把东西写出来和学会或者知道还是有差别的，写的过程需要回忆、整理、总结，对自己还是蛮有帮助的，至少会有下面的提高：</p>
<ul>
<li>提高文字表达能力</li>
<li>整理知识，记录学习历程</li>
<li>分享，也许还能帮助到其他人</li>
</ul>
<p>在此感谢<a href="http://armsword.com/" target="_blank" rel="external">armsword的涅槃之地</a>，最开始是雷神教我搭建 WordPress 博客。</p>
<h2 id="一年"><a href="#一年" class="headerlink" title="一年"></a>一年</h2><p>这个时间点也是非常巧，去年的4月6号从北京到了杭州，4月7号就去<strong>诸暨东白湖基地</strong>参加了户外拓展训练，接着就正式开始了职场生涯，到现在刚刚工作一年了，这一年过的前所未有的快，可能是因为太忙吧！</p>
<p>入职这一年主要做了三件事：</p>
<ul>
<li>新人 Mini 项目</li>
<li>代理游戏的合作开发与上线</li>
<li>目前正在开发一款 2.5D-MMO-RPG 游戏</li>
</ul>
<p>这一年的时间基本上全部花在了公司，尤其是新人 Mini 项目和代理游戏合作开发期间，晚上十一二点回家再平常不过了，付出了很多，但个人成长和得到的东西却比较有限，甚至对某些结果有些失望。</p>
<p>接下来的一年的期望或者计划：</p>
<ul>
<li>多花点时间在个人学习方面</li>
<li>每月阅读一本书</li>
<li>一两月写一篇博客</li>
</ul>
<p>附一张去年户外拓展训练时我们<a href=""><strong>一血队</strong></a>用荧光棒制作的一副图案，图案的意思自己品味吧^-^！</p>
<p><img src="/images/hello-world/1.png" alt=""></p>
<h2 id="搭建本博客用到的技术"><a href="#搭建本博客用到的技术" class="headerlink" title="搭建本博客用到的技术"></a>搭建本博客用到的技术</h2><ol>
<li><a href="https://pages.github.com/" target="_blank" rel="external">GitHub Pages</a>： 用于部署博客</li>
<li><a href="https://godaddy.com/" target="_blank" rel="external">GoDaddy 域名</a>： 购买域名，当然也可以不要域名，部署到GitHub上的话可以直接用 <code>http://username.github.io</code> 访问<ul>
<li><a href="https://sg.godaddy.com/zh/help/add-a-subdomain-20047" target="_blank" rel="external">GoDaddy 添加子域的步骤</a> </li>
</ul>
</li>
<li><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>： 静态网站生成器</li>
<li><a href="https://github.com/pinggod/hexo-theme-apollo" target="_blank" rel="external">apollo 模板</a>： Hexo 的模板，风格来自 Vue.js 的文档，参考自<a href="http://numbbbbb.com/2016/01/14/hello-world/" target="_blank" rel="external">Hello World</a></li>
<li><a href="http://markdownpad.com/" target="_blank" rel="external">MarkdownPad2</a>： Windows 下好用的 Markdown 编辑器</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过几天的折腾，终于用 &lt;a href=&quot;https://hexo.io/&quot;&gt;&lt;strong&gt;Hexo&lt;/strong&gt;&lt;/a&gt; 搭建好了新博客，新的域名、新的风格、新的开始。&lt;/p&gt;
&lt;h2 id=&quot;为什么开新博客？&quot;&gt;&lt;a href=&quot;#为什么开新博客？&quot; class=&quot;headerlink&quot; title=&quot;为什么开新博客？&quot;&gt;&lt;/a&gt;为什么开新博客？&lt;/h2&gt;&lt;p&gt;大概去年10月份的时候用 WordPress 搭建了一个&lt;a href=&quot;http://www.tanchaoblog.com/&quot;&gt;博客&lt;/a&gt;，陆陆续续发布了几篇文章，目前依旧在用，但是一直找没找到一个心仪的模板。&lt;/p&gt;
&lt;p&gt;前几天看到&lt;a href=&quot;http://numbbbbb.com/&quot;&gt;梁杰的个人博客&lt;/a&gt;时被其简单漂亮的风格所吸引，然后知道了 &lt;strong&gt;Hexo&lt;/strong&gt;，然后从上个周末开始利用业余时间学习 &lt;strong&gt;Hexo&lt;/strong&gt; 搭建博客，接着就有了这篇文章。&lt;/p&gt;
    
    </summary>
    
      <category term="博客" scheme="http://tanchao90.com/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://tanchao90.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ--Message Queue（消息队列）</title>
    <link href="http://tanchao90.com/rabbitmq/"/>
    <id>http://tanchao90.com/rabbitmq/</id>
    <published>2016-01-01T16:43:10.000Z</published>
    <updated>2016-12-23T16:43:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>自从搭建好博客基本没写过什么，这篇关于RabbitMQ的博客已经拖了很久了，刚好放假总结一下，希望能为16年开个好头。</p>
<p>这是2015年参与一个合作项目时，在他们的项目中用到了RabbitMQ作为消息转发中间件，这也是我后续开发的新功能的基础，下面就将我对RabbitMQ的学习做个简单的总结。</p>
<p>类似的消息队列还有很多，如<a href="https://kafka.apache.org/" target="_blank" rel="external">kalka</a>，<a href="http://zeromq.org/" target="_blank" rel="external">ZeroMQ</a>等，使用时可先结合自己的使用场景对比，选择最合适的。</p>
<a id="more"></a>
<h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><h4 id="Rabbitmq官方文档"><a href="#Rabbitmq官方文档" class="headerlink" title="Rabbitmq官方文档"></a><a href="https://www.rabbitmq.com/" target="_blank" rel="external">Rabbitmq官方文档</a></h4><ul>
<li>非常非常好的学习文档，通过其中的六节教程可以完成RabbitMQ的学习，配图清晰明了，本文也借用了其中很多的图片。</li>
</ul>
<h4 id="pika官方文档"><a href="#pika官方文档" class="headerlink" title="pika官方文档"></a><a href="http://pika.readthedocs.org/en/latest/index.html" target="_blank" rel="external">pika官方文档</a></h4><ul>
<li>官方推荐的Python库，用于在Python中访问RabbitMQ，具体的操作函数可在其中查看；</li>
<li>pika 是 <a href="https://www.amqp.org/" target="_blank" rel="external">AMQP</a>（Advanced Message Queuing Protocol） 协议的一种实现；</li>
<li>关于Python连接RabbitMQ还有其他库，如<a href="https://github.com/celery/py-amqp" target="_blank" rel="external">py-amqp</a>，<a href="https://barryp.org/software/py-amqplib/" target="_blank" rel="external">py-amqplib</a>。</li>
</ul>
<h4 id="其他参考资料"><a href="#其他参考资料" class="headerlink" title="其他参考资料"></a>其他参考资料</h4><ul>
<li><a href="https://my.oschina.net/hncscwc/blog/262246?fromerr=Qm5JsP1J" target="_blank" rel="external">rabbitmq用户管理</a>：用于管理用户，如添加用户、删除用户、设置权限等。</li>
<li><a href="https://www.rabbitmq.com/tutorials/amqp-concepts.html" target="_blank" rel="external">AMQP 0-9-1 Model Explained</a></li>
<li><a href="http://www.amqp.org/resources/download" target="_blank" rel="external">AMQP Protocol Downloads</a></li>
<li><a href="http://www.jianshu.com/p/f2d3c544d3c7" target="_blank" rel="external">RabbitMQ在分布式系统中的应用</a></li>
<li><a href="http://blog.csdn.net/cadem/article/details/53422912" target="_blank" rel="external">RabbitMQ可用性和可靠性分析</a></li>
<li><a href="http://blog.wentong.me/2016/01/message-queue-research/" target="_blank" rel="external">几款消息中间的调研</a></li>
<li><a href="http://www.jianshu.com/p/d31ae9e3bfb6" target="_blank" rel="external">即时通信RabbitMQ二-性能测试</a></li>
</ul>
<h2 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h2><h4 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h4><ul>
<li>RabbitMQ基于Erlang开发，因此需要安装Erlang。</li>
</ul>
<h4 id="Windows版本"><a href="#Windows版本" class="headerlink" title="Windows版本"></a>Windows版本</h4><ul>
<li>下载安装包安装即可。</li>
</ul>
<h4 id="Linux："><a href="#Linux：" class="headerlink" title="Linux："></a>Linux：</h4><ul>
<li>Ubuntu下执行命令：<code>sudo apt-get install rabbitmq-server</code></li>
<li>在RabbitMQ下添加<code>test</code>账户，并赋值其权限为Administrator：<ul>
<li><code>rabbitmqctl add_user test test</code></li>
<li><code>rabbitmqctl set_user_tags test administrator</code></li>
</ul>
</li>
<li>若有必要，则执行指令，为test用户分配<code>/</code>目录权限，具体可参考下面的图片说明：<code>rabbitmqctl set_permissions -p / test &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code><img src="/images/rabbitmq/1.png" title="为test用户分配/目录权限">
</li>
</ul>
<h2 id="管理RabbitMQ"><a href="#管理RabbitMQ" class="headerlink" title="管理RabbitMQ"></a>管理RabbitMQ</h2><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><p>笔者只会一些简单的常用命令查看RabbitMQ的信息，但已经满足了我的开发需求，具体如下：</p>
<ul>
<li>查看所有的exchange：<code>rabbitmqctl list_exchanges</code></li>
<li>查看所有的queue：<code>rabbitmqctl list_queues</code></li>
<li>查看所有的用户：<code>rabbitmqctl list_users</code></li>
<li>查看所有的绑定（exchange和queue的绑定信息）：<code>rabbitmqctl list_bindings</code></li>
<li>查看消息确认信息：<code>rabbitmqctl list_queues name messages_ready messages_unacknowledged</code></li>
<li>查看RabbitMQ状态，包括版本号等信息：<code>rabbitmqctl status</code></li>
</ul>
<h4 id="Web管理插件"><a href="#Web管理插件" class="headerlink" title="Web管理插件"></a>Web管理插件</h4><p>该方式操作简单，功能强大且直观，前提是启动Web插件，然后即可通过浏览器查看。<br>启动Web管理插件的命令（<a href="https://www.rabbitmq.com/management.html" target="_blank" rel="external">官方资料</a>）: <code>rabbitmq-plugins enable rabbitmq_management</code><br>下图是RabbitMQ Web管理界面：<br><img src="/images/rabbitmq/2.png" title="RabbitMQ Web管理界面"></p>
<h2 id="RabbitMQ原理及基本功能介绍"><a href="#RabbitMQ原理及基本功能介绍" class="headerlink" title="RabbitMQ原理及基本功能介绍"></a>RabbitMQ原理及基本功能介绍</h2><h4 id="基本通信模型"><a href="#基本通信模型" class="headerlink" title="基本通信模型"></a>基本通信模型</h4><ul>
<li>A <strong>producer</strong> is a user application that sends messages.</li>
<li>A <strong>queue</strong> is a buffer that stores messages.</li>
<li>A <strong>consumer</strong> is a user application that receives messages.</li>
</ul>
<img src="/images/rabbitmq/3.png" title="RabbitMQ基本通信模型">
<p>符号说明：</p>
<ul>
<li>P（Producer）：发送者，生产消息</li>
<li>X（Exchange）：消息交换器，用于向Queue发布消息，类似于路由器</li>
<li>amq.XX（Queue）：消息队列，用于存储消息</li>
<li>C（Consumer）：消费者，接收并处理消息</li>
</ul>
<h4 id="RabbitMQ的部分实现机制"><a href="#RabbitMQ的部分实现机制" class="headerlink" title="RabbitMQ的部分实现机制"></a>RabbitMQ的部分实现机制</h4><ol>
<li>Round-robin dispatching（循环分发）<ul>
<li>即RabbitMQ会循环将消息分发给每一个消费者；</li>
<li>若启用该机制，则假如有n个消费者，那么RabbitMQ收到n个消息时，会逐个给每个消费者发送一个消息；</li>
</ul>
</li>
<li>Message acknowledgment（消息确认机制-ack）<ul>
<li>当打开确认机制（默认打开，可通过参数<code>no_ack=True</code>关闭）时消费者在处理消息的过程中挂掉时，RabbitMQ会将该消息发送给其他消费者；</li>
<li>开启确认模式时，消费者必须在处理完消息是发送确认消息，否则该消息会被重新发送给一个消费者（可以看作是随机发送），如此下去RabbitMQ将吃掉更多的内存；</li>
</ul>
</li>
<li>Message durability（消息持久化）<ul>
<li>若开启该功能，则在RabbitMQ Crash的情况下不丢失消息；</li>
<li>但这不能完全保证所有消息不丢失，如在RabbitMQ收到消息到将其存储到disk的期间发生crash，将丢失这期间收到的所有消息；</li>
</ul>
</li>
<li>Fair dispatch（公平的分发）<ul>
<li>RabbitMQ默认收到消息时直接分发给对应消费者，而不考虑任务大小；</li>
<li>为了能够公平的分发消息，也就是考虑任务大小，可以配置<code>channel.basic_qos(prefetch_count=1)</code>，保证接受者处理完消息，并且返回ack消息时才为其派发下一个消息；从而避免某些消费者很忙，某些很闲的情况；</li>
<li><strong>注</strong>：需要保证消息不超过消息队列的大小：如处理每个消息需要1分钟，而每秒钟就会产生一个消息，那么这种情况下很快就会出现消息数量超过queue size的情况；</li>
</ul>
</li>
</ol>
<h4 id="Exchange和Queue的一些说明"><a href="#Exchange和Queue的一些说明" class="headerlink" title="Exchange和Queue的一些说明"></a>Exchange和Queue的一些说明</h4><ol>
<li>默认Exchang<ul>
<li>定义exchange时，若名字为空，则使用默认exchange；</li>
</ul>
</li>
<li>临时Queue<ul>
<li><code>result=channel.queue_declare()</code></li>
<li><code>result=channel.queue_declare(exclusive=True)</code></li>
<li>上面两句代码即可生成一个无名临时队列，当断开消费者时，该队列也会被删除；</li>
</ul>
</li>
<li>绑定Queue和Exchange<ul>
<li>队列绑定到exchange上才可以接收exchange分发的消息；</li>
<li><code>channel.queue_bind(exchange=&#39;logs&#39;,queue=result.method.queue)</code>，这句话即可将前面的无名队列绑定到名为logs的exchange；</li>
<li>绑定成功之后，exchange收到消息时就会广播给和其绑定的所有消费者；</li>
</ul>
</li>
</ol>
<h2 id="RabbitMQ的四种工作模式"><a href="#RabbitMQ的四种工作模式" class="headerlink" title="RabbitMQ的四种工作模式"></a>RabbitMQ的四种工作模式</h2><p>RabbitMQ并不是直接将消息发送到queue，而是将消息发送给exchange，然后exchange再将消息发送到对应的queue；<br>exchange共有四种模式：<code>fanout</code>, <code>direct</code>, <code>topic</code> and <code>headers</code>。</p>
<h4 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h4><p>exchange将消息发送给和该exchange连接的所有queue；也就是所谓的广播模式；此模式下忽略routing_key；<br><img src="/images/rabbitmq/4.png" title="fanout模型"></p>
<h4 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h4><p>路由模式，通过routing_key将消息发送给对应的queue;<br>如下面这句即可设置exchange为direct模式，只有routing_key为“black”时才将其发送到队列queue_name；<br><code>channel.queue_bind(exchange=exchange_name,queue=queue_name,routing_key=&#39;black&#39;)</code><br><img src="/images/rabbitmq/5.png" title="direct模型"></p>
<p>在上图中，Q1和Q2可以绑定同一个key，如绑定routing_key=‘KeySame’，那么收到routing_key为KeySame的消息时将会同时发送给Q1和Q2，退化为广播模式；</p>
<h4 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h4><p>topic模式类似于direct模式，只是其中的routing_key变成了一个有“.”分隔的字符串，“.”将字符串分割成几个单词，每个单词代表一个条件；<br><img src="/images/rabbitmq/6.png" title="topic模型"></p>
<ul>
<li>* (star) can substitute for exactly one word.</li>
<li># (hash) can substitute for zero or more words.</li>
</ul>
<p>其中整个字符串是一条路由规则，通过*和#即可实现灵活的路由，上图的解释如下：</p>
<ul>
<li>Q1 is interested in all the orange animals.</li>
<li>Q2 wants to hear everything about rabbits, and everything about lazy animals.</li>
</ul>
<p><strong>注：</strong></p>
<ul>
<li>一条消息可有同时满足多个规则，并分发给多个Queue，如：quick.orange.rabbit;</li>
<li>通过修改路由规则，topic可以退化为fanout和direct模式；</li>
</ul>
<h4 id="headers"><a href="#headers" class="headerlink" title="headers"></a>headers</h4><p>headers类型的Exchange不依赖于routing key与binding key的匹配规则来路由消息，而是根据发送的消息内容中的headers属性进行匹配。</p>
<ul>
<li>在绑定Queue与Exchange时指定一组键值对；</li>
<li>当消息发送到Exchange时，RabbitMQ会取到该消息的headers（也是一个键值对的形式），对比其中的键值对是否完全匹配Queue与Exchange绑定时指定的键值对；</li>
<li>如果完全匹配则消息会路由到该Queue，否则不会路由到该Queue。</li>
</ul>
<h2 id="RabbitMQ的使用"><a href="#RabbitMQ的使用" class="headerlink" title="RabbitMQ的使用"></a>RabbitMQ的使用</h2><h4 id="一些使用场景"><a href="#一些使用场景" class="headerlink" title="一些使用场景"></a>一些使用场景</h4><ol>
<li><p>日志记录</p>
<ul>
<li>各个程序可以向同一个Rabbitmq的exchange发送消息，exchange根据routing_key分发消息到不同的队列，然后再由不同的程序接受者处理；</li>
<li>其中routing_key可以设置成log等级，这样子可以对log实现分级处理；比如下面的两个场景：<ul>
<li>对于error的log可以报警；</li>
<li>只有info级别以上的消息才记录到disk；</li>
</ul>
</li>
<li>通过topic模式能实现更灵活的控制，具体看官方文档即可；</li>
</ul>
</li>
<li><p>消息分发服务</p>
<ul>
<li>在RabbitMQ不是瓶颈的情况下是很好的选择。</li>
</ul>
</li>
</ol>
<h4 id="RabbitMQ在我们项目中的用法"><a href="#RabbitMQ在我们项目中的用法" class="headerlink" title="RabbitMQ在我们项目中的用法"></a>RabbitMQ在我们项目中的用法</h4><p>下图中展示了整个系统的架构以及RabbitMQ在其中的作用和相关配置:<br><img src="/images/rabbitmq/7.png" title="项目架构图"></p>
<ul>
<li>L1、L2、L3：分别是三个服务器程序，同一套代码的三个运行实例，下面简称 L服务器；</li>
<li>Queue-1、Queue-2、Queue-3：同一套代码的三个运行实例，它们的作用是将RabbitMQ中发过来的Json数据转换成L服务器能够识别的数据，主要作用是数据格式转化和消息转发；</li>
<li>Tool1、Tool2：两个不同应用程序，都需要和L服务器进行交互；</li>
<li>图中分为上下两部分，上半部分是Tool1和Tool2向L服务器发送请求的流程，其中用到两个Exchange，一个模式时fanout，另一个是direct；</li>
<li>图中的下半部分是Tool1和Tool2接收来自L服务器的数据，通过一个fanout类型的Exchange广播，具体过滤工作由Tool程序自己完成。</li>
</ul>
<h2 id="注意事项及解决方法"><a href="#注意事项及解决方法" class="headerlink" title="注意事项及解决方法"></a>注意事项及解决方法</h2><h4 id="Queue和Exchange不支持修改参数"><a href="#Queue和Exchange不支持修改参数" class="headerlink" title="Queue和Exchange不支持修改参数"></a>Queue和Exchange不支持修改参数</h4><p>RabbitMQ不允许重新定义同名但是参数不同的queue，也就是不支持修改已有queue的属性；笔者曾经因为这个错误浪费了很多时间；</p>
<p><strong>例子</strong><br>在调用exchange_declare函数时，对于同一个exchange必须保证他们的参数完全相同，否则会出错；<br><code>No handlers could be found for logger &quot;pika.adapters.blocking_connection&quot; pika.exceptions.ChannelClosed: (None, None)</code></p>
<h4 id="pika-exceptions-IncompatibleProtocolError"><a href="#pika-exceptions-IncompatibleProtocolError" class="headerlink" title="pika.exceptions.IncompatibleProtocolError"></a>pika.exceptions.IncompatibleProtocolError</h4><p><strong>原因：</strong>协议错误，RabbitMQ版本不匹配；<br><strong>解决方法：</strong>升级RabbitMQ，一般是升级到3.X即可；</p>
<h4 id="pika-exceptions-ProbableAuthenticationError"><a href="#pika-exceptions-ProbableAuthenticationError" class="headerlink" title="pika.exceptions.ProbableAuthenticationError"></a>pika.exceptions.ProbableAuthenticationError</h4><p><strong>原因：</strong>权限验证错误<br><strong>解决办法：</strong></p>
<ul>
<li>检查连接的账户是否创建成功；</li>
<li>检查账户权限是否合适；</li>
<li>guest账户只能用于本地连接RabbitMQ，远程连接必须创建新账户；</li>
</ul>
<blockquote><p>This is because you are trying to authenticate using the username and password guest remotely. Starting with RabbitMQ 3.3 you need to create a new account to use remotely, and guest/guest can only be used locally.</p>
<footer><strong>eandersson</strong><cite><a href="http://stackoverflow.com/questions/30223339/pika-exceptions-probableauthenticationerror-when-trying-to-send-message-to-remot" target="_blank" rel="external">stackoverflow</a></cite></footer></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从搭建好博客基本没写过什么，这篇关于RabbitMQ的博客已经拖了很久了，刚好放假总结一下，希望能为16年开个好头。&lt;/p&gt;
&lt;p&gt;这是2015年参与一个合作项目时，在他们的项目中用到了RabbitMQ作为消息转发中间件，这也是我后续开发的新功能的基础，下面就将我对RabbitMQ的学习做个简单的总结。&lt;/p&gt;
&lt;p&gt;类似的消息队列还有很多，如&lt;a href=&quot;https://kafka.apache.org/&quot;&gt;kalka&lt;/a&gt;，&lt;a href=&quot;http://zeromq.org/&quot;&gt;ZeroMQ&lt;/a&gt;等，使用时可先结合自己的使用场景对比，选择最合适的。&lt;/p&gt;
    
    </summary>
    
      <category term="程序设计" scheme="http://tanchao90.com/categories/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="MQ" scheme="http://tanchao90.com/tags/MQ/"/>
    
      <category term="RabbitMQ" scheme="http://tanchao90.com/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
